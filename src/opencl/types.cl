/* Note: long is *always* 64-bit in OpenCL */
typedef uchar uint8_t;
typedef char int8_t;
typedef ushort uint16_t;
typedef short int16_t;
typedef uint uint32_t;
typedef int int32_t;
typedef ulong uint64_t;
typedef long int64_t;

#ifndef _OPENCL_COMPILER
#define _OPENCL_COMPILER 1
#endif

// used in sha512
#define DECLSPEC inline
#define MAYBE_VOLATILE
#define IS_GENERIC 1

typedef uchar  u8;
typedef ushort u16;
typedef uint   u32;
typedef ulong  u64;

typedef u8  u8a  __attribute__ ((aligned (8)));
typedef u16 u16a __attribute__ ((aligned (8)));
typedef u32 u32a __attribute__ ((aligned (8)));
typedef u64 u64a __attribute__ ((aligned (8)));


DECLSPEC u32 l32_from_64_S (u64 a)
{
  const u32 r = (u32) (a);

  return r;
}

DECLSPEC u32 h32_from_64_S (u64 a)
{
  a >>= 32;

  const u32 r = (u32) (a);

  return r;
}

DECLSPEC u64 hl32_to_64_S (const u32 a, const u32 b)
{
  return as_ulong ((uint2) (b, a));
}

// https://github.com/hashcat/hashcat/blob/fca4f7e8a6e8d7d695a24bcd03d40cab8abb21a0/OpenCL/inc_types.cl#L921

DECLSPEC u32 swap32_S (const u32 v)
{
  return (as_uint (as_uchar4 (v).s3210));
}

DECLSPEC u64 swap64_S (const u64 v)
{
  return (as_ulong (as_uchar8 (v).s76543210));
}

DECLSPEC u32 rotr32_S (const u32 a, const u32 n)
{
  return rotate (a, (32 - n));
}

DECLSPEC u32 rotl32_S (const u32 a, const u32 n)
{
  return rotate (a, n);
}

DECLSPEC u64 rotr64_S (const u64 a, const u32 n)
{
  return rotate (a, (u64) (64 - n));
}

DECLSPEC u64 rotl64_S (const u64 a, const u32 n)
{
  return rotate (a, (u64) n);
}

// https://github.com/hashcat/hashcat/blob/v5.1.0/OpenCL/inc_types.cl#L1051

DECLSPEC u32 hc_bytealign_S (const u32 a, const u32 b, const u32 c)
{
  const u64 tmp = ((((u64) a) << 32) | ((u64) b)) >> ((c & 3) * 8);

  return (u32) (tmp);
}

// https://github.com/hashcat/hashcat/blob/v5.1.0/OpenCL/inc_types.cl#L1063

DECLSPEC u32 hc_add3_S (const u32 a, const u32 b, const u32 c)
{
  return a + b + c;
}

// https://raw.githubusercontent.com/hashcat/hashcat/master/OpenCL/inc_common.cl

DECLSPEC void set_mark_1x4_S (u32 *v, const u32 offset)
{
  const u32 c = (offset & 15) / 4;
  const u32 r = 0xff << ((offset & 3) * 8);

  v[0] = (c == 0) ? r : 0;
  v[1] = (c == 1) ? r : 0;
  v[2] = (c == 2) ? r : 0;
  v[3] = (c == 3) ? r : 0;
}

DECLSPEC void append_helper_1x4_S (u32 *r, const u32 v, const u32 *m)
{
  r[0] |= v & m[0];
  r[1] |= v & m[1];
  r[2] |= v & m[2];
  r[3] |= v & m[3];
}

// https://raw.githubusercontent.com/hashcat/hashcat/v5.1.0/OpenCL/inc_common.cl

DECLSPEC void append_0x80_4x4_S (u32 *w0, u32 *w1, u32 *w2, u32 *w3, const u32 offset)
{
  u32 v[4];

  set_mark_1x4_S (v, offset);

  const u32 offset16 = offset / 16;

  append_helper_1x4_S (w0, ((offset16 == 0) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w1, ((offset16 == 1) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w2, ((offset16 == 2) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w3, ((offset16 == 3) ? 0x80808080 : 0), v);
}

DECLSPEC void append_0x80_8x4_S (u32 *w0, u32 *w1, u32 *w2, u32 *w3, u32 *w4, u32 *w5, u32 *w6, u32 *w7, const u32 offset)
{
  u32 v[4];

  set_mark_1x4_S (v, offset);

  const u32 offset16 = offset / 16;

  append_helper_1x4_S (w0, ((offset16 == 0) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w1, ((offset16 == 1) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w2, ((offset16 == 2) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w3, ((offset16 == 3) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w4, ((offset16 == 4) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w5, ((offset16 == 5) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w6, ((offset16 == 6) ? 0x80808080 : 0), v);
  append_helper_1x4_S (w7, ((offset16 == 7) ? 0x80808080 : 0), v);
}

// https://raw.githubusercontent.com/hashcat/hashcat/v5.1.0/OpenCL/inc_common.cl

DECLSPEC void switch_buffer_by_offset_be_S (u32 *w0, u32 *w1, u32 *w2, u32 *w3, const u32 offset)
{
  const int offset_switch = offset / 4;

  #if (defined IS_AMD && AMD_GCN < 3) || defined IS_GENERIC
  switch (offset_switch)
  {
    case  0:
      w3[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w3[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w2[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w1[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w0[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[0] = hc_bytealign_S (    0, w0[0], offset);

      break;

    case  1:
      w3[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[1] = hc_bytealign_S (    0, w0[0], offset);
      w0[0] = 0;

      break;

    case  2:
      w3[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[2] = hc_bytealign_S (    0, w0[0], offset);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      w3[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[3] = hc_bytealign_S (    0, w0[0], offset);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      w3[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[0] = hc_bytealign_S (    0, w0[0], offset);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      w3[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[1] = hc_bytealign_S (    0, w0[0], offset);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      w3[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[2] = hc_bytealign_S (    0, w0[0], offset);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      w3[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[3] = hc_bytealign_S (    0, w0[0], offset);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      w3[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[0] = hc_bytealign_S (    0, w0[0], offset);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      w3[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[1] = hc_bytealign_S (    0, w0[0], offset);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      w3[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[2] = hc_bytealign_S (    0, w0[0], offset);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      w3[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[3] = hc_bytealign_S (    0, w0[0], offset);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      w3[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[0] = hc_bytealign_S (    0, w0[0], offset);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      w3[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[1] = hc_bytealign_S (    0, w0[0], offset);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      w3[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[2] = hc_bytealign_S (    0, w0[0], offset);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      w3[3] = hc_bytealign_S (    0, w0[0], offset);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif

  #if (defined IS_AMD && AMD_GCN >= 3) || defined IS_NV

  #if defined IS_NV
  const int selector = (0x76543210 >> ((offset & 3) * 4)) & 0xffff;
  #endif

  #if defined IS_AMD
  const int selector = 0x0706050403020100 >> ((offset & 3) * 8);
  #endif

  switch (offset_switch)
  {
    case  0:
      w3[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w3[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w2[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w1[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w0[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[0] = hc_byte_perm_S (w0[0],     0, selector);

      break;

    case  1:
      w3[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[1] = hc_byte_perm_S (w0[0],     0, selector);
      w0[0] = 0;

      break;

    case  2:
      w3[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[2] = hc_byte_perm_S (w0[0],     0, selector);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      w3[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[3] = hc_byte_perm_S (w0[0],     0, selector);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      w3[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[0] = hc_byte_perm_S (w0[0],     0, selector);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      w3[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[1] = hc_byte_perm_S (w0[0],     0, selector);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      w3[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[2] = hc_byte_perm_S (w0[0],     0, selector);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      w3[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[3] = hc_byte_perm_S (w0[0],     0, selector);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      w3[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[0] = hc_byte_perm_S (w0[0],     0, selector);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      w3[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[1] = hc_byte_perm_S (w0[0],     0, selector);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      w3[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[2] = hc_byte_perm_S (w0[0],     0, selector);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      w3[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[3] = hc_byte_perm_S (w0[0],     0, selector);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      w3[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[0] = hc_byte_perm_S (w0[0],     0, selector);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      w3[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[1] = hc_byte_perm_S (w0[0],     0, selector);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      w3[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[2] = hc_byte_perm_S (w0[0],     0, selector);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      w3[3] = hc_byte_perm_S (w0[0],     0, selector);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif
}

DECLSPEC void switch_buffer_by_offset_carry_be_S (u32 *w0, u32 *w1, u32 *w2, u32 *w3, u32 *c0, u32 *c1, u32 *c2, u32 *c3, const u32 offset)
{
  const int offset_switch = offset / 4;

  #if (defined IS_AMD && AMD_GCN < 3) || defined IS_GENERIC
  switch (offset_switch)
  {
    case  0:
      c0[0] = hc_bytealign_S (w3[3],     0, offset);
      w3[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w3[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w2[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w1[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w0[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[0] = hc_bytealign_S (    0, w0[0], offset);

      break;

    case  1:
      c0[1] = hc_bytealign_S (w3[3],     0, offset);
      c0[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w3[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[1] = hc_bytealign_S (    0, w0[0], offset);
      w0[0] = 0;

      break;

    case  2:
      c0[2] = hc_bytealign_S (w3[3],     0, offset);
      c0[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[2] = hc_bytealign_S (    0, w0[0], offset);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      c0[3] = hc_bytealign_S (w3[3],     0, offset);
      c0[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[3] = hc_bytealign_S (    0, w0[0], offset);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      c1[0] = hc_bytealign_S (w3[3],     0, offset);
      c0[3] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[2] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[1] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[0] = hc_bytealign_S (    0, w0[0], offset);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      c1[1] = hc_bytealign_S (w3[3],     0, offset);
      c1[0] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[3] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[2] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[1] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[1] = hc_bytealign_S (    0, w0[0], offset);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      c1[2] = hc_bytealign_S (w3[3],     0, offset);
      c1[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[0] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[3] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[2] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[1] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[2] = hc_bytealign_S (    0, w0[0], offset);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      c1[3] = hc_bytealign_S (w3[3],     0, offset);
      c1[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[0] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[3] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[2] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[1] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[3] = hc_bytealign_S (    0, w0[0], offset);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      c2[0] = hc_bytealign_S (w3[3],     0, offset);
      c1[3] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[2] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[1] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[0] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[3] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[2] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[1] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[0] = hc_bytealign_S (    0, w0[0], offset);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      c2[1] = hc_bytealign_S (w3[3],     0, offset);
      c2[0] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[3] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[2] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[1] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[0] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[3] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[2] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[1] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[1] = hc_bytealign_S (    0, w0[0], offset);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      c2[2] = hc_bytealign_S (w3[3],     0, offset);
      c2[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[0] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[3] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[2] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[1] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[0] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[3] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[2] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[1] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[2] = hc_bytealign_S (    0, w0[0], offset);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      c2[3] = hc_bytealign_S (w3[3],     0, offset);
      c2[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[0] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[3] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[2] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[1] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[0] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[3] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[2] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[1] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[3] = hc_bytealign_S (    0, w0[0], offset);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      c3[0] = hc_bytealign_S (w3[3],     0, offset);
      c2[3] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[2] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[1] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[0] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[3] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[2] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[1] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[0] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[3] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[2] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[1] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[0] = hc_bytealign_S (    0, w0[0], offset);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      c3[1] = hc_bytealign_S (w3[3],     0, offset);
      c3[0] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[3] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[2] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[1] = hc_bytealign_S (w2[3], w3[0], offset);
      c2[0] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[3] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[2] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[1] = hc_bytealign_S (w1[3], w2[0], offset);
      c1[0] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[3] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[2] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[1] = hc_bytealign_S (w0[3], w1[0], offset);
      c0[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[1] = hc_bytealign_S (    0, w0[0], offset);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      c3[2] = hc_bytealign_S (w3[3],     0, offset);
      c3[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c3[0] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[3] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[2] = hc_bytealign_S (w2[3], w3[0], offset);
      c2[1] = hc_bytealign_S (w2[2], w2[3], offset);
      c2[0] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[3] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[2] = hc_bytealign_S (w1[3], w2[0], offset);
      c1[1] = hc_bytealign_S (w1[2], w1[3], offset);
      c1[0] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[3] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[2] = hc_bytealign_S (w0[3], w1[0], offset);
      c0[1] = hc_bytealign_S (w0[2], w0[3], offset);
      c0[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[2] = hc_bytealign_S (    0, w0[0], offset);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      c3[3] = hc_bytealign_S (w3[3],     0, offset);
      c3[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c3[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c3[0] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[3] = hc_bytealign_S (w2[3], w3[0], offset);
      c2[2] = hc_bytealign_S (w2[2], w2[3], offset);
      c2[1] = hc_bytealign_S (w2[1], w2[2], offset);
      c2[0] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[3] = hc_bytealign_S (w1[3], w2[0], offset);
      c1[2] = hc_bytealign_S (w1[2], w1[3], offset);
      c1[1] = hc_bytealign_S (w1[1], w1[2], offset);
      c1[0] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[3] = hc_bytealign_S (w0[3], w1[0], offset);
      c0[2] = hc_bytealign_S (w0[2], w0[3], offset);
      c0[1] = hc_bytealign_S (w0[1], w0[2], offset);
      c0[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[3] = hc_bytealign_S (    0, w0[0], offset);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif

  #if (defined IS_AMD && AMD_GCN >= 3) || defined IS_NV

  #if defined IS_NV
  const int selector = (0x76543210 >> ((offset & 3) * 4)) & 0xffff;
  #endif

  #if defined IS_AMD
  const int selector = 0x0706050403020100 >> ((offset & 3) * 8);
  #endif

  switch (offset_switch)
  {
    case  0:
      c0[0] = hc_byte_perm_S (    0, w3[3], selector);
      w3[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w3[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w2[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w1[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w0[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[0] = hc_byte_perm_S (w0[0],     0, selector);

      break;

    case  1:
      c0[1] = hc_byte_perm_S (    0, w3[3], selector);
      c0[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w3[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[1] = hc_byte_perm_S (w0[0],     0, selector);
      w0[0] = 0;

      break;

    case  2:
      c0[2] = hc_byte_perm_S (    0, w3[3], selector);
      c0[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[2] = hc_byte_perm_S (w0[0],     0, selector);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      c0[3] = hc_byte_perm_S (    0, w3[3], selector);
      c0[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[3] = hc_byte_perm_S (w0[0],     0, selector);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      c1[0] = hc_byte_perm_S (    0, w3[3], selector);
      c0[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[0] = hc_byte_perm_S (w0[0],     0, selector);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      c1[1] = hc_byte_perm_S (    0, w3[3], selector);
      c1[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[1] = hc_byte_perm_S (w0[0],     0, selector);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      c1[2] = hc_byte_perm_S (    0, w3[3], selector);
      c1[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[2] = hc_byte_perm_S (w0[0],     0, selector);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      c1[3] = hc_byte_perm_S (    0, w3[3], selector);
      c1[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[3] = hc_byte_perm_S (w0[0],     0, selector);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      c2[0] = hc_byte_perm_S (    0, w3[3], selector);
      c1[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[0] = hc_byte_perm_S (w0[0],     0, selector);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      c2[1] = hc_byte_perm_S (    0, w3[3], selector);
      c2[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[1] = hc_byte_perm_S (w0[0],     0, selector);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      c2[2] = hc_byte_perm_S (    0, w3[3], selector);
      c2[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[2] = hc_byte_perm_S (w0[0],     0, selector);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      c2[3] = hc_byte_perm_S (    0, w3[3], selector);
      c2[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[3] = hc_byte_perm_S (w0[0],     0, selector);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      c3[0] = hc_byte_perm_S (    0, w3[3], selector);
      c2[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[0] = hc_byte_perm_S (w0[0],     0, selector);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      c3[1] = hc_byte_perm_S (    0, w3[3], selector);
      c3[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      c2[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      c1[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      c0[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[1] = hc_byte_perm_S (w0[0],     0, selector);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      c3[2] = hc_byte_perm_S (    0, w3[3], selector);
      c3[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c3[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      c2[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      c2[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      c1[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      c1[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      c0[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      c0[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[2] = hc_byte_perm_S (w0[0],     0, selector);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      c3[3] = hc_byte_perm_S (    0, w3[3], selector);
      c3[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c3[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c3[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      c2[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      c2[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      c2[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      c1[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      c1[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      c1[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      c0[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      c0[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      c0[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[3] = hc_byte_perm_S (w0[0],     0, selector);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif
}

DECLSPEC void switch_buffer_by_offset_8x4_be_S (u32 *w0, u32 *w1, u32 *w2, u32 *w3, u32 *w4, u32 *w5, u32 *w6, u32 *w7, const u32 offset)
{
  const int offset_switch = offset / 4;

  #if (defined IS_AMD && AMD_GCN < 3) || defined IS_GENERIC
  switch (offset_switch)
  {
    case  0:
      w7[3] = hc_bytealign_S (w7[2], w7[3], offset);
      w7[2] = hc_bytealign_S (w7[1], w7[2], offset);
      w7[1] = hc_bytealign_S (w7[0], w7[1], offset);
      w7[0] = hc_bytealign_S (w6[3], w7[0], offset);
      w6[3] = hc_bytealign_S (w6[2], w6[3], offset);
      w6[2] = hc_bytealign_S (w6[1], w6[2], offset);
      w6[1] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[0] = hc_bytealign_S (w5[3], w6[0], offset);
      w5[3] = hc_bytealign_S (w5[2], w5[3], offset);
      w5[2] = hc_bytealign_S (w5[1], w5[2], offset);
      w5[1] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[0] = hc_bytealign_S (w4[3], w5[0], offset);
      w4[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w4[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w4[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w3[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w3[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w2[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w1[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w0[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[0] = hc_bytealign_S (    0, w0[0], offset);

      break;

    case  1:
      w7[3] = hc_bytealign_S (w7[1], w7[2], offset);
      w7[2] = hc_bytealign_S (w7[0], w7[1], offset);
      w7[1] = hc_bytealign_S (w6[3], w7[0], offset);
      w7[0] = hc_bytealign_S (w6[2], w6[3], offset);
      w6[3] = hc_bytealign_S (w6[1], w6[2], offset);
      w6[2] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[1] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[0] = hc_bytealign_S (w5[2], w5[3], offset);
      w5[3] = hc_bytealign_S (w5[1], w5[2], offset);
      w5[2] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[1] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[0] = hc_bytealign_S (w4[2], w4[3], offset);
      w4[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w4[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w3[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[1] = hc_bytealign_S (    0, w0[0], offset);
      w0[0] = 0;

      break;

    case  2:
      w7[3] = hc_bytealign_S (w7[0], w7[1], offset);
      w7[2] = hc_bytealign_S (w6[3], w7[0], offset);
      w7[1] = hc_bytealign_S (w6[2], w6[3], offset);
      w7[0] = hc_bytealign_S (w6[1], w6[2], offset);
      w6[3] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[2] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[1] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[0] = hc_bytealign_S (w5[1], w5[2], offset);
      w5[3] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[2] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[1] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[0] = hc_bytealign_S (w4[1], w4[2], offset);
      w4[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[2] = hc_bytealign_S (    0, w0[0], offset);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      w7[3] = hc_bytealign_S (w6[3], w7[0], offset);
      w7[2] = hc_bytealign_S (w6[2], w6[3], offset);
      w7[1] = hc_bytealign_S (w6[1], w6[2], offset);
      w7[0] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[3] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[2] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[1] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[0] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[3] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[2] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[1] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[0] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[3] = hc_bytealign_S (    0, w0[0], offset);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      w7[3] = hc_bytealign_S (w6[2], w6[3], offset);
      w7[2] = hc_bytealign_S (w6[1], w6[2], offset);
      w7[1] = hc_bytealign_S (w6[0], w6[1], offset);
      w7[0] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[3] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[2] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[1] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[0] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[0] = hc_bytealign_S (    0, w0[0], offset);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      w7[3] = hc_bytealign_S (w6[1], w6[2], offset);
      w7[2] = hc_bytealign_S (w6[0], w6[1], offset);
      w7[1] = hc_bytealign_S (w5[3], w6[0], offset);
      w7[0] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[3] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[2] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[1] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[0] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[1] = hc_bytealign_S (    0, w0[0], offset);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      w7[3] = hc_bytealign_S (w6[0], w6[1], offset);
      w7[2] = hc_bytealign_S (w5[3], w6[0], offset);
      w7[1] = hc_bytealign_S (w5[2], w5[3], offset);
      w7[0] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[3] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[2] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[1] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[0] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[2] = hc_bytealign_S (    0, w0[0], offset);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      w7[3] = hc_bytealign_S (w5[3], w6[0], offset);
      w7[2] = hc_bytealign_S (w5[2], w5[3], offset);
      w7[1] = hc_bytealign_S (w5[1], w5[2], offset);
      w7[0] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[3] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[2] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[1] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[0] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[3] = hc_bytealign_S (    0, w0[0], offset);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      w7[3] = hc_bytealign_S (w5[2], w5[3], offset);
      w7[2] = hc_bytealign_S (w5[1], w5[2], offset);
      w7[1] = hc_bytealign_S (w5[0], w5[1], offset);
      w7[0] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[0] = hc_bytealign_S (    0, w0[0], offset);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      w7[3] = hc_bytealign_S (w5[1], w5[2], offset);
      w7[2] = hc_bytealign_S (w5[0], w5[1], offset);
      w7[1] = hc_bytealign_S (w4[3], w5[0], offset);
      w7[0] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[1] = hc_bytealign_S (    0, w0[0], offset);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      w7[3] = hc_bytealign_S (w5[0], w5[1], offset);
      w7[2] = hc_bytealign_S (w4[3], w5[0], offset);
      w7[1] = hc_bytealign_S (w4[2], w4[3], offset);
      w7[0] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[2] = hc_bytealign_S (    0, w0[0], offset);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      w7[3] = hc_bytealign_S (w4[3], w5[0], offset);
      w7[2] = hc_bytealign_S (w4[2], w4[3], offset);
      w7[1] = hc_bytealign_S (w4[1], w4[2], offset);
      w7[0] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[3] = hc_bytealign_S (    0, w0[0], offset);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      w7[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w7[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w7[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w7[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[0] = hc_bytealign_S (    0, w0[0], offset);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      w7[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w7[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w7[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w7[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[1] = hc_bytealign_S (    0, w0[0], offset);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      w7[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w7[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w7[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w7[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[2] = hc_bytealign_S (    0, w0[0], offset);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      w7[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w7[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w7[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w7[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[3] = hc_bytealign_S (    0, w0[0], offset);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 16:
      w7[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w7[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w7[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w7[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[0] = hc_bytealign_S (    0, w0[0], offset);
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 17:
      w7[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w7[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w7[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w7[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[1] = hc_bytealign_S (    0, w0[0], offset);
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 18:
      w7[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w7[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w7[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w7[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[2] = hc_bytealign_S (    0, w0[0], offset);
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 19:
      w7[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w7[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w7[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w7[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[3] = hc_bytealign_S (    0, w0[0], offset);
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 20:
      w7[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w7[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w7[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w7[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[0] = hc_bytealign_S (    0, w0[0], offset);
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 21:
      w7[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w7[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w7[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w7[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[1] = hc_bytealign_S (    0, w0[0], offset);
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 22:
      w7[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w7[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w7[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w7[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[2] = hc_bytealign_S (    0, w0[0], offset);
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 23:
      w7[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w7[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w7[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w7[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[3] = hc_bytealign_S (    0, w0[0], offset);
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 24:
      w7[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w7[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w7[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w7[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[0] = hc_bytealign_S (    0, w0[0], offset);
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 25:
      w7[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w7[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w7[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w7[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[1] = hc_bytealign_S (    0, w0[0], offset);
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 26:
      w7[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w7[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w7[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w7[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[2] = hc_bytealign_S (    0, w0[0], offset);
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 27:
      w7[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w7[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w7[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w7[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[3] = hc_bytealign_S (    0, w0[0], offset);
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 28:
      w7[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w7[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w7[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w7[0] = hc_bytealign_S (    0, w0[0], offset);
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 29:
      w7[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w7[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w7[1] = hc_bytealign_S (    0, w0[0], offset);
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 30:
      w7[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w7[2] = hc_bytealign_S (    0, w0[0], offset);
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 31:
      w7[3] = hc_bytealign_S (    0, w0[0], offset);
      w7[2] = 0;
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif

  #if (defined IS_AMD && AMD_GCN >= 3) || defined IS_NV

  #if defined IS_NV
  const int selector = (0x76543210 >> ((offset & 3) * 4)) & 0xffff;
  #endif

  #if defined IS_AMD
  const int selector = 0x0706050403020100 >> ((offset & 3) * 8);
  #endif

  switch (offset_switch)
  {
    case  0:
      w7[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      w7[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      w7[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      w7[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      w6[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      w6[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      w6[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      w5[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      w5[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      w5[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      w4[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w4[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w4[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w3[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w3[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w2[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w1[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w0[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[0] = hc_byte_perm_S (w0[0],     0, selector);

      break;

    case  1:
      w7[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      w7[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      w7[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      w7[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      w6[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      w6[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      w5[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      w5[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      w4[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w4[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w3[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[1] = hc_byte_perm_S (w0[0],     0, selector);
      w0[0] = 0;

      break;

    case  2:
      w7[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      w7[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      w7[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      w7[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      w6[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      w5[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      w4[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[2] = hc_byte_perm_S (w0[0],     0, selector);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      w7[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      w7[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      w7[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      w7[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[3] = hc_byte_perm_S (w0[0],     0, selector);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      w7[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      w7[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      w7[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      w7[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[0] = hc_byte_perm_S (w0[0],     0, selector);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      w7[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      w7[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      w7[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      w7[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[1] = hc_byte_perm_S (w0[0],     0, selector);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      w7[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      w7[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      w7[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      w7[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[2] = hc_byte_perm_S (w0[0],     0, selector);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      w7[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      w7[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      w7[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      w7[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[3] = hc_byte_perm_S (w0[0],     0, selector);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      w7[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      w7[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      w7[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      w7[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[0] = hc_byte_perm_S (w0[0],     0, selector);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      w7[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      w7[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      w7[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      w7[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[1] = hc_byte_perm_S (w0[0],     0, selector);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      w7[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      w7[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      w7[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      w7[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[2] = hc_byte_perm_S (w0[0],     0, selector);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      w7[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      w7[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      w7[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      w7[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[3] = hc_byte_perm_S (w0[0],     0, selector);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      w7[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w7[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w7[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w7[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[0] = hc_byte_perm_S (w0[0],     0, selector);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      w7[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w7[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w7[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w7[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[1] = hc_byte_perm_S (w0[0],     0, selector);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      w7[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w7[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w7[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w7[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[2] = hc_byte_perm_S (w0[0],     0, selector);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      w7[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w7[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w7[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w7[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[3] = hc_byte_perm_S (w0[0],     0, selector);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 16:
      w7[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w7[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w7[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w7[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[0] = hc_byte_perm_S (w0[0],     0, selector);
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 17:
      w7[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w7[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w7[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w7[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[1] = hc_byte_perm_S (w0[0],     0, selector);
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 18:
      w7[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w7[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w7[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w7[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[2] = hc_byte_perm_S (w0[0],     0, selector);
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 19:
      w7[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w7[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w7[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w7[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[3] = hc_byte_perm_S (w0[0],     0, selector);
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 20:
      w7[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w7[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w7[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w7[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[0] = hc_byte_perm_S (w0[0],     0, selector);
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 21:
      w7[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w7[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w7[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w7[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[1] = hc_byte_perm_S (w0[0],     0, selector);
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 22:
      w7[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w7[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w7[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w7[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[2] = hc_byte_perm_S (w0[0],     0, selector);
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 23:
      w7[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w7[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w7[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w7[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[3] = hc_byte_perm_S (w0[0],     0, selector);
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 24:
      w7[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w7[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w7[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w7[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[0] = hc_byte_perm_S (w0[0],     0, selector);
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 25:
      w7[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w7[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w7[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w7[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[1] = hc_byte_perm_S (w0[0],     0, selector);
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 26:
      w7[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w7[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w7[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w7[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[2] = hc_byte_perm_S (w0[0],     0, selector);
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 27:
      w7[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w7[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w7[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w7[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[3] = hc_byte_perm_S (w0[0],     0, selector);
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 28:
      w7[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w7[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w7[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w7[0] = hc_byte_perm_S (w0[0],     0, selector);
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 29:
      w7[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w7[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w7[1] = hc_byte_perm_S (w0[0],     0, selector);
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 30:
      w7[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w7[2] = hc_byte_perm_S (w0[0],     0, selector);
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 31:
      w7[3] = hc_byte_perm_S (w0[0],     0, selector);
      w7[2] = 0;
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif
}

DECLSPEC void switch_buffer_by_offset_8x4_carry_be_S (u32 *w0, u32 *w1, u32 *w2, u32 *w3, u32 *w4, u32 *w5, u32 *w6, u32 *w7, u32 *c0, u32 *c1, u32 *c2, u32 *c3, u32 *c4, u32 *c5, u32 *c6, u32 *c7, const u32 offset)
{
  const int offset_switch = offset / 4;

  #if (defined IS_AMD && AMD_GCN < 3) || defined IS_GENERIC
  switch (offset_switch)
  {
    case  0:
      c0[0] = hc_bytealign_S (w7[3],     0, offset);
      w7[3] = hc_bytealign_S (w7[2], w7[3], offset);
      w7[2] = hc_bytealign_S (w7[1], w7[2], offset);
      w7[1] = hc_bytealign_S (w7[0], w7[1], offset);
      w7[0] = hc_bytealign_S (w6[3], w7[0], offset);
      w6[3] = hc_bytealign_S (w6[2], w6[3], offset);
      w6[2] = hc_bytealign_S (w6[1], w6[2], offset);
      w6[1] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[0] = hc_bytealign_S (w5[3], w6[0], offset);
      w5[3] = hc_bytealign_S (w5[2], w5[3], offset);
      w5[2] = hc_bytealign_S (w5[1], w5[2], offset);
      w5[1] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[0] = hc_bytealign_S (w4[3], w5[0], offset);
      w4[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w4[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w4[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w3[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w3[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w2[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w1[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w0[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[0] = hc_bytealign_S (    0, w0[0], offset);

      break;

    case  1:
      c0[1] = hc_bytealign_S (w7[3],     0, offset);
      c0[0] = hc_bytealign_S (w7[2], w7[3], offset);
      w7[3] = hc_bytealign_S (w7[1], w7[2], offset);
      w7[2] = hc_bytealign_S (w7[0], w7[1], offset);
      w7[1] = hc_bytealign_S (w6[3], w7[0], offset);
      w7[0] = hc_bytealign_S (w6[2], w6[3], offset);
      w6[3] = hc_bytealign_S (w6[1], w6[2], offset);
      w6[2] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[1] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[0] = hc_bytealign_S (w5[2], w5[3], offset);
      w5[3] = hc_bytealign_S (w5[1], w5[2], offset);
      w5[2] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[1] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[0] = hc_bytealign_S (w4[2], w4[3], offset);
      w4[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w4[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w3[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w2[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w1[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w0[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[1] = hc_bytealign_S (    0, w0[0], offset);
      w0[0] = 0;

      break;

    case  2:
      c0[2] = hc_bytealign_S (w7[3],     0, offset);
      c0[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c0[0] = hc_bytealign_S (w7[1], w7[2], offset);
      w7[3] = hc_bytealign_S (w7[0], w7[1], offset);
      w7[2] = hc_bytealign_S (w6[3], w7[0], offset);
      w7[1] = hc_bytealign_S (w6[2], w6[3], offset);
      w7[0] = hc_bytealign_S (w6[1], w6[2], offset);
      w6[3] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[2] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[1] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[0] = hc_bytealign_S (w5[1], w5[2], offset);
      w5[3] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[2] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[1] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[0] = hc_bytealign_S (w4[1], w4[2], offset);
      w4[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w3[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w2[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w1[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w0[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[2] = hc_bytealign_S (    0, w0[0], offset);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      c0[3] = hc_bytealign_S (w7[3],     0, offset);
      c0[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c0[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c0[0] = hc_bytealign_S (w7[0], w7[1], offset);
      w7[3] = hc_bytealign_S (w6[3], w7[0], offset);
      w7[2] = hc_bytealign_S (w6[2], w6[3], offset);
      w7[1] = hc_bytealign_S (w6[1], w6[2], offset);
      w7[0] = hc_bytealign_S (w6[0], w6[1], offset);
      w6[3] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[2] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[1] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[0] = hc_bytealign_S (w5[0], w5[1], offset);
      w5[3] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[2] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[1] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[0] = hc_bytealign_S (w4[0], w4[1], offset);
      w4[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w3[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w2[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w1[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w0[3] = hc_bytealign_S (    0, w0[0], offset);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      c1[0] = hc_bytealign_S (w7[3],     0, offset);
      c0[3] = hc_bytealign_S (w7[2], w7[3], offset);
      c0[2] = hc_bytealign_S (w7[1], w7[2], offset);
      c0[1] = hc_bytealign_S (w7[0], w7[1], offset);
      c0[0] = hc_bytealign_S (w6[3], w7[0], offset);
      w7[3] = hc_bytealign_S (w6[2], w6[3], offset);
      w7[2] = hc_bytealign_S (w6[1], w6[2], offset);
      w7[1] = hc_bytealign_S (w6[0], w6[1], offset);
      w7[0] = hc_bytealign_S (w5[3], w6[0], offset);
      w6[3] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[2] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[1] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[0] = hc_bytealign_S (w4[3], w5[0], offset);
      w5[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w4[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w3[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w2[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w1[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[0] = hc_bytealign_S (    0, w0[0], offset);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      c1[1] = hc_bytealign_S (w7[3],     0, offset);
      c1[0] = hc_bytealign_S (w7[2], w7[3], offset);
      c0[3] = hc_bytealign_S (w7[1], w7[2], offset);
      c0[2] = hc_bytealign_S (w7[0], w7[1], offset);
      c0[1] = hc_bytealign_S (w6[3], w7[0], offset);
      c0[0] = hc_bytealign_S (w6[2], w6[3], offset);
      w7[3] = hc_bytealign_S (w6[1], w6[2], offset);
      w7[2] = hc_bytealign_S (w6[0], w6[1], offset);
      w7[1] = hc_bytealign_S (w5[3], w6[0], offset);
      w7[0] = hc_bytealign_S (w5[2], w5[3], offset);
      w6[3] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[2] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[1] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[0] = hc_bytealign_S (w4[2], w4[3], offset);
      w5[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w4[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w3[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w2[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w1[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[1] = hc_bytealign_S (    0, w0[0], offset);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      c1[2] = hc_bytealign_S (w7[3],     0, offset);
      c1[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c1[0] = hc_bytealign_S (w7[1], w7[2], offset);
      c0[3] = hc_bytealign_S (w7[0], w7[1], offset);
      c0[2] = hc_bytealign_S (w6[3], w7[0], offset);
      c0[1] = hc_bytealign_S (w6[2], w6[3], offset);
      c0[0] = hc_bytealign_S (w6[1], w6[2], offset);
      w7[3] = hc_bytealign_S (w6[0], w6[1], offset);
      w7[2] = hc_bytealign_S (w5[3], w6[0], offset);
      w7[1] = hc_bytealign_S (w5[2], w5[3], offset);
      w7[0] = hc_bytealign_S (w5[1], w5[2], offset);
      w6[3] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[2] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[1] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[0] = hc_bytealign_S (w4[1], w4[2], offset);
      w5[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w4[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w3[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w2[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w1[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[2] = hc_bytealign_S (    0, w0[0], offset);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      c1[3] = hc_bytealign_S (w7[3],     0, offset);
      c1[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c1[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c1[0] = hc_bytealign_S (w7[0], w7[1], offset);
      c0[3] = hc_bytealign_S (w6[3], w7[0], offset);
      c0[2] = hc_bytealign_S (w6[2], w6[3], offset);
      c0[1] = hc_bytealign_S (w6[1], w6[2], offset);
      c0[0] = hc_bytealign_S (w6[0], w6[1], offset);
      w7[3] = hc_bytealign_S (w5[3], w6[0], offset);
      w7[2] = hc_bytealign_S (w5[2], w5[3], offset);
      w7[1] = hc_bytealign_S (w5[1], w5[2], offset);
      w7[0] = hc_bytealign_S (w5[0], w5[1], offset);
      w6[3] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[2] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[1] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[0] = hc_bytealign_S (w4[0], w4[1], offset);
      w5[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w4[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w3[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w2[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w1[3] = hc_bytealign_S (    0, w0[0], offset);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      c2[0] = hc_bytealign_S (w7[3],     0, offset);
      c1[3] = hc_bytealign_S (w7[2], w7[3], offset);
      c1[2] = hc_bytealign_S (w7[1], w7[2], offset);
      c1[1] = hc_bytealign_S (w7[0], w7[1], offset);
      c1[0] = hc_bytealign_S (w6[3], w7[0], offset);
      c0[3] = hc_bytealign_S (w6[2], w6[3], offset);
      c0[2] = hc_bytealign_S (w6[1], w6[2], offset);
      c0[1] = hc_bytealign_S (w6[0], w6[1], offset);
      c0[0] = hc_bytealign_S (w5[3], w6[0], offset);
      w7[3] = hc_bytealign_S (w5[2], w5[3], offset);
      w7[2] = hc_bytealign_S (w5[1], w5[2], offset);
      w7[1] = hc_bytealign_S (w5[0], w5[1], offset);
      w7[0] = hc_bytealign_S (w4[3], w5[0], offset);
      w6[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w5[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w4[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w3[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w2[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[0] = hc_bytealign_S (    0, w0[0], offset);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      c2[1] = hc_bytealign_S (w7[3],     0, offset);
      c2[0] = hc_bytealign_S (w7[2], w7[3], offset);
      c1[3] = hc_bytealign_S (w7[1], w7[2], offset);
      c1[2] = hc_bytealign_S (w7[0], w7[1], offset);
      c1[1] = hc_bytealign_S (w6[3], w7[0], offset);
      c1[0] = hc_bytealign_S (w6[2], w6[3], offset);
      c0[3] = hc_bytealign_S (w6[1], w6[2], offset);
      c0[2] = hc_bytealign_S (w6[0], w6[1], offset);
      c0[1] = hc_bytealign_S (w5[3], w6[0], offset);
      c0[0] = hc_bytealign_S (w5[2], w5[3], offset);
      w7[3] = hc_bytealign_S (w5[1], w5[2], offset);
      w7[2] = hc_bytealign_S (w5[0], w5[1], offset);
      w7[1] = hc_bytealign_S (w4[3], w5[0], offset);
      w7[0] = hc_bytealign_S (w4[2], w4[3], offset);
      w6[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w5[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w4[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w3[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w2[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[1] = hc_bytealign_S (    0, w0[0], offset);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      c2[2] = hc_bytealign_S (w7[3],     0, offset);
      c2[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c2[0] = hc_bytealign_S (w7[1], w7[2], offset);
      c1[3] = hc_bytealign_S (w7[0], w7[1], offset);
      c1[2] = hc_bytealign_S (w6[3], w7[0], offset);
      c1[1] = hc_bytealign_S (w6[2], w6[3], offset);
      c1[0] = hc_bytealign_S (w6[1], w6[2], offset);
      c0[3] = hc_bytealign_S (w6[0], w6[1], offset);
      c0[2] = hc_bytealign_S (w5[3], w6[0], offset);
      c0[1] = hc_bytealign_S (w5[2], w5[3], offset);
      c0[0] = hc_bytealign_S (w5[1], w5[2], offset);
      w7[3] = hc_bytealign_S (w5[0], w5[1], offset);
      w7[2] = hc_bytealign_S (w4[3], w5[0], offset);
      w7[1] = hc_bytealign_S (w4[2], w4[3], offset);
      w7[0] = hc_bytealign_S (w4[1], w4[2], offset);
      w6[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w5[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w4[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w3[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w2[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[2] = hc_bytealign_S (    0, w0[0], offset);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      c2[3] = hc_bytealign_S (w7[3],     0, offset);
      c2[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c2[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c2[0] = hc_bytealign_S (w7[0], w7[1], offset);
      c1[3] = hc_bytealign_S (w6[3], w7[0], offset);
      c1[2] = hc_bytealign_S (w6[2], w6[3], offset);
      c1[1] = hc_bytealign_S (w6[1], w6[2], offset);
      c1[0] = hc_bytealign_S (w6[0], w6[1], offset);
      c0[3] = hc_bytealign_S (w5[3], w6[0], offset);
      c0[2] = hc_bytealign_S (w5[2], w5[3], offset);
      c0[1] = hc_bytealign_S (w5[1], w5[2], offset);
      c0[0] = hc_bytealign_S (w5[0], w5[1], offset);
      w7[3] = hc_bytealign_S (w4[3], w5[0], offset);
      w7[2] = hc_bytealign_S (w4[2], w4[3], offset);
      w7[1] = hc_bytealign_S (w4[1], w4[2], offset);
      w7[0] = hc_bytealign_S (w4[0], w4[1], offset);
      w6[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w5[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w4[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w3[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w2[3] = hc_bytealign_S (    0, w0[0], offset);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      c3[0] = hc_bytealign_S (w7[3],     0, offset);
      c2[3] = hc_bytealign_S (w7[2], w7[3], offset);
      c2[2] = hc_bytealign_S (w7[1], w7[2], offset);
      c2[1] = hc_bytealign_S (w7[0], w7[1], offset);
      c2[0] = hc_bytealign_S (w6[3], w7[0], offset);
      c1[3] = hc_bytealign_S (w6[2], w6[3], offset);
      c1[2] = hc_bytealign_S (w6[1], w6[2], offset);
      c1[1] = hc_bytealign_S (w6[0], w6[1], offset);
      c1[0] = hc_bytealign_S (w5[3], w6[0], offset);
      c0[3] = hc_bytealign_S (w5[2], w5[3], offset);
      c0[2] = hc_bytealign_S (w5[1], w5[2], offset);
      c0[1] = hc_bytealign_S (w5[0], w5[1], offset);
      c0[0] = hc_bytealign_S (w4[3], w5[0], offset);
      w7[3] = hc_bytealign_S (w4[2], w4[3], offset);
      w7[2] = hc_bytealign_S (w4[1], w4[2], offset);
      w7[1] = hc_bytealign_S (w4[0], w4[1], offset);
      w7[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w6[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w5[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w4[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w3[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[0] = hc_bytealign_S (    0, w0[0], offset);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      c3[1] = hc_bytealign_S (w7[3],     0, offset);
      c3[0] = hc_bytealign_S (w7[2], w7[3], offset);
      c2[3] = hc_bytealign_S (w7[1], w7[2], offset);
      c2[2] = hc_bytealign_S (w7[0], w7[1], offset);
      c2[1] = hc_bytealign_S (w6[3], w7[0], offset);
      c2[0] = hc_bytealign_S (w6[2], w6[3], offset);
      c1[3] = hc_bytealign_S (w6[1], w6[2], offset);
      c1[2] = hc_bytealign_S (w6[0], w6[1], offset);
      c1[1] = hc_bytealign_S (w5[3], w6[0], offset);
      c1[0] = hc_bytealign_S (w5[2], w5[3], offset);
      c0[3] = hc_bytealign_S (w5[1], w5[2], offset);
      c0[2] = hc_bytealign_S (w5[0], w5[1], offset);
      c0[1] = hc_bytealign_S (w4[3], w5[0], offset);
      c0[0] = hc_bytealign_S (w4[2], w4[3], offset);
      w7[3] = hc_bytealign_S (w4[1], w4[2], offset);
      w7[2] = hc_bytealign_S (w4[0], w4[1], offset);
      w7[1] = hc_bytealign_S (w3[3], w4[0], offset);
      w7[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w6[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w5[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w4[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w3[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[1] = hc_bytealign_S (    0, w0[0], offset);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      c3[2] = hc_bytealign_S (w7[3],     0, offset);
      c3[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c3[0] = hc_bytealign_S (w7[1], w7[2], offset);
      c2[3] = hc_bytealign_S (w7[0], w7[1], offset);
      c2[2] = hc_bytealign_S (w6[3], w7[0], offset);
      c2[1] = hc_bytealign_S (w6[2], w6[3], offset);
      c2[0] = hc_bytealign_S (w6[1], w6[2], offset);
      c1[3] = hc_bytealign_S (w6[0], w6[1], offset);
      c1[2] = hc_bytealign_S (w5[3], w6[0], offset);
      c1[1] = hc_bytealign_S (w5[2], w5[3], offset);
      c1[0] = hc_bytealign_S (w5[1], w5[2], offset);
      c0[3] = hc_bytealign_S (w5[0], w5[1], offset);
      c0[2] = hc_bytealign_S (w4[3], w5[0], offset);
      c0[1] = hc_bytealign_S (w4[2], w4[3], offset);
      c0[0] = hc_bytealign_S (w4[1], w4[2], offset);
      w7[3] = hc_bytealign_S (w4[0], w4[1], offset);
      w7[2] = hc_bytealign_S (w3[3], w4[0], offset);
      w7[1] = hc_bytealign_S (w3[2], w3[3], offset);
      w7[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w6[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w5[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w4[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w3[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[2] = hc_bytealign_S (    0, w0[0], offset);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      c3[3] = hc_bytealign_S (w7[3],     0, offset);
      c3[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c3[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c3[0] = hc_bytealign_S (w7[0], w7[1], offset);
      c2[3] = hc_bytealign_S (w6[3], w7[0], offset);
      c2[2] = hc_bytealign_S (w6[2], w6[3], offset);
      c2[1] = hc_bytealign_S (w6[1], w6[2], offset);
      c2[0] = hc_bytealign_S (w6[0], w6[1], offset);
      c1[3] = hc_bytealign_S (w5[3], w6[0], offset);
      c1[2] = hc_bytealign_S (w5[2], w5[3], offset);
      c1[1] = hc_bytealign_S (w5[1], w5[2], offset);
      c1[0] = hc_bytealign_S (w5[0], w5[1], offset);
      c0[3] = hc_bytealign_S (w4[3], w5[0], offset);
      c0[2] = hc_bytealign_S (w4[2], w4[3], offset);
      c0[1] = hc_bytealign_S (w4[1], w4[2], offset);
      c0[0] = hc_bytealign_S (w4[0], w4[1], offset);
      w7[3] = hc_bytealign_S (w3[3], w4[0], offset);
      w7[2] = hc_bytealign_S (w3[2], w3[3], offset);
      w7[1] = hc_bytealign_S (w3[1], w3[2], offset);
      w7[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w6[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w5[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w4[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w3[3] = hc_bytealign_S (    0, w0[0], offset);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 16:
      c4[0] = hc_bytealign_S (w7[3],     0, offset);
      c3[3] = hc_bytealign_S (w7[2], w7[3], offset);
      c3[2] = hc_bytealign_S (w7[1], w7[2], offset);
      c3[1] = hc_bytealign_S (w7[0], w7[1], offset);
      c3[0] = hc_bytealign_S (w6[3], w7[0], offset);
      c2[3] = hc_bytealign_S (w6[2], w6[3], offset);
      c2[2] = hc_bytealign_S (w6[1], w6[2], offset);
      c2[1] = hc_bytealign_S (w6[0], w6[1], offset);
      c2[0] = hc_bytealign_S (w5[3], w6[0], offset);
      c1[3] = hc_bytealign_S (w5[2], w5[3], offset);
      c1[2] = hc_bytealign_S (w5[1], w5[2], offset);
      c1[1] = hc_bytealign_S (w5[0], w5[1], offset);
      c1[0] = hc_bytealign_S (w4[3], w5[0], offset);
      c0[3] = hc_bytealign_S (w4[2], w4[3], offset);
      c0[2] = hc_bytealign_S (w4[1], w4[2], offset);
      c0[1] = hc_bytealign_S (w4[0], w4[1], offset);
      c0[0] = hc_bytealign_S (w3[3], w4[0], offset);
      w7[3] = hc_bytealign_S (w3[2], w3[3], offset);
      w7[2] = hc_bytealign_S (w3[1], w3[2], offset);
      w7[1] = hc_bytealign_S (w3[0], w3[1], offset);
      w7[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w6[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w5[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w4[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[0] = hc_bytealign_S (    0, w0[0], offset);
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 17:
      c4[1] = hc_bytealign_S (w7[3],     0, offset);
      c4[0] = hc_bytealign_S (w7[2], w7[3], offset);
      c3[3] = hc_bytealign_S (w7[1], w7[2], offset);
      c3[2] = hc_bytealign_S (w7[0], w7[1], offset);
      c3[1] = hc_bytealign_S (w6[3], w7[0], offset);
      c3[0] = hc_bytealign_S (w6[2], w6[3], offset);
      c2[3] = hc_bytealign_S (w6[1], w6[2], offset);
      c2[2] = hc_bytealign_S (w6[0], w6[1], offset);
      c2[1] = hc_bytealign_S (w5[3], w6[0], offset);
      c2[0] = hc_bytealign_S (w5[2], w5[3], offset);
      c1[3] = hc_bytealign_S (w5[1], w5[2], offset);
      c1[2] = hc_bytealign_S (w5[0], w5[1], offset);
      c1[1] = hc_bytealign_S (w4[3], w5[0], offset);
      c1[0] = hc_bytealign_S (w4[2], w4[3], offset);
      c0[3] = hc_bytealign_S (w4[1], w4[2], offset);
      c0[2] = hc_bytealign_S (w4[0], w4[1], offset);
      c0[1] = hc_bytealign_S (w3[3], w4[0], offset);
      c0[0] = hc_bytealign_S (w3[2], w3[3], offset);
      w7[3] = hc_bytealign_S (w3[1], w3[2], offset);
      w7[2] = hc_bytealign_S (w3[0], w3[1], offset);
      w7[1] = hc_bytealign_S (w2[3], w3[0], offset);
      w7[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w6[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w5[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w4[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[1] = hc_bytealign_S (    0, w0[0], offset);
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 18:
      c4[2] = hc_bytealign_S (w7[3],     0, offset);
      c4[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c4[0] = hc_bytealign_S (w7[1], w7[2], offset);
      c3[3] = hc_bytealign_S (w7[0], w7[1], offset);
      c3[2] = hc_bytealign_S (w6[3], w7[0], offset);
      c3[1] = hc_bytealign_S (w6[2], w6[3], offset);
      c3[0] = hc_bytealign_S (w6[1], w6[2], offset);
      c2[3] = hc_bytealign_S (w6[0], w6[1], offset);
      c2[2] = hc_bytealign_S (w5[3], w6[0], offset);
      c2[1] = hc_bytealign_S (w5[2], w5[3], offset);
      c2[0] = hc_bytealign_S (w5[1], w5[2], offset);
      c1[3] = hc_bytealign_S (w5[0], w5[1], offset);
      c1[2] = hc_bytealign_S (w4[3], w5[0], offset);
      c1[1] = hc_bytealign_S (w4[2], w4[3], offset);
      c1[0] = hc_bytealign_S (w4[1], w4[2], offset);
      c0[3] = hc_bytealign_S (w4[0], w4[1], offset);
      c0[2] = hc_bytealign_S (w3[3], w4[0], offset);
      c0[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[0] = hc_bytealign_S (w3[1], w3[2], offset);
      w7[3] = hc_bytealign_S (w3[0], w3[1], offset);
      w7[2] = hc_bytealign_S (w2[3], w3[0], offset);
      w7[1] = hc_bytealign_S (w2[2], w2[3], offset);
      w7[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w6[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w5[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w4[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[2] = hc_bytealign_S (    0, w0[0], offset);
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 19:
      c4[3] = hc_bytealign_S (w7[3],     0, offset);
      c4[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c4[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c4[0] = hc_bytealign_S (w7[0], w7[1], offset);
      c3[3] = hc_bytealign_S (w6[3], w7[0], offset);
      c3[2] = hc_bytealign_S (w6[2], w6[3], offset);
      c3[1] = hc_bytealign_S (w6[1], w6[2], offset);
      c3[0] = hc_bytealign_S (w6[0], w6[1], offset);
      c2[3] = hc_bytealign_S (w5[3], w6[0], offset);
      c2[2] = hc_bytealign_S (w5[2], w5[3], offset);
      c2[1] = hc_bytealign_S (w5[1], w5[2], offset);
      c2[0] = hc_bytealign_S (w5[0], w5[1], offset);
      c1[3] = hc_bytealign_S (w4[3], w5[0], offset);
      c1[2] = hc_bytealign_S (w4[2], w4[3], offset);
      c1[1] = hc_bytealign_S (w4[1], w4[2], offset);
      c1[0] = hc_bytealign_S (w4[0], w4[1], offset);
      c0[3] = hc_bytealign_S (w3[3], w4[0], offset);
      c0[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[0] = hc_bytealign_S (w3[0], w3[1], offset);
      w7[3] = hc_bytealign_S (w2[3], w3[0], offset);
      w7[2] = hc_bytealign_S (w2[2], w2[3], offset);
      w7[1] = hc_bytealign_S (w2[1], w2[2], offset);
      w7[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w6[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w5[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w4[3] = hc_bytealign_S (    0, w0[0], offset);
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 20:
      c5[0] = hc_bytealign_S (w7[3],     0, offset);
      c4[3] = hc_bytealign_S (w7[2], w7[3], offset);
      c4[2] = hc_bytealign_S (w7[1], w7[2], offset);
      c4[1] = hc_bytealign_S (w7[0], w7[1], offset);
      c4[0] = hc_bytealign_S (w6[3], w7[0], offset);
      c3[3] = hc_bytealign_S (w6[2], w6[3], offset);
      c3[2] = hc_bytealign_S (w6[1], w6[2], offset);
      c3[1] = hc_bytealign_S (w6[0], w6[1], offset);
      c3[0] = hc_bytealign_S (w5[3], w6[0], offset);
      c2[3] = hc_bytealign_S (w5[2], w5[3], offset);
      c2[2] = hc_bytealign_S (w5[1], w5[2], offset);
      c2[1] = hc_bytealign_S (w5[0], w5[1], offset);
      c2[0] = hc_bytealign_S (w4[3], w5[0], offset);
      c1[3] = hc_bytealign_S (w4[2], w4[3], offset);
      c1[2] = hc_bytealign_S (w4[1], w4[2], offset);
      c1[1] = hc_bytealign_S (w4[0], w4[1], offset);
      c1[0] = hc_bytealign_S (w3[3], w4[0], offset);
      c0[3] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[2] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[1] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[0] = hc_bytealign_S (w2[3], w3[0], offset);
      w7[3] = hc_bytealign_S (w2[2], w2[3], offset);
      w7[2] = hc_bytealign_S (w2[1], w2[2], offset);
      w7[1] = hc_bytealign_S (w2[0], w2[1], offset);
      w7[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w6[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w5[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[0] = hc_bytealign_S (    0, w0[0], offset);
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 21:
      c5[1] = hc_bytealign_S (w7[3],     0, offset);
      c5[0] = hc_bytealign_S (w7[2], w7[3], offset);
      c4[3] = hc_bytealign_S (w7[1], w7[2], offset);
      c4[2] = hc_bytealign_S (w7[0], w7[1], offset);
      c4[1] = hc_bytealign_S (w6[3], w7[0], offset);
      c4[0] = hc_bytealign_S (w6[2], w6[3], offset);
      c3[3] = hc_bytealign_S (w6[1], w6[2], offset);
      c3[2] = hc_bytealign_S (w6[0], w6[1], offset);
      c3[1] = hc_bytealign_S (w5[3], w6[0], offset);
      c3[0] = hc_bytealign_S (w5[2], w5[3], offset);
      c2[3] = hc_bytealign_S (w5[1], w5[2], offset);
      c2[2] = hc_bytealign_S (w5[0], w5[1], offset);
      c2[1] = hc_bytealign_S (w4[3], w5[0], offset);
      c2[0] = hc_bytealign_S (w4[2], w4[3], offset);
      c1[3] = hc_bytealign_S (w4[1], w4[2], offset);
      c1[2] = hc_bytealign_S (w4[0], w4[1], offset);
      c1[1] = hc_bytealign_S (w3[3], w4[0], offset);
      c1[0] = hc_bytealign_S (w3[2], w3[3], offset);
      c0[3] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[2] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[1] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[0] = hc_bytealign_S (w2[2], w2[3], offset);
      w7[3] = hc_bytealign_S (w2[1], w2[2], offset);
      w7[2] = hc_bytealign_S (w2[0], w2[1], offset);
      w7[1] = hc_bytealign_S (w1[3], w2[0], offset);
      w7[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w6[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w5[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[1] = hc_bytealign_S (    0, w0[0], offset);
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 22:
      c5[2] = hc_bytealign_S (w7[3],     0, offset);
      c5[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c5[0] = hc_bytealign_S (w7[1], w7[2], offset);
      c4[3] = hc_bytealign_S (w7[0], w7[1], offset);
      c4[2] = hc_bytealign_S (w6[3], w7[0], offset);
      c4[1] = hc_bytealign_S (w6[2], w6[3], offset);
      c4[0] = hc_bytealign_S (w6[1], w6[2], offset);
      c3[3] = hc_bytealign_S (w6[0], w6[1], offset);
      c3[2] = hc_bytealign_S (w5[3], w6[0], offset);
      c3[1] = hc_bytealign_S (w5[2], w5[3], offset);
      c3[0] = hc_bytealign_S (w5[1], w5[2], offset);
      c2[3] = hc_bytealign_S (w5[0], w5[1], offset);
      c2[2] = hc_bytealign_S (w4[3], w5[0], offset);
      c2[1] = hc_bytealign_S (w4[2], w4[3], offset);
      c2[0] = hc_bytealign_S (w4[1], w4[2], offset);
      c1[3] = hc_bytealign_S (w4[0], w4[1], offset);
      c1[2] = hc_bytealign_S (w3[3], w4[0], offset);
      c1[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[0] = hc_bytealign_S (w3[1], w3[2], offset);
      c0[3] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[2] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[1] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[0] = hc_bytealign_S (w2[1], w2[2], offset);
      w7[3] = hc_bytealign_S (w2[0], w2[1], offset);
      w7[2] = hc_bytealign_S (w1[3], w2[0], offset);
      w7[1] = hc_bytealign_S (w1[2], w1[3], offset);
      w7[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w6[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w5[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[2] = hc_bytealign_S (    0, w0[0], offset);
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 23:
      c5[3] = hc_bytealign_S (w7[3],     0, offset);
      c5[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c5[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c5[0] = hc_bytealign_S (w7[0], w7[1], offset);
      c4[3] = hc_bytealign_S (w6[3], w7[0], offset);
      c4[2] = hc_bytealign_S (w6[2], w6[3], offset);
      c4[1] = hc_bytealign_S (w6[1], w6[2], offset);
      c4[0] = hc_bytealign_S (w6[0], w6[1], offset);
      c3[3] = hc_bytealign_S (w5[3], w6[0], offset);
      c3[2] = hc_bytealign_S (w5[2], w5[3], offset);
      c3[1] = hc_bytealign_S (w5[1], w5[2], offset);
      c3[0] = hc_bytealign_S (w5[0], w5[1], offset);
      c2[3] = hc_bytealign_S (w4[3], w5[0], offset);
      c2[2] = hc_bytealign_S (w4[2], w4[3], offset);
      c2[1] = hc_bytealign_S (w4[1], w4[2], offset);
      c2[0] = hc_bytealign_S (w4[0], w4[1], offset);
      c1[3] = hc_bytealign_S (w3[3], w4[0], offset);
      c1[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[0] = hc_bytealign_S (w3[0], w3[1], offset);
      c0[3] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[2] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[1] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[0] = hc_bytealign_S (w2[0], w2[1], offset);
      w7[3] = hc_bytealign_S (w1[3], w2[0], offset);
      w7[2] = hc_bytealign_S (w1[2], w1[3], offset);
      w7[1] = hc_bytealign_S (w1[1], w1[2], offset);
      w7[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w6[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w5[3] = hc_bytealign_S (    0, w0[0], offset);
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 24:
      c6[0] = hc_bytealign_S (w7[3],     0, offset);
      c5[3] = hc_bytealign_S (w7[2], w7[3], offset);
      c5[2] = hc_bytealign_S (w7[1], w7[2], offset);
      c5[1] = hc_bytealign_S (w7[0], w7[1], offset);
      c5[0] = hc_bytealign_S (w6[3], w7[0], offset);
      c4[3] = hc_bytealign_S (w6[2], w6[3], offset);
      c4[2] = hc_bytealign_S (w6[1], w6[2], offset);
      c4[1] = hc_bytealign_S (w6[0], w6[1], offset);
      c4[0] = hc_bytealign_S (w5[3], w6[0], offset);
      c3[3] = hc_bytealign_S (w5[2], w5[3], offset);
      c3[2] = hc_bytealign_S (w5[1], w5[2], offset);
      c3[1] = hc_bytealign_S (w5[0], w5[1], offset);
      c3[0] = hc_bytealign_S (w4[3], w5[0], offset);
      c2[3] = hc_bytealign_S (w4[2], w4[3], offset);
      c2[2] = hc_bytealign_S (w4[1], w4[2], offset);
      c2[1] = hc_bytealign_S (w4[0], w4[1], offset);
      c2[0] = hc_bytealign_S (w3[3], w4[0], offset);
      c1[3] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[2] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[1] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[0] = hc_bytealign_S (w2[3], w3[0], offset);
      c0[3] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[2] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[1] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[0] = hc_bytealign_S (w1[3], w2[0], offset);
      w7[3] = hc_bytealign_S (w1[2], w1[3], offset);
      w7[2] = hc_bytealign_S (w1[1], w1[2], offset);
      w7[1] = hc_bytealign_S (w1[0], w1[1], offset);
      w7[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w6[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[0] = hc_bytealign_S (    0, w0[0], offset);
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 25:
      c6[1] = hc_bytealign_S (w7[3],     0, offset);
      c6[0] = hc_bytealign_S (w7[2], w7[3], offset);
      c5[3] = hc_bytealign_S (w7[1], w7[2], offset);
      c5[2] = hc_bytealign_S (w7[0], w7[1], offset);
      c5[1] = hc_bytealign_S (w6[3], w7[0], offset);
      c5[0] = hc_bytealign_S (w6[2], w6[3], offset);
      c4[3] = hc_bytealign_S (w6[1], w6[2], offset);
      c4[2] = hc_bytealign_S (w6[0], w6[1], offset);
      c4[1] = hc_bytealign_S (w5[3], w6[0], offset);
      c4[0] = hc_bytealign_S (w5[2], w5[3], offset);
      c3[3] = hc_bytealign_S (w5[1], w5[2], offset);
      c3[2] = hc_bytealign_S (w5[0], w5[1], offset);
      c3[1] = hc_bytealign_S (w4[3], w5[0], offset);
      c3[0] = hc_bytealign_S (w4[2], w4[3], offset);
      c2[3] = hc_bytealign_S (w4[1], w4[2], offset);
      c2[2] = hc_bytealign_S (w4[0], w4[1], offset);
      c2[1] = hc_bytealign_S (w3[3], w4[0], offset);
      c2[0] = hc_bytealign_S (w3[2], w3[3], offset);
      c1[3] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[2] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[1] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[0] = hc_bytealign_S (w2[2], w2[3], offset);
      c0[3] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[2] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[1] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[0] = hc_bytealign_S (w1[2], w1[3], offset);
      w7[3] = hc_bytealign_S (w1[1], w1[2], offset);
      w7[2] = hc_bytealign_S (w1[0], w1[1], offset);
      w7[1] = hc_bytealign_S (w0[3], w1[0], offset);
      w7[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w6[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[1] = hc_bytealign_S (    0, w0[0], offset);
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 26:
      c6[2] = hc_bytealign_S (w7[3],     0, offset);
      c6[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c6[0] = hc_bytealign_S (w7[1], w7[2], offset);
      c5[3] = hc_bytealign_S (w7[0], w7[1], offset);
      c5[2] = hc_bytealign_S (w6[3], w7[0], offset);
      c5[1] = hc_bytealign_S (w6[2], w6[3], offset);
      c5[0] = hc_bytealign_S (w6[1], w6[2], offset);
      c4[3] = hc_bytealign_S (w6[0], w6[1], offset);
      c4[2] = hc_bytealign_S (w5[3], w6[0], offset);
      c4[1] = hc_bytealign_S (w5[2], w5[3], offset);
      c4[0] = hc_bytealign_S (w5[1], w5[2], offset);
      c3[3] = hc_bytealign_S (w5[0], w5[1], offset);
      c3[2] = hc_bytealign_S (w4[3], w5[0], offset);
      c3[1] = hc_bytealign_S (w4[2], w4[3], offset);
      c3[0] = hc_bytealign_S (w4[1], w4[2], offset);
      c2[3] = hc_bytealign_S (w4[0], w4[1], offset);
      c2[2] = hc_bytealign_S (w3[3], w4[0], offset);
      c2[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[0] = hc_bytealign_S (w3[1], w3[2], offset);
      c1[3] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[2] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[1] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[0] = hc_bytealign_S (w2[1], w2[2], offset);
      c0[3] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[2] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[1] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[0] = hc_bytealign_S (w1[1], w1[2], offset);
      w7[3] = hc_bytealign_S (w1[0], w1[1], offset);
      w7[2] = hc_bytealign_S (w0[3], w1[0], offset);
      w7[1] = hc_bytealign_S (w0[2], w0[3], offset);
      w7[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w6[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[2] = hc_bytealign_S (    0, w0[0], offset);
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 27:
      c6[3] = hc_bytealign_S (w7[3],     0, offset);
      c6[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c6[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c6[0] = hc_bytealign_S (w7[0], w7[1], offset);
      c5[3] = hc_bytealign_S (w6[3], w7[0], offset);
      c5[2] = hc_bytealign_S (w6[2], w6[3], offset);
      c5[1] = hc_bytealign_S (w6[1], w6[2], offset);
      c5[0] = hc_bytealign_S (w6[0], w6[1], offset);
      c4[3] = hc_bytealign_S (w5[3], w6[0], offset);
      c4[2] = hc_bytealign_S (w5[2], w5[3], offset);
      c4[1] = hc_bytealign_S (w5[1], w5[2], offset);
      c4[0] = hc_bytealign_S (w5[0], w5[1], offset);
      c3[3] = hc_bytealign_S (w4[3], w5[0], offset);
      c3[2] = hc_bytealign_S (w4[2], w4[3], offset);
      c3[1] = hc_bytealign_S (w4[1], w4[2], offset);
      c3[0] = hc_bytealign_S (w4[0], w4[1], offset);
      c2[3] = hc_bytealign_S (w3[3], w4[0], offset);
      c2[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[0] = hc_bytealign_S (w3[0], w3[1], offset);
      c1[3] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[2] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[1] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[0] = hc_bytealign_S (w2[0], w2[1], offset);
      c0[3] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[2] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[1] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[0] = hc_bytealign_S (w1[0], w1[1], offset);
      w7[3] = hc_bytealign_S (w0[3], w1[0], offset);
      w7[2] = hc_bytealign_S (w0[2], w0[3], offset);
      w7[1] = hc_bytealign_S (w0[1], w0[2], offset);
      w7[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w6[3] = hc_bytealign_S (    0, w0[0], offset);
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 28:
      c7[0] = hc_bytealign_S (w7[3],     0, offset);
      c6[3] = hc_bytealign_S (w7[2], w7[3], offset);
      c6[2] = hc_bytealign_S (w7[1], w7[2], offset);
      c6[1] = hc_bytealign_S (w7[0], w7[1], offset);
      c6[0] = hc_bytealign_S (w6[3], w7[0], offset);
      c5[3] = hc_bytealign_S (w6[2], w6[3], offset);
      c5[2] = hc_bytealign_S (w6[1], w6[2], offset);
      c5[1] = hc_bytealign_S (w6[0], w6[1], offset);
      c5[0] = hc_bytealign_S (w5[3], w6[0], offset);
      c4[3] = hc_bytealign_S (w5[2], w5[3], offset);
      c4[2] = hc_bytealign_S (w5[1], w5[2], offset);
      c4[1] = hc_bytealign_S (w5[0], w5[1], offset);
      c4[0] = hc_bytealign_S (w4[3], w5[0], offset);
      c3[3] = hc_bytealign_S (w4[2], w4[3], offset);
      c3[2] = hc_bytealign_S (w4[1], w4[2], offset);
      c3[1] = hc_bytealign_S (w4[0], w4[1], offset);
      c3[0] = hc_bytealign_S (w3[3], w4[0], offset);
      c2[3] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[2] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[1] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[0] = hc_bytealign_S (w2[3], w3[0], offset);
      c1[3] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[2] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[1] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[0] = hc_bytealign_S (w1[3], w2[0], offset);
      c0[3] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[2] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[1] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[0] = hc_bytealign_S (w0[3], w1[0], offset);
      w7[3] = hc_bytealign_S (w0[2], w0[3], offset);
      w7[2] = hc_bytealign_S (w0[1], w0[2], offset);
      w7[1] = hc_bytealign_S (w0[0], w0[1], offset);
      w7[0] = hc_bytealign_S (    0, w0[0], offset);
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 29:
      c7[1] = hc_bytealign_S (w7[3],     0, offset);
      c7[0] = hc_bytealign_S (w7[2], w7[3], offset);
      c6[3] = hc_bytealign_S (w7[1], w7[2], offset);
      c6[2] = hc_bytealign_S (w7[0], w7[1], offset);
      c6[1] = hc_bytealign_S (w6[3], w7[0], offset);
      c6[0] = hc_bytealign_S (w6[2], w6[3], offset);
      c5[3] = hc_bytealign_S (w6[1], w6[2], offset);
      c5[2] = hc_bytealign_S (w6[0], w6[1], offset);
      c5[1] = hc_bytealign_S (w5[3], w6[0], offset);
      c5[0] = hc_bytealign_S (w5[2], w5[3], offset);
      c4[3] = hc_bytealign_S (w5[1], w5[2], offset);
      c4[2] = hc_bytealign_S (w5[0], w5[1], offset);
      c4[1] = hc_bytealign_S (w4[3], w5[0], offset);
      c4[0] = hc_bytealign_S (w4[2], w4[3], offset);
      c3[3] = hc_bytealign_S (w4[1], w4[2], offset);
      c3[2] = hc_bytealign_S (w4[0], w4[1], offset);
      c3[1] = hc_bytealign_S (w3[3], w4[0], offset);
      c3[0] = hc_bytealign_S (w3[2], w3[3], offset);
      c2[3] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[2] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[1] = hc_bytealign_S (w2[3], w3[0], offset);
      c2[0] = hc_bytealign_S (w2[2], w2[3], offset);
      c1[3] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[2] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[1] = hc_bytealign_S (w1[3], w2[0], offset);
      c1[0] = hc_bytealign_S (w1[2], w1[3], offset);
      c0[3] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[2] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[1] = hc_bytealign_S (w0[3], w1[0], offset);
      c0[0] = hc_bytealign_S (w0[2], w0[3], offset);
      w7[3] = hc_bytealign_S (w0[1], w0[2], offset);
      w7[2] = hc_bytealign_S (w0[0], w0[1], offset);
      w7[1] = hc_bytealign_S (    0, w0[0], offset);
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 30:
      c7[2] = hc_bytealign_S (w7[3],     0, offset);
      c7[1] = hc_bytealign_S (w7[2], w7[3], offset);
      c7[0] = hc_bytealign_S (w7[1], w7[2], offset);
      c6[3] = hc_bytealign_S (w7[0], w7[1], offset);
      c6[2] = hc_bytealign_S (w6[3], w7[0], offset);
      c6[1] = hc_bytealign_S (w6[2], w6[3], offset);
      c6[0] = hc_bytealign_S (w6[1], w6[2], offset);
      c5[3] = hc_bytealign_S (w6[0], w6[1], offset);
      c5[2] = hc_bytealign_S (w5[3], w6[0], offset);
      c5[1] = hc_bytealign_S (w5[2], w5[3], offset);
      c5[0] = hc_bytealign_S (w5[1], w5[2], offset);
      c4[3] = hc_bytealign_S (w5[0], w5[1], offset);
      c4[2] = hc_bytealign_S (w4[3], w5[0], offset);
      c4[1] = hc_bytealign_S (w4[2], w4[3], offset);
      c4[0] = hc_bytealign_S (w4[1], w4[2], offset);
      c3[3] = hc_bytealign_S (w4[0], w4[1], offset);
      c3[2] = hc_bytealign_S (w3[3], w4[0], offset);
      c3[1] = hc_bytealign_S (w3[2], w3[3], offset);
      c3[0] = hc_bytealign_S (w3[1], w3[2], offset);
      c2[3] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[2] = hc_bytealign_S (w2[3], w3[0], offset);
      c2[1] = hc_bytealign_S (w2[2], w2[3], offset);
      c2[0] = hc_bytealign_S (w2[1], w2[2], offset);
      c1[3] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[2] = hc_bytealign_S (w1[3], w2[0], offset);
      c1[1] = hc_bytealign_S (w1[2], w1[3], offset);
      c1[0] = hc_bytealign_S (w1[1], w1[2], offset);
      c0[3] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[2] = hc_bytealign_S (w0[3], w1[0], offset);
      c0[1] = hc_bytealign_S (w0[2], w0[3], offset);
      c0[0] = hc_bytealign_S (w0[1], w0[2], offset);
      w7[3] = hc_bytealign_S (w0[0], w0[1], offset);
      w7[2] = hc_bytealign_S (    0, w0[0], offset);
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 31:
      c7[3] = hc_bytealign_S (w7[3],     0, offset);
      c7[2] = hc_bytealign_S (w7[2], w7[3], offset);
      c7[1] = hc_bytealign_S (w7[1], w7[2], offset);
      c7[0] = hc_bytealign_S (w7[0], w7[1], offset);
      c6[3] = hc_bytealign_S (w6[3], w7[0], offset);
      c6[2] = hc_bytealign_S (w6[2], w6[3], offset);
      c6[1] = hc_bytealign_S (w6[1], w6[2], offset);
      c6[0] = hc_bytealign_S (w6[0], w6[1], offset);
      c5[3] = hc_bytealign_S (w5[3], w6[0], offset);
      c5[2] = hc_bytealign_S (w5[2], w5[3], offset);
      c5[1] = hc_bytealign_S (w5[1], w5[2], offset);
      c5[0] = hc_bytealign_S (w5[0], w5[1], offset);
      c4[3] = hc_bytealign_S (w4[3], w5[0], offset);
      c4[2] = hc_bytealign_S (w4[2], w4[3], offset);
      c4[1] = hc_bytealign_S (w4[1], w4[2], offset);
      c4[0] = hc_bytealign_S (w4[0], w4[1], offset);
      c3[3] = hc_bytealign_S (w3[3], w4[0], offset);
      c3[2] = hc_bytealign_S (w3[2], w3[3], offset);
      c3[1] = hc_bytealign_S (w3[1], w3[2], offset);
      c3[0] = hc_bytealign_S (w3[0], w3[1], offset);
      c2[3] = hc_bytealign_S (w2[3], w3[0], offset);
      c2[2] = hc_bytealign_S (w2[2], w2[3], offset);
      c2[1] = hc_bytealign_S (w2[1], w2[2], offset);
      c2[0] = hc_bytealign_S (w2[0], w2[1], offset);
      c1[3] = hc_bytealign_S (w1[3], w2[0], offset);
      c1[2] = hc_bytealign_S (w1[2], w1[3], offset);
      c1[1] = hc_bytealign_S (w1[1], w1[2], offset);
      c1[0] = hc_bytealign_S (w1[0], w1[1], offset);
      c0[3] = hc_bytealign_S (w0[3], w1[0], offset);
      c0[2] = hc_bytealign_S (w0[2], w0[3], offset);
      c0[1] = hc_bytealign_S (w0[1], w0[2], offset);
      c0[0] = hc_bytealign_S (w0[0], w0[1], offset);
      w7[3] = hc_bytealign_S (    0, w0[0], offset);
      w7[2] = 0;
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif

  #if (defined IS_AMD && AMD_GCN >= 3) || defined IS_NV

  #if defined IS_NV
  const int selector = (0x76543210 >> ((offset & 3) * 4)) & 0xffff;
  #endif

  #if defined IS_AMD
  const int selector = 0x0706050403020100 >> ((offset & 3) * 8);
  #endif

  switch (offset_switch)
  {
    case  0:
      c0[0] = hc_byte_perm_S (    0, w7[3], selector);
      w7[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      w7[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      w7[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      w7[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      w6[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      w6[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      w6[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      w5[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      w5[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      w5[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      w4[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w4[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w4[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w3[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w3[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w2[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w1[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w0[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[0] = hc_byte_perm_S (w0[0],     0, selector);

      break;

    case  1:
      c0[1] = hc_byte_perm_S (    0, w7[3], selector);
      c0[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      w7[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      w7[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      w7[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      w7[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      w6[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      w6[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      w5[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      w5[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      w4[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w4[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w3[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w2[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w1[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w0[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[1] = hc_byte_perm_S (w0[0],     0, selector);
      w0[0] = 0;

      break;

    case  2:
      c0[2] = hc_byte_perm_S (    0, w7[3], selector);
      c0[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c0[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      w7[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      w7[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      w7[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      w7[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      w6[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      w5[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      w4[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w3[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w2[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w1[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w0[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[2] = hc_byte_perm_S (w0[0],     0, selector);
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  3:
      c0[3] = hc_byte_perm_S (    0, w7[3], selector);
      c0[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c0[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c0[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      w7[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      w7[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      w7[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      w7[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      w6[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      w5[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      w4[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w3[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w2[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w1[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w0[3] = hc_byte_perm_S (w0[0],     0, selector);
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  4:
      c1[0] = hc_byte_perm_S (    0, w7[3], selector);
      c0[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      c0[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      c0[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      c0[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      w7[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      w7[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      w7[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      w7[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      w6[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      w5[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w4[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w3[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w2[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w1[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[0] = hc_byte_perm_S (w0[0],     0, selector);
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  5:
      c1[1] = hc_byte_perm_S (    0, w7[3], selector);
      c1[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      c0[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      c0[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      c0[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      c0[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      w7[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      w7[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      w7[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      w7[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      w6[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      w5[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w4[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w3[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w2[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w1[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[1] = hc_byte_perm_S (w0[0],     0, selector);
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  6:
      c1[2] = hc_byte_perm_S (    0, w7[3], selector);
      c1[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c1[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      c0[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      c0[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      c0[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      c0[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      w7[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      w7[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      w7[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      w7[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      w6[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      w5[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w4[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w3[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w2[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w1[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[2] = hc_byte_perm_S (w0[0],     0, selector);
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  7:
      c1[3] = hc_byte_perm_S (    0, w7[3], selector);
      c1[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c1[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c1[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      c0[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      c0[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      c0[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      c0[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      w7[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      w7[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      w7[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      w7[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      w6[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      w5[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w4[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w3[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w2[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w1[3] = hc_byte_perm_S (w0[0],     0, selector);
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  8:
      c2[0] = hc_byte_perm_S (    0, w7[3], selector);
      c1[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      c1[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      c1[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      c1[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      c0[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      c0[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      c0[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      c0[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      w7[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      w7[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      w7[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      w7[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      w6[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w5[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w4[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w3[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w2[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[0] = hc_byte_perm_S (w0[0],     0, selector);
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case  9:
      c2[1] = hc_byte_perm_S (    0, w7[3], selector);
      c2[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      c1[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      c1[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      c1[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      c1[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      c0[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      c0[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      c0[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      c0[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      w7[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      w7[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      w7[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      w7[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      w6[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w5[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w4[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w3[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w2[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[1] = hc_byte_perm_S (w0[0],     0, selector);
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 10:
      c2[2] = hc_byte_perm_S (    0, w7[3], selector);
      c2[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c2[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      c1[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      c1[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      c1[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      c1[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      c0[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      c0[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      c0[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      c0[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      w7[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      w7[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      w7[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      w7[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      w6[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w5[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w4[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w3[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w2[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[2] = hc_byte_perm_S (w0[0],     0, selector);
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 11:
      c2[3] = hc_byte_perm_S (    0, w7[3], selector);
      c2[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c2[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c2[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      c1[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      c1[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      c1[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      c1[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      c0[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      c0[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      c0[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      c0[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      w7[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      w7[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      w7[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      w7[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      w6[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w5[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w4[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w3[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w2[3] = hc_byte_perm_S (w0[0],     0, selector);
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 12:
      c3[0] = hc_byte_perm_S (    0, w7[3], selector);
      c2[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      c2[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      c2[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      c2[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      c1[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      c1[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      c1[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      c1[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      c0[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      c0[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      c0[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      c0[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      w7[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      w7[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      w7[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      w7[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w6[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w5[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w4[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w3[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[0] = hc_byte_perm_S (w0[0],     0, selector);
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 13:
      c3[1] = hc_byte_perm_S (    0, w7[3], selector);
      c3[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      c2[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      c2[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      c2[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      c2[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      c1[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      c1[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      c1[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      c1[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      c0[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      c0[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      c0[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      c0[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      w7[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      w7[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      w7[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      w7[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w6[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w5[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w4[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w3[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[1] = hc_byte_perm_S (w0[0],     0, selector);
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 14:
      c3[2] = hc_byte_perm_S (    0, w7[3], selector);
      c3[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c3[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      c2[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      c2[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      c2[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      c2[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      c1[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      c1[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      c1[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      c1[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      c0[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      c0[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      c0[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      c0[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      w7[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      w7[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      w7[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      w7[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w6[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w5[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w4[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w3[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[2] = hc_byte_perm_S (w0[0],     0, selector);
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 15:
      c3[3] = hc_byte_perm_S (    0, w7[3], selector);
      c3[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c3[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c3[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      c2[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      c2[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      c2[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      c2[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      c1[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      c1[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      c1[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      c1[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      c0[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      c0[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      c0[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      c0[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      w7[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      w7[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      w7[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      w7[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w6[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w5[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w4[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w3[3] = hc_byte_perm_S (w0[0],     0, selector);
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 16:
      c4[0] = hc_byte_perm_S (    0, w7[3], selector);
      c3[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      c3[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      c3[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      c3[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      c2[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      c2[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      c2[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      c2[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      c1[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      c1[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      c1[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      c1[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      c0[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      c0[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      c0[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      c0[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      w7[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      w7[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      w7[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      w7[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w6[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w5[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w4[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[0] = hc_byte_perm_S (w0[0],     0, selector);
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 17:
      c4[1] = hc_byte_perm_S (    0, w7[3], selector);
      c4[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      c3[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      c3[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      c3[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      c3[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      c2[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      c2[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      c2[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      c2[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      c1[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      c1[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      c1[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      c1[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      c0[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      c0[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      c0[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      c0[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      w7[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      w7[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      w7[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      w7[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w6[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w5[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w4[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[1] = hc_byte_perm_S (w0[0],     0, selector);
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 18:
      c4[2] = hc_byte_perm_S (    0, w7[3], selector);
      c4[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c4[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      c3[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      c3[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      c3[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      c3[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      c2[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      c2[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      c2[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      c2[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      c1[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      c1[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      c1[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      c1[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      c0[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      c0[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      c0[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      w7[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      w7[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      w7[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      w7[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w6[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w5[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w4[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[2] = hc_byte_perm_S (w0[0],     0, selector);
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 19:
      c4[3] = hc_byte_perm_S (    0, w7[3], selector);
      c4[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c4[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c4[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      c3[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      c3[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      c3[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      c3[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      c2[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      c2[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      c2[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      c2[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      c1[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      c1[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      c1[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      c1[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      c0[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      c0[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      w7[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      w7[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      w7[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      w7[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w6[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w5[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w4[3] = hc_byte_perm_S (w0[0],     0, selector);
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 20:
      c5[0] = hc_byte_perm_S (    0, w7[3], selector);
      c4[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      c4[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      c4[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      c4[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      c3[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      c3[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      c3[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      c3[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      c2[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      c2[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      c2[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      c2[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      c1[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      c1[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      c1[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      c1[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      c0[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      w7[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      w7[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      w7[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      w7[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w6[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w5[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[0] = hc_byte_perm_S (w0[0],     0, selector);
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 21:
      c5[1] = hc_byte_perm_S (    0, w7[3], selector);
      c5[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      c4[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      c4[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      c4[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      c4[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      c3[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      c3[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      c3[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      c3[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      c2[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      c2[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      c2[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      c2[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      c1[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      c1[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      c1[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      c1[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      c0[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      w7[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      w7[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      w7[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      w7[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w6[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w5[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[1] = hc_byte_perm_S (w0[0],     0, selector);
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 22:
      c5[2] = hc_byte_perm_S (    0, w7[3], selector);
      c5[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c5[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      c4[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      c4[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      c4[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      c4[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      c3[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      c3[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      c3[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      c3[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      c2[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      c2[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      c2[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      c2[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      c1[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      c1[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      c1[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      c0[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      w7[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      w7[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      w7[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      w7[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w6[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w5[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[2] = hc_byte_perm_S (w0[0],     0, selector);
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 23:
      c5[3] = hc_byte_perm_S (    0, w7[3], selector);
      c5[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c5[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c5[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      c4[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      c4[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      c4[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      c4[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      c3[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      c3[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      c3[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      c3[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      c2[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      c2[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      c2[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      c2[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      c1[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      c1[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      c0[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      w7[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      w7[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      w7[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      w7[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w6[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w5[3] = hc_byte_perm_S (w0[0],     0, selector);
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 24:
      c6[0] = hc_byte_perm_S (    0, w7[3], selector);
      c5[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      c5[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      c5[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      c5[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      c4[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      c4[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      c4[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      c4[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      c3[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      c3[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      c3[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      c3[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      c2[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      c2[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      c2[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      c2[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      c1[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      c0[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      w7[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      w7[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      w7[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      w7[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w6[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[0] = hc_byte_perm_S (w0[0],     0, selector);
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 25:
      c6[1] = hc_byte_perm_S (    0, w7[3], selector);
      c6[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      c5[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      c5[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      c5[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      c5[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      c4[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      c4[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      c4[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      c4[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      c3[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      c3[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      c3[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      c3[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      c2[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      c2[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      c2[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      c2[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      c1[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      c0[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      w7[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      w7[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      w7[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      w7[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w6[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[1] = hc_byte_perm_S (w0[0],     0, selector);
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 26:
      c6[2] = hc_byte_perm_S (    0, w7[3], selector);
      c6[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c6[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      c5[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      c5[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      c5[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      c5[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      c4[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      c4[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      c4[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      c4[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      c3[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      c3[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      c3[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      c3[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      c2[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      c2[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      c2[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      c1[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      c0[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      w7[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      w7[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      w7[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      w7[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w6[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[2] = hc_byte_perm_S (w0[0],     0, selector);
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 27:
      c6[3] = hc_byte_perm_S (    0, w7[3], selector);
      c6[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c6[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c6[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      c5[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      c5[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      c5[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      c5[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      c4[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      c4[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      c4[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      c4[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      c3[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      c3[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      c3[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      c3[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      c2[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      c2[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      c1[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      c0[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      w7[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      w7[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      w7[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      w7[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w6[3] = hc_byte_perm_S (w0[0],     0, selector);
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 28:
      c7[0] = hc_byte_perm_S (    0, w7[3], selector);
      c6[3] = hc_byte_perm_S (w7[3], w7[2], selector);
      c6[2] = hc_byte_perm_S (w7[2], w7[1], selector);
      c6[1] = hc_byte_perm_S (w7[1], w7[0], selector);
      c6[0] = hc_byte_perm_S (w7[0], w6[3], selector);
      c5[3] = hc_byte_perm_S (w6[3], w6[2], selector);
      c5[2] = hc_byte_perm_S (w6[2], w6[1], selector);
      c5[1] = hc_byte_perm_S (w6[1], w6[0], selector);
      c5[0] = hc_byte_perm_S (w6[0], w5[3], selector);
      c4[3] = hc_byte_perm_S (w5[3], w5[2], selector);
      c4[2] = hc_byte_perm_S (w5[2], w5[1], selector);
      c4[1] = hc_byte_perm_S (w5[1], w5[0], selector);
      c4[0] = hc_byte_perm_S (w5[0], w4[3], selector);
      c3[3] = hc_byte_perm_S (w4[3], w4[2], selector);
      c3[2] = hc_byte_perm_S (w4[2], w4[1], selector);
      c3[1] = hc_byte_perm_S (w4[1], w4[0], selector);
      c3[0] = hc_byte_perm_S (w4[0], w3[3], selector);
      c2[3] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[2] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[1] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[0] = hc_byte_perm_S (w3[0], w2[3], selector);
      c1[3] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[2] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[1] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[0] = hc_byte_perm_S (w2[0], w1[3], selector);
      c0[3] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[2] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[1] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[0] = hc_byte_perm_S (w1[0], w0[3], selector);
      w7[3] = hc_byte_perm_S (w0[3], w0[2], selector);
      w7[2] = hc_byte_perm_S (w0[2], w0[1], selector);
      w7[1] = hc_byte_perm_S (w0[1], w0[0], selector);
      w7[0] = hc_byte_perm_S (w0[0],     0, selector);
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 29:
      c7[1] = hc_byte_perm_S (    0, w7[3], selector);
      c7[0] = hc_byte_perm_S (w7[3], w7[2], selector);
      c6[3] = hc_byte_perm_S (w7[2], w7[1], selector);
      c6[2] = hc_byte_perm_S (w7[1], w7[0], selector);
      c6[1] = hc_byte_perm_S (w7[0], w6[3], selector);
      c6[0] = hc_byte_perm_S (w6[3], w6[2], selector);
      c5[3] = hc_byte_perm_S (w6[2], w6[1], selector);
      c5[2] = hc_byte_perm_S (w6[1], w6[0], selector);
      c5[1] = hc_byte_perm_S (w6[0], w5[3], selector);
      c5[0] = hc_byte_perm_S (w5[3], w5[2], selector);
      c4[3] = hc_byte_perm_S (w5[2], w5[1], selector);
      c4[2] = hc_byte_perm_S (w5[1], w5[0], selector);
      c4[1] = hc_byte_perm_S (w5[0], w4[3], selector);
      c4[0] = hc_byte_perm_S (w4[3], w4[2], selector);
      c3[3] = hc_byte_perm_S (w4[2], w4[1], selector);
      c3[2] = hc_byte_perm_S (w4[1], w4[0], selector);
      c3[1] = hc_byte_perm_S (w4[0], w3[3], selector);
      c3[0] = hc_byte_perm_S (w3[3], w3[2], selector);
      c2[3] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[2] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[1] = hc_byte_perm_S (w3[0], w2[3], selector);
      c2[0] = hc_byte_perm_S (w2[3], w2[2], selector);
      c1[3] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[2] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[1] = hc_byte_perm_S (w2[0], w1[3], selector);
      c1[0] = hc_byte_perm_S (w1[3], w1[2], selector);
      c0[3] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[2] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[1] = hc_byte_perm_S (w1[0], w0[3], selector);
      c0[0] = hc_byte_perm_S (w0[3], w0[2], selector);
      w7[3] = hc_byte_perm_S (w0[2], w0[1], selector);
      w7[2] = hc_byte_perm_S (w0[1], w0[0], selector);
      w7[1] = hc_byte_perm_S (w0[0],     0, selector);
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 30:
      c7[2] = hc_byte_perm_S (    0, w7[3], selector);
      c7[1] = hc_byte_perm_S (w7[3], w7[2], selector);
      c7[0] = hc_byte_perm_S (w7[2], w7[1], selector);
      c6[3] = hc_byte_perm_S (w7[1], w7[0], selector);
      c6[2] = hc_byte_perm_S (w7[0], w6[3], selector);
      c6[1] = hc_byte_perm_S (w6[3], w6[2], selector);
      c6[0] = hc_byte_perm_S (w6[2], w6[1], selector);
      c5[3] = hc_byte_perm_S (w6[1], w6[0], selector);
      c5[2] = hc_byte_perm_S (w6[0], w5[3], selector);
      c5[1] = hc_byte_perm_S (w5[3], w5[2], selector);
      c5[0] = hc_byte_perm_S (w5[2], w5[1], selector);
      c4[3] = hc_byte_perm_S (w5[1], w5[0], selector);
      c4[2] = hc_byte_perm_S (w5[0], w4[3], selector);
      c4[1] = hc_byte_perm_S (w4[3], w4[2], selector);
      c4[0] = hc_byte_perm_S (w4[2], w4[1], selector);
      c3[3] = hc_byte_perm_S (w4[1], w4[0], selector);
      c3[2] = hc_byte_perm_S (w4[0], w3[3], selector);
      c3[1] = hc_byte_perm_S (w3[3], w3[2], selector);
      c3[0] = hc_byte_perm_S (w3[2], w3[1], selector);
      c2[3] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[2] = hc_byte_perm_S (w3[0], w2[3], selector);
      c2[1] = hc_byte_perm_S (w2[3], w2[2], selector);
      c2[0] = hc_byte_perm_S (w2[2], w2[1], selector);
      c1[3] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[2] = hc_byte_perm_S (w2[0], w1[3], selector);
      c1[1] = hc_byte_perm_S (w1[3], w1[2], selector);
      c1[0] = hc_byte_perm_S (w1[2], w1[1], selector);
      c0[3] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[2] = hc_byte_perm_S (w1[0], w0[3], selector);
      c0[1] = hc_byte_perm_S (w0[3], w0[2], selector);
      c0[0] = hc_byte_perm_S (w0[2], w0[1], selector);
      w7[3] = hc_byte_perm_S (w0[1], w0[0], selector);
      w7[2] = hc_byte_perm_S (w0[0],     0, selector);
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;

    case 31:
      c7[3] = hc_byte_perm_S (    0, w7[3], selector);
      c7[2] = hc_byte_perm_S (w7[3], w7[2], selector);
      c7[1] = hc_byte_perm_S (w7[2], w7[1], selector);
      c7[0] = hc_byte_perm_S (w7[1], w7[0], selector);
      c6[3] = hc_byte_perm_S (w7[0], w6[3], selector);
      c6[2] = hc_byte_perm_S (w6[3], w6[2], selector);
      c6[1] = hc_byte_perm_S (w6[2], w6[1], selector);
      c6[0] = hc_byte_perm_S (w6[1], w6[0], selector);
      c5[3] = hc_byte_perm_S (w6[0], w5[3], selector);
      c5[2] = hc_byte_perm_S (w5[3], w5[2], selector);
      c5[1] = hc_byte_perm_S (w5[2], w5[1], selector);
      c5[0] = hc_byte_perm_S (w5[1], w5[0], selector);
      c4[3] = hc_byte_perm_S (w5[0], w4[3], selector);
      c4[2] = hc_byte_perm_S (w4[3], w4[2], selector);
      c4[1] = hc_byte_perm_S (w4[2], w4[1], selector);
      c4[0] = hc_byte_perm_S (w4[1], w4[0], selector);
      c3[3] = hc_byte_perm_S (w4[0], w3[3], selector);
      c3[2] = hc_byte_perm_S (w3[3], w3[2], selector);
      c3[1] = hc_byte_perm_S (w3[2], w3[1], selector);
      c3[0] = hc_byte_perm_S (w3[1], w3[0], selector);
      c2[3] = hc_byte_perm_S (w3[0], w2[3], selector);
      c2[2] = hc_byte_perm_S (w2[3], w2[2], selector);
      c2[1] = hc_byte_perm_S (w2[2], w2[1], selector);
      c2[0] = hc_byte_perm_S (w2[1], w2[0], selector);
      c1[3] = hc_byte_perm_S (w2[0], w1[3], selector);
      c1[2] = hc_byte_perm_S (w1[3], w1[2], selector);
      c1[1] = hc_byte_perm_S (w1[2], w1[1], selector);
      c1[0] = hc_byte_perm_S (w1[1], w1[0], selector);
      c0[3] = hc_byte_perm_S (w1[0], w0[3], selector);
      c0[2] = hc_byte_perm_S (w0[3], w0[2], selector);
      c0[1] = hc_byte_perm_S (w0[2], w0[1], selector);
      c0[0] = hc_byte_perm_S (w0[1], w0[0], selector);
      w7[3] = hc_byte_perm_S (w0[0],     0, selector);
      w7[2] = 0;
      w7[1] = 0;
      w7[0] = 0;
      w6[3] = 0;
      w6[2] = 0;
      w6[1] = 0;
      w6[0] = 0;
      w5[3] = 0;
      w5[2] = 0;
      w5[1] = 0;
      w5[0] = 0;
      w4[3] = 0;
      w4[2] = 0;
      w4[1] = 0;
      w4[0] = 0;
      w3[3] = 0;
      w3[2] = 0;
      w3[1] = 0;
      w3[0] = 0;
      w2[3] = 0;
      w2[2] = 0;
      w2[1] = 0;
      w2[0] = 0;
      w1[3] = 0;
      w1[2] = 0;
      w1[1] = 0;
      w1[0] = 0;
      w0[3] = 0;
      w0[2] = 0;
      w0[1] = 0;
      w0[0] = 0;

      break;
  }
  #endif
}

DECLSPEC void switch_buffer_by_offset_1x64_le_S (u32 *w, const u32 offset)
{
  const int offset_mod_4 = offset & 3;

  const int offset_minus_4 = 4 - offset_mod_4;

  const int offset_switch = offset / 4;

  #if (defined IS_AMD && AMD_GCN < 3) || defined IS_GENERIC

  #pragma unroll
  for (int i = 0; i < 64; i++) w[i] = swap32_S (w[i]);

  switch (offset_switch)
  {
    case  0:
      w[63] = hc_bytealign_S (w[62], w[63], offset);
      w[62] = hc_bytealign_S (w[61], w[62], offset);
      w[61] = hc_bytealign_S (w[60], w[61], offset);
      w[60] = hc_bytealign_S (w[59], w[60], offset);
      w[59] = hc_bytealign_S (w[58], w[59], offset);
      w[58] = hc_bytealign_S (w[57], w[58], offset);
      w[57] = hc_bytealign_S (w[56], w[57], offset);
      w[56] = hc_bytealign_S (w[55], w[56], offset);
      w[55] = hc_bytealign_S (w[54], w[55], offset);
      w[54] = hc_bytealign_S (w[53], w[54], offset);
      w[53] = hc_bytealign_S (w[52], w[53], offset);
      w[52] = hc_bytealign_S (w[51], w[52], offset);
      w[51] = hc_bytealign_S (w[50], w[51], offset);
      w[50] = hc_bytealign_S (w[49], w[50], offset);
      w[49] = hc_bytealign_S (w[48], w[49], offset);
      w[48] = hc_bytealign_S (w[47], w[48], offset);
      w[47] = hc_bytealign_S (w[46], w[47], offset);
      w[46] = hc_bytealign_S (w[45], w[46], offset);
      w[45] = hc_bytealign_S (w[44], w[45], offset);
      w[44] = hc_bytealign_S (w[43], w[44], offset);
      w[43] = hc_bytealign_S (w[42], w[43], offset);
      w[42] = hc_bytealign_S (w[41], w[42], offset);
      w[41] = hc_bytealign_S (w[40], w[41], offset);
      w[40] = hc_bytealign_S (w[39], w[40], offset);
      w[39] = hc_bytealign_S (w[38], w[39], offset);
      w[38] = hc_bytealign_S (w[37], w[38], offset);
      w[37] = hc_bytealign_S (w[36], w[37], offset);
      w[36] = hc_bytealign_S (w[35], w[36], offset);
      w[35] = hc_bytealign_S (w[34], w[35], offset);
      w[34] = hc_bytealign_S (w[33], w[34], offset);
      w[33] = hc_bytealign_S (w[32], w[33], offset);
      w[32] = hc_bytealign_S (w[31], w[32], offset);
      w[31] = hc_bytealign_S (w[30], w[31], offset);
      w[30] = hc_bytealign_S (w[29], w[30], offset);
      w[29] = hc_bytealign_S (w[28], w[29], offset);
      w[28] = hc_bytealign_S (w[27], w[28], offset);
      w[27] = hc_bytealign_S (w[26], w[27], offset);
      w[26] = hc_bytealign_S (w[25], w[26], offset);
      w[25] = hc_bytealign_S (w[24], w[25], offset);
      w[24] = hc_bytealign_S (w[23], w[24], offset);
      w[23] = hc_bytealign_S (w[22], w[23], offset);
      w[22] = hc_bytealign_S (w[21], w[22], offset);
      w[21] = hc_bytealign_S (w[20], w[21], offset);
      w[20] = hc_bytealign_S (w[19], w[20], offset);
      w[19] = hc_bytealign_S (w[18], w[19], offset);
      w[18] = hc_bytealign_S (w[17], w[18], offset);
      w[17] = hc_bytealign_S (w[16], w[17], offset);
      w[16] = hc_bytealign_S (w[15], w[16], offset);
      w[15] = hc_bytealign_S (w[14], w[15], offset);
      w[14] = hc_bytealign_S (w[13], w[14], offset);
      w[13] = hc_bytealign_S (w[12], w[13], offset);
      w[12] = hc_bytealign_S (w[11], w[12], offset);
      w[11] = hc_bytealign_S (w[10], w[11], offset);
      w[10] = hc_bytealign_S (w[ 9], w[10], offset);
      w[ 9] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[ 8] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[ 7] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 6] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 5] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 4] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 3] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 2] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 1] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 0] = hc_bytealign_S (    0, w[ 0], offset);

      break;

    case  1:
      w[63] = hc_bytealign_S (w[61], w[62], offset);
      w[62] = hc_bytealign_S (w[60], w[61], offset);
      w[61] = hc_bytealign_S (w[59], w[60], offset);
      w[60] = hc_bytealign_S (w[58], w[59], offset);
      w[59] = hc_bytealign_S (w[57], w[58], offset);
      w[58] = hc_bytealign_S (w[56], w[57], offset);
      w[57] = hc_bytealign_S (w[55], w[56], offset);
      w[56] = hc_bytealign_S (w[54], w[55], offset);
      w[55] = hc_bytealign_S (w[53], w[54], offset);
      w[54] = hc_bytealign_S (w[52], w[53], offset);
      w[53] = hc_bytealign_S (w[51], w[52], offset);
      w[52] = hc_bytealign_S (w[50], w[51], offset);
      w[51] = hc_bytealign_S (w[49], w[50], offset);
      w[50] = hc_bytealign_S (w[48], w[49], offset);
      w[49] = hc_bytealign_S (w[47], w[48], offset);
      w[48] = hc_bytealign_S (w[46], w[47], offset);
      w[47] = hc_bytealign_S (w[45], w[46], offset);
      w[46] = hc_bytealign_S (w[44], w[45], offset);
      w[45] = hc_bytealign_S (w[43], w[44], offset);
      w[44] = hc_bytealign_S (w[42], w[43], offset);
      w[43] = hc_bytealign_S (w[41], w[42], offset);
      w[42] = hc_bytealign_S (w[40], w[41], offset);
      w[41] = hc_bytealign_S (w[39], w[40], offset);
      w[40] = hc_bytealign_S (w[38], w[39], offset);
      w[39] = hc_bytealign_S (w[37], w[38], offset);
      w[38] = hc_bytealign_S (w[36], w[37], offset);
      w[37] = hc_bytealign_S (w[35], w[36], offset);
      w[36] = hc_bytealign_S (w[34], w[35], offset);
      w[35] = hc_bytealign_S (w[33], w[34], offset);
      w[34] = hc_bytealign_S (w[32], w[33], offset);
      w[33] = hc_bytealign_S (w[31], w[32], offset);
      w[32] = hc_bytealign_S (w[30], w[31], offset);
      w[31] = hc_bytealign_S (w[29], w[30], offset);
      w[30] = hc_bytealign_S (w[28], w[29], offset);
      w[29] = hc_bytealign_S (w[27], w[28], offset);
      w[28] = hc_bytealign_S (w[26], w[27], offset);
      w[27] = hc_bytealign_S (w[25], w[26], offset);
      w[26] = hc_bytealign_S (w[24], w[25], offset);
      w[25] = hc_bytealign_S (w[23], w[24], offset);
      w[24] = hc_bytealign_S (w[22], w[23], offset);
      w[23] = hc_bytealign_S (w[21], w[22], offset);
      w[22] = hc_bytealign_S (w[20], w[21], offset);
      w[21] = hc_bytealign_S (w[19], w[20], offset);
      w[20] = hc_bytealign_S (w[18], w[19], offset);
      w[19] = hc_bytealign_S (w[17], w[18], offset);
      w[18] = hc_bytealign_S (w[16], w[17], offset);
      w[17] = hc_bytealign_S (w[15], w[16], offset);
      w[16] = hc_bytealign_S (w[14], w[15], offset);
      w[15] = hc_bytealign_S (w[13], w[14], offset);
      w[14] = hc_bytealign_S (w[12], w[13], offset);
      w[13] = hc_bytealign_S (w[11], w[12], offset);
      w[12] = hc_bytealign_S (w[10], w[11], offset);
      w[11] = hc_bytealign_S (w[ 9], w[10], offset);
      w[10] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[ 9] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[ 8] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 7] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 6] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 5] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 4] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 3] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 2] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 1] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 0] = 0;

      break;

    case  2:
      w[63] = hc_bytealign_S (w[60], w[61], offset);
      w[62] = hc_bytealign_S (w[59], w[60], offset);
      w[61] = hc_bytealign_S (w[58], w[59], offset);
      w[60] = hc_bytealign_S (w[57], w[58], offset);
      w[59] = hc_bytealign_S (w[56], w[57], offset);
      w[58] = hc_bytealign_S (w[55], w[56], offset);
      w[57] = hc_bytealign_S (w[54], w[55], offset);
      w[56] = hc_bytealign_S (w[53], w[54], offset);
      w[55] = hc_bytealign_S (w[52], w[53], offset);
      w[54] = hc_bytealign_S (w[51], w[52], offset);
      w[53] = hc_bytealign_S (w[50], w[51], offset);
      w[52] = hc_bytealign_S (w[49], w[50], offset);
      w[51] = hc_bytealign_S (w[48], w[49], offset);
      w[50] = hc_bytealign_S (w[47], w[48], offset);
      w[49] = hc_bytealign_S (w[46], w[47], offset);
      w[48] = hc_bytealign_S (w[45], w[46], offset);
      w[47] = hc_bytealign_S (w[44], w[45], offset);
      w[46] = hc_bytealign_S (w[43], w[44], offset);
      w[45] = hc_bytealign_S (w[42], w[43], offset);
      w[44] = hc_bytealign_S (w[41], w[42], offset);
      w[43] = hc_bytealign_S (w[40], w[41], offset);
      w[42] = hc_bytealign_S (w[39], w[40], offset);
      w[41] = hc_bytealign_S (w[38], w[39], offset);
      w[40] = hc_bytealign_S (w[37], w[38], offset);
      w[39] = hc_bytealign_S (w[36], w[37], offset);
      w[38] = hc_bytealign_S (w[35], w[36], offset);
      w[37] = hc_bytealign_S (w[34], w[35], offset);
      w[36] = hc_bytealign_S (w[33], w[34], offset);
      w[35] = hc_bytealign_S (w[32], w[33], offset);
      w[34] = hc_bytealign_S (w[31], w[32], offset);
      w[33] = hc_bytealign_S (w[30], w[31], offset);
      w[32] = hc_bytealign_S (w[29], w[30], offset);
      w[31] = hc_bytealign_S (w[28], w[29], offset);
      w[30] = hc_bytealign_S (w[27], w[28], offset);
      w[29] = hc_bytealign_S (w[26], w[27], offset);
      w[28] = hc_bytealign_S (w[25], w[26], offset);
      w[27] = hc_bytealign_S (w[24], w[25], offset);
      w[26] = hc_bytealign_S (w[23], w[24], offset);
      w[25] = hc_bytealign_S (w[22], w[23], offset);
      w[24] = hc_bytealign_S (w[21], w[22], offset);
      w[23] = hc_bytealign_S (w[20], w[21], offset);
      w[22] = hc_bytealign_S (w[19], w[20], offset);
      w[21] = hc_bytealign_S (w[18], w[19], offset);
      w[20] = hc_bytealign_S (w[17], w[18], offset);
      w[19] = hc_bytealign_S (w[16], w[17], offset);
      w[18] = hc_bytealign_S (w[15], w[16], offset);
      w[17] = hc_bytealign_S (w[14], w[15], offset);
      w[16] = hc_bytealign_S (w[13], w[14], offset);
      w[15] = hc_bytealign_S (w[12], w[13], offset);
      w[14] = hc_bytealign_S (w[11], w[12], offset);
      w[13] = hc_bytealign_S (w[10], w[11], offset);
      w[12] = hc_bytealign_S (w[ 9], w[10], offset);
      w[11] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[10] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[ 9] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 8] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 7] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 6] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 5] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 4] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 3] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 2] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  3:
      w[63] = hc_bytealign_S (w[59], w[60], offset);
      w[62] = hc_bytealign_S (w[58], w[59], offset);
      w[61] = hc_bytealign_S (w[57], w[58], offset);
      w[60] = hc_bytealign_S (w[56], w[57], offset);
      w[59] = hc_bytealign_S (w[55], w[56], offset);
      w[58] = hc_bytealign_S (w[54], w[55], offset);
      w[57] = hc_bytealign_S (w[53], w[54], offset);
      w[56] = hc_bytealign_S (w[52], w[53], offset);
      w[55] = hc_bytealign_S (w[51], w[52], offset);
      w[54] = hc_bytealign_S (w[50], w[51], offset);
      w[53] = hc_bytealign_S (w[49], w[50], offset);
      w[52] = hc_bytealign_S (w[48], w[49], offset);
      w[51] = hc_bytealign_S (w[47], w[48], offset);
      w[50] = hc_bytealign_S (w[46], w[47], offset);
      w[49] = hc_bytealign_S (w[45], w[46], offset);
      w[48] = hc_bytealign_S (w[44], w[45], offset);
      w[47] = hc_bytealign_S (w[43], w[44], offset);
      w[46] = hc_bytealign_S (w[42], w[43], offset);
      w[45] = hc_bytealign_S (w[41], w[42], offset);
      w[44] = hc_bytealign_S (w[40], w[41], offset);
      w[43] = hc_bytealign_S (w[39], w[40], offset);
      w[42] = hc_bytealign_S (w[38], w[39], offset);
      w[41] = hc_bytealign_S (w[37], w[38], offset);
      w[40] = hc_bytealign_S (w[36], w[37], offset);
      w[39] = hc_bytealign_S (w[35], w[36], offset);
      w[38] = hc_bytealign_S (w[34], w[35], offset);
      w[37] = hc_bytealign_S (w[33], w[34], offset);
      w[36] = hc_bytealign_S (w[32], w[33], offset);
      w[35] = hc_bytealign_S (w[31], w[32], offset);
      w[34] = hc_bytealign_S (w[30], w[31], offset);
      w[33] = hc_bytealign_S (w[29], w[30], offset);
      w[32] = hc_bytealign_S (w[28], w[29], offset);
      w[31] = hc_bytealign_S (w[27], w[28], offset);
      w[30] = hc_bytealign_S (w[26], w[27], offset);
      w[29] = hc_bytealign_S (w[25], w[26], offset);
      w[28] = hc_bytealign_S (w[24], w[25], offset);
      w[27] = hc_bytealign_S (w[23], w[24], offset);
      w[26] = hc_bytealign_S (w[22], w[23], offset);
      w[25] = hc_bytealign_S (w[21], w[22], offset);
      w[24] = hc_bytealign_S (w[20], w[21], offset);
      w[23] = hc_bytealign_S (w[19], w[20], offset);
      w[22] = hc_bytealign_S (w[18], w[19], offset);
      w[21] = hc_bytealign_S (w[17], w[18], offset);
      w[20] = hc_bytealign_S (w[16], w[17], offset);
      w[19] = hc_bytealign_S (w[15], w[16], offset);
      w[18] = hc_bytealign_S (w[14], w[15], offset);
      w[17] = hc_bytealign_S (w[13], w[14], offset);
      w[16] = hc_bytealign_S (w[12], w[13], offset);
      w[15] = hc_bytealign_S (w[11], w[12], offset);
      w[14] = hc_bytealign_S (w[10], w[11], offset);
      w[13] = hc_bytealign_S (w[ 9], w[10], offset);
      w[12] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[11] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[10] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 9] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 8] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 7] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 6] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 5] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 4] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 3] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  4:
      w[63] = hc_bytealign_S (w[58], w[59], offset);
      w[62] = hc_bytealign_S (w[57], w[58], offset);
      w[61] = hc_bytealign_S (w[56], w[57], offset);
      w[60] = hc_bytealign_S (w[55], w[56], offset);
      w[59] = hc_bytealign_S (w[54], w[55], offset);
      w[58] = hc_bytealign_S (w[53], w[54], offset);
      w[57] = hc_bytealign_S (w[52], w[53], offset);
      w[56] = hc_bytealign_S (w[51], w[52], offset);
      w[55] = hc_bytealign_S (w[50], w[51], offset);
      w[54] = hc_bytealign_S (w[49], w[50], offset);
      w[53] = hc_bytealign_S (w[48], w[49], offset);
      w[52] = hc_bytealign_S (w[47], w[48], offset);
      w[51] = hc_bytealign_S (w[46], w[47], offset);
      w[50] = hc_bytealign_S (w[45], w[46], offset);
      w[49] = hc_bytealign_S (w[44], w[45], offset);
      w[48] = hc_bytealign_S (w[43], w[44], offset);
      w[47] = hc_bytealign_S (w[42], w[43], offset);
      w[46] = hc_bytealign_S (w[41], w[42], offset);
      w[45] = hc_bytealign_S (w[40], w[41], offset);
      w[44] = hc_bytealign_S (w[39], w[40], offset);
      w[43] = hc_bytealign_S (w[38], w[39], offset);
      w[42] = hc_bytealign_S (w[37], w[38], offset);
      w[41] = hc_bytealign_S (w[36], w[37], offset);
      w[40] = hc_bytealign_S (w[35], w[36], offset);
      w[39] = hc_bytealign_S (w[34], w[35], offset);
      w[38] = hc_bytealign_S (w[33], w[34], offset);
      w[37] = hc_bytealign_S (w[32], w[33], offset);
      w[36] = hc_bytealign_S (w[31], w[32], offset);
      w[35] = hc_bytealign_S (w[30], w[31], offset);
      w[34] = hc_bytealign_S (w[29], w[30], offset);
      w[33] = hc_bytealign_S (w[28], w[29], offset);
      w[32] = hc_bytealign_S (w[27], w[28], offset);
      w[31] = hc_bytealign_S (w[26], w[27], offset);
      w[30] = hc_bytealign_S (w[25], w[26], offset);
      w[29] = hc_bytealign_S (w[24], w[25], offset);
      w[28] = hc_bytealign_S (w[23], w[24], offset);
      w[27] = hc_bytealign_S (w[22], w[23], offset);
      w[26] = hc_bytealign_S (w[21], w[22], offset);
      w[25] = hc_bytealign_S (w[20], w[21], offset);
      w[24] = hc_bytealign_S (w[19], w[20], offset);
      w[23] = hc_bytealign_S (w[18], w[19], offset);
      w[22] = hc_bytealign_S (w[17], w[18], offset);
      w[21] = hc_bytealign_S (w[16], w[17], offset);
      w[20] = hc_bytealign_S (w[15], w[16], offset);
      w[19] = hc_bytealign_S (w[14], w[15], offset);
      w[18] = hc_bytealign_S (w[13], w[14], offset);
      w[17] = hc_bytealign_S (w[12], w[13], offset);
      w[16] = hc_bytealign_S (w[11], w[12], offset);
      w[15] = hc_bytealign_S (w[10], w[11], offset);
      w[14] = hc_bytealign_S (w[ 9], w[10], offset);
      w[13] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[12] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[11] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[10] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 9] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 8] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 7] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 6] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 5] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 4] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  5:
      w[63] = hc_bytealign_S (w[57], w[58], offset);
      w[62] = hc_bytealign_S (w[56], w[57], offset);
      w[61] = hc_bytealign_S (w[55], w[56], offset);
      w[60] = hc_bytealign_S (w[54], w[55], offset);
      w[59] = hc_bytealign_S (w[53], w[54], offset);
      w[58] = hc_bytealign_S (w[52], w[53], offset);
      w[57] = hc_bytealign_S (w[51], w[52], offset);
      w[56] = hc_bytealign_S (w[50], w[51], offset);
      w[55] = hc_bytealign_S (w[49], w[50], offset);
      w[54] = hc_bytealign_S (w[48], w[49], offset);
      w[53] = hc_bytealign_S (w[47], w[48], offset);
      w[52] = hc_bytealign_S (w[46], w[47], offset);
      w[51] = hc_bytealign_S (w[45], w[46], offset);
      w[50] = hc_bytealign_S (w[44], w[45], offset);
      w[49] = hc_bytealign_S (w[43], w[44], offset);
      w[48] = hc_bytealign_S (w[42], w[43], offset);
      w[47] = hc_bytealign_S (w[41], w[42], offset);
      w[46] = hc_bytealign_S (w[40], w[41], offset);
      w[45] = hc_bytealign_S (w[39], w[40], offset);
      w[44] = hc_bytealign_S (w[38], w[39], offset);
      w[43] = hc_bytealign_S (w[37], w[38], offset);
      w[42] = hc_bytealign_S (w[36], w[37], offset);
      w[41] = hc_bytealign_S (w[35], w[36], offset);
      w[40] = hc_bytealign_S (w[34], w[35], offset);
      w[39] = hc_bytealign_S (w[33], w[34], offset);
      w[38] = hc_bytealign_S (w[32], w[33], offset);
      w[37] = hc_bytealign_S (w[31], w[32], offset);
      w[36] = hc_bytealign_S (w[30], w[31], offset);
      w[35] = hc_bytealign_S (w[29], w[30], offset);
      w[34] = hc_bytealign_S (w[28], w[29], offset);
      w[33] = hc_bytealign_S (w[27], w[28], offset);
      w[32] = hc_bytealign_S (w[26], w[27], offset);
      w[31] = hc_bytealign_S (w[25], w[26], offset);
      w[30] = hc_bytealign_S (w[24], w[25], offset);
      w[29] = hc_bytealign_S (w[23], w[24], offset);
      w[28] = hc_bytealign_S (w[22], w[23], offset);
      w[27] = hc_bytealign_S (w[21], w[22], offset);
      w[26] = hc_bytealign_S (w[20], w[21], offset);
      w[25] = hc_bytealign_S (w[19], w[20], offset);
      w[24] = hc_bytealign_S (w[18], w[19], offset);
      w[23] = hc_bytealign_S (w[17], w[18], offset);
      w[22] = hc_bytealign_S (w[16], w[17], offset);
      w[21] = hc_bytealign_S (w[15], w[16], offset);
      w[20] = hc_bytealign_S (w[14], w[15], offset);
      w[19] = hc_bytealign_S (w[13], w[14], offset);
      w[18] = hc_bytealign_S (w[12], w[13], offset);
      w[17] = hc_bytealign_S (w[11], w[12], offset);
      w[16] = hc_bytealign_S (w[10], w[11], offset);
      w[15] = hc_bytealign_S (w[ 9], w[10], offset);
      w[14] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[13] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[12] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[11] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[10] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 9] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 8] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 7] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 6] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 5] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  6:
      w[63] = hc_bytealign_S (w[56], w[57], offset);
      w[62] = hc_bytealign_S (w[55], w[56], offset);
      w[61] = hc_bytealign_S (w[54], w[55], offset);
      w[60] = hc_bytealign_S (w[53], w[54], offset);
      w[59] = hc_bytealign_S (w[52], w[53], offset);
      w[58] = hc_bytealign_S (w[51], w[52], offset);
      w[57] = hc_bytealign_S (w[50], w[51], offset);
      w[56] = hc_bytealign_S (w[49], w[50], offset);
      w[55] = hc_bytealign_S (w[48], w[49], offset);
      w[54] = hc_bytealign_S (w[47], w[48], offset);
      w[53] = hc_bytealign_S (w[46], w[47], offset);
      w[52] = hc_bytealign_S (w[45], w[46], offset);
      w[51] = hc_bytealign_S (w[44], w[45], offset);
      w[50] = hc_bytealign_S (w[43], w[44], offset);
      w[49] = hc_bytealign_S (w[42], w[43], offset);
      w[48] = hc_bytealign_S (w[41], w[42], offset);
      w[47] = hc_bytealign_S (w[40], w[41], offset);
      w[46] = hc_bytealign_S (w[39], w[40], offset);
      w[45] = hc_bytealign_S (w[38], w[39], offset);
      w[44] = hc_bytealign_S (w[37], w[38], offset);
      w[43] = hc_bytealign_S (w[36], w[37], offset);
      w[42] = hc_bytealign_S (w[35], w[36], offset);
      w[41] = hc_bytealign_S (w[34], w[35], offset);
      w[40] = hc_bytealign_S (w[33], w[34], offset);
      w[39] = hc_bytealign_S (w[32], w[33], offset);
      w[38] = hc_bytealign_S (w[31], w[32], offset);
      w[37] = hc_bytealign_S (w[30], w[31], offset);
      w[36] = hc_bytealign_S (w[29], w[30], offset);
      w[35] = hc_bytealign_S (w[28], w[29], offset);
      w[34] = hc_bytealign_S (w[27], w[28], offset);
      w[33] = hc_bytealign_S (w[26], w[27], offset);
      w[32] = hc_bytealign_S (w[25], w[26], offset);
      w[31] = hc_bytealign_S (w[24], w[25], offset);
      w[30] = hc_bytealign_S (w[23], w[24], offset);
      w[29] = hc_bytealign_S (w[22], w[23], offset);
      w[28] = hc_bytealign_S (w[21], w[22], offset);
      w[27] = hc_bytealign_S (w[20], w[21], offset);
      w[26] = hc_bytealign_S (w[19], w[20], offset);
      w[25] = hc_bytealign_S (w[18], w[19], offset);
      w[24] = hc_bytealign_S (w[17], w[18], offset);
      w[23] = hc_bytealign_S (w[16], w[17], offset);
      w[22] = hc_bytealign_S (w[15], w[16], offset);
      w[21] = hc_bytealign_S (w[14], w[15], offset);
      w[20] = hc_bytealign_S (w[13], w[14], offset);
      w[19] = hc_bytealign_S (w[12], w[13], offset);
      w[18] = hc_bytealign_S (w[11], w[12], offset);
      w[17] = hc_bytealign_S (w[10], w[11], offset);
      w[16] = hc_bytealign_S (w[ 9], w[10], offset);
      w[15] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[14] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[13] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[12] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[11] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[10] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 9] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 8] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 7] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 6] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  7:
      w[63] = hc_bytealign_S (w[55], w[56], offset);
      w[62] = hc_bytealign_S (w[54], w[55], offset);
      w[61] = hc_bytealign_S (w[53], w[54], offset);
      w[60] = hc_bytealign_S (w[52], w[53], offset);
      w[59] = hc_bytealign_S (w[51], w[52], offset);
      w[58] = hc_bytealign_S (w[50], w[51], offset);
      w[57] = hc_bytealign_S (w[49], w[50], offset);
      w[56] = hc_bytealign_S (w[48], w[49], offset);
      w[55] = hc_bytealign_S (w[47], w[48], offset);
      w[54] = hc_bytealign_S (w[46], w[47], offset);
      w[53] = hc_bytealign_S (w[45], w[46], offset);
      w[52] = hc_bytealign_S (w[44], w[45], offset);
      w[51] = hc_bytealign_S (w[43], w[44], offset);
      w[50] = hc_bytealign_S (w[42], w[43], offset);
      w[49] = hc_bytealign_S (w[41], w[42], offset);
      w[48] = hc_bytealign_S (w[40], w[41], offset);
      w[47] = hc_bytealign_S (w[39], w[40], offset);
      w[46] = hc_bytealign_S (w[38], w[39], offset);
      w[45] = hc_bytealign_S (w[37], w[38], offset);
      w[44] = hc_bytealign_S (w[36], w[37], offset);
      w[43] = hc_bytealign_S (w[35], w[36], offset);
      w[42] = hc_bytealign_S (w[34], w[35], offset);
      w[41] = hc_bytealign_S (w[33], w[34], offset);
      w[40] = hc_bytealign_S (w[32], w[33], offset);
      w[39] = hc_bytealign_S (w[31], w[32], offset);
      w[38] = hc_bytealign_S (w[30], w[31], offset);
      w[37] = hc_bytealign_S (w[29], w[30], offset);
      w[36] = hc_bytealign_S (w[28], w[29], offset);
      w[35] = hc_bytealign_S (w[27], w[28], offset);
      w[34] = hc_bytealign_S (w[26], w[27], offset);
      w[33] = hc_bytealign_S (w[25], w[26], offset);
      w[32] = hc_bytealign_S (w[24], w[25], offset);
      w[31] = hc_bytealign_S (w[23], w[24], offset);
      w[30] = hc_bytealign_S (w[22], w[23], offset);
      w[29] = hc_bytealign_S (w[21], w[22], offset);
      w[28] = hc_bytealign_S (w[20], w[21], offset);
      w[27] = hc_bytealign_S (w[19], w[20], offset);
      w[26] = hc_bytealign_S (w[18], w[19], offset);
      w[25] = hc_bytealign_S (w[17], w[18], offset);
      w[24] = hc_bytealign_S (w[16], w[17], offset);
      w[23] = hc_bytealign_S (w[15], w[16], offset);
      w[22] = hc_bytealign_S (w[14], w[15], offset);
      w[21] = hc_bytealign_S (w[13], w[14], offset);
      w[20] = hc_bytealign_S (w[12], w[13], offset);
      w[19] = hc_bytealign_S (w[11], w[12], offset);
      w[18] = hc_bytealign_S (w[10], w[11], offset);
      w[17] = hc_bytealign_S (w[ 9], w[10], offset);
      w[16] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[15] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[14] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[13] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[12] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[11] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[10] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 9] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 8] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 7] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  8:
      w[63] = hc_bytealign_S (w[54], w[55], offset);
      w[62] = hc_bytealign_S (w[53], w[54], offset);
      w[61] = hc_bytealign_S (w[52], w[53], offset);
      w[60] = hc_bytealign_S (w[51], w[52], offset);
      w[59] = hc_bytealign_S (w[50], w[51], offset);
      w[58] = hc_bytealign_S (w[49], w[50], offset);
      w[57] = hc_bytealign_S (w[48], w[49], offset);
      w[56] = hc_bytealign_S (w[47], w[48], offset);
      w[55] = hc_bytealign_S (w[46], w[47], offset);
      w[54] = hc_bytealign_S (w[45], w[46], offset);
      w[53] = hc_bytealign_S (w[44], w[45], offset);
      w[52] = hc_bytealign_S (w[43], w[44], offset);
      w[51] = hc_bytealign_S (w[42], w[43], offset);
      w[50] = hc_bytealign_S (w[41], w[42], offset);
      w[49] = hc_bytealign_S (w[40], w[41], offset);
      w[48] = hc_bytealign_S (w[39], w[40], offset);
      w[47] = hc_bytealign_S (w[38], w[39], offset);
      w[46] = hc_bytealign_S (w[37], w[38], offset);
      w[45] = hc_bytealign_S (w[36], w[37], offset);
      w[44] = hc_bytealign_S (w[35], w[36], offset);
      w[43] = hc_bytealign_S (w[34], w[35], offset);
      w[42] = hc_bytealign_S (w[33], w[34], offset);
      w[41] = hc_bytealign_S (w[32], w[33], offset);
      w[40] = hc_bytealign_S (w[31], w[32], offset);
      w[39] = hc_bytealign_S (w[30], w[31], offset);
      w[38] = hc_bytealign_S (w[29], w[30], offset);
      w[37] = hc_bytealign_S (w[28], w[29], offset);
      w[36] = hc_bytealign_S (w[27], w[28], offset);
      w[35] = hc_bytealign_S (w[26], w[27], offset);
      w[34] = hc_bytealign_S (w[25], w[26], offset);
      w[33] = hc_bytealign_S (w[24], w[25], offset);
      w[32] = hc_bytealign_S (w[23], w[24], offset);
      w[31] = hc_bytealign_S (w[22], w[23], offset);
      w[30] = hc_bytealign_S (w[21], w[22], offset);
      w[29] = hc_bytealign_S (w[20], w[21], offset);
      w[28] = hc_bytealign_S (w[19], w[20], offset);
      w[27] = hc_bytealign_S (w[18], w[19], offset);
      w[26] = hc_bytealign_S (w[17], w[18], offset);
      w[25] = hc_bytealign_S (w[16], w[17], offset);
      w[24] = hc_bytealign_S (w[15], w[16], offset);
      w[23] = hc_bytealign_S (w[14], w[15], offset);
      w[22] = hc_bytealign_S (w[13], w[14], offset);
      w[21] = hc_bytealign_S (w[12], w[13], offset);
      w[20] = hc_bytealign_S (w[11], w[12], offset);
      w[19] = hc_bytealign_S (w[10], w[11], offset);
      w[18] = hc_bytealign_S (w[ 9], w[10], offset);
      w[17] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[16] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[15] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[14] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[13] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[12] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[11] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[10] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 9] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 8] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  9:
      w[63] = hc_bytealign_S (w[53], w[54], offset);
      w[62] = hc_bytealign_S (w[52], w[53], offset);
      w[61] = hc_bytealign_S (w[51], w[52], offset);
      w[60] = hc_bytealign_S (w[50], w[51], offset);
      w[59] = hc_bytealign_S (w[49], w[50], offset);
      w[58] = hc_bytealign_S (w[48], w[49], offset);
      w[57] = hc_bytealign_S (w[47], w[48], offset);
      w[56] = hc_bytealign_S (w[46], w[47], offset);
      w[55] = hc_bytealign_S (w[45], w[46], offset);
      w[54] = hc_bytealign_S (w[44], w[45], offset);
      w[53] = hc_bytealign_S (w[43], w[44], offset);
      w[52] = hc_bytealign_S (w[42], w[43], offset);
      w[51] = hc_bytealign_S (w[41], w[42], offset);
      w[50] = hc_bytealign_S (w[40], w[41], offset);
      w[49] = hc_bytealign_S (w[39], w[40], offset);
      w[48] = hc_bytealign_S (w[38], w[39], offset);
      w[47] = hc_bytealign_S (w[37], w[38], offset);
      w[46] = hc_bytealign_S (w[36], w[37], offset);
      w[45] = hc_bytealign_S (w[35], w[36], offset);
      w[44] = hc_bytealign_S (w[34], w[35], offset);
      w[43] = hc_bytealign_S (w[33], w[34], offset);
      w[42] = hc_bytealign_S (w[32], w[33], offset);
      w[41] = hc_bytealign_S (w[31], w[32], offset);
      w[40] = hc_bytealign_S (w[30], w[31], offset);
      w[39] = hc_bytealign_S (w[29], w[30], offset);
      w[38] = hc_bytealign_S (w[28], w[29], offset);
      w[37] = hc_bytealign_S (w[27], w[28], offset);
      w[36] = hc_bytealign_S (w[26], w[27], offset);
      w[35] = hc_bytealign_S (w[25], w[26], offset);
      w[34] = hc_bytealign_S (w[24], w[25], offset);
      w[33] = hc_bytealign_S (w[23], w[24], offset);
      w[32] = hc_bytealign_S (w[22], w[23], offset);
      w[31] = hc_bytealign_S (w[21], w[22], offset);
      w[30] = hc_bytealign_S (w[20], w[21], offset);
      w[29] = hc_bytealign_S (w[19], w[20], offset);
      w[28] = hc_bytealign_S (w[18], w[19], offset);
      w[27] = hc_bytealign_S (w[17], w[18], offset);
      w[26] = hc_bytealign_S (w[16], w[17], offset);
      w[25] = hc_bytealign_S (w[15], w[16], offset);
      w[24] = hc_bytealign_S (w[14], w[15], offset);
      w[23] = hc_bytealign_S (w[13], w[14], offset);
      w[22] = hc_bytealign_S (w[12], w[13], offset);
      w[21] = hc_bytealign_S (w[11], w[12], offset);
      w[20] = hc_bytealign_S (w[10], w[11], offset);
      w[19] = hc_bytealign_S (w[ 9], w[10], offset);
      w[18] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[17] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[16] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[15] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[14] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[13] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[12] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[11] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[10] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 9] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 10:
      w[63] = hc_bytealign_S (w[52], w[53], offset);
      w[62] = hc_bytealign_S (w[51], w[52], offset);
      w[61] = hc_bytealign_S (w[50], w[51], offset);
      w[60] = hc_bytealign_S (w[49], w[50], offset);
      w[59] = hc_bytealign_S (w[48], w[49], offset);
      w[58] = hc_bytealign_S (w[47], w[48], offset);
      w[57] = hc_bytealign_S (w[46], w[47], offset);
      w[56] = hc_bytealign_S (w[45], w[46], offset);
      w[55] = hc_bytealign_S (w[44], w[45], offset);
      w[54] = hc_bytealign_S (w[43], w[44], offset);
      w[53] = hc_bytealign_S (w[42], w[43], offset);
      w[52] = hc_bytealign_S (w[41], w[42], offset);
      w[51] = hc_bytealign_S (w[40], w[41], offset);
      w[50] = hc_bytealign_S (w[39], w[40], offset);
      w[49] = hc_bytealign_S (w[38], w[39], offset);
      w[48] = hc_bytealign_S (w[37], w[38], offset);
      w[47] = hc_bytealign_S (w[36], w[37], offset);
      w[46] = hc_bytealign_S (w[35], w[36], offset);
      w[45] = hc_bytealign_S (w[34], w[35], offset);
      w[44] = hc_bytealign_S (w[33], w[34], offset);
      w[43] = hc_bytealign_S (w[32], w[33], offset);
      w[42] = hc_bytealign_S (w[31], w[32], offset);
      w[41] = hc_bytealign_S (w[30], w[31], offset);
      w[40] = hc_bytealign_S (w[29], w[30], offset);
      w[39] = hc_bytealign_S (w[28], w[29], offset);
      w[38] = hc_bytealign_S (w[27], w[28], offset);
      w[37] = hc_bytealign_S (w[26], w[27], offset);
      w[36] = hc_bytealign_S (w[25], w[26], offset);
      w[35] = hc_bytealign_S (w[24], w[25], offset);
      w[34] = hc_bytealign_S (w[23], w[24], offset);
      w[33] = hc_bytealign_S (w[22], w[23], offset);
      w[32] = hc_bytealign_S (w[21], w[22], offset);
      w[31] = hc_bytealign_S (w[20], w[21], offset);
      w[30] = hc_bytealign_S (w[19], w[20], offset);
      w[29] = hc_bytealign_S (w[18], w[19], offset);
      w[28] = hc_bytealign_S (w[17], w[18], offset);
      w[27] = hc_bytealign_S (w[16], w[17], offset);
      w[26] = hc_bytealign_S (w[15], w[16], offset);
      w[25] = hc_bytealign_S (w[14], w[15], offset);
      w[24] = hc_bytealign_S (w[13], w[14], offset);
      w[23] = hc_bytealign_S (w[12], w[13], offset);
      w[22] = hc_bytealign_S (w[11], w[12], offset);
      w[21] = hc_bytealign_S (w[10], w[11], offset);
      w[20] = hc_bytealign_S (w[ 9], w[10], offset);
      w[19] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[18] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[17] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[16] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[15] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[14] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[13] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[12] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[11] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[10] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 11:
      w[63] = hc_bytealign_S (w[51], w[52], offset);
      w[62] = hc_bytealign_S (w[50], w[51], offset);
      w[61] = hc_bytealign_S (w[49], w[50], offset);
      w[60] = hc_bytealign_S (w[48], w[49], offset);
      w[59] = hc_bytealign_S (w[47], w[48], offset);
      w[58] = hc_bytealign_S (w[46], w[47], offset);
      w[57] = hc_bytealign_S (w[45], w[46], offset);
      w[56] = hc_bytealign_S (w[44], w[45], offset);
      w[55] = hc_bytealign_S (w[43], w[44], offset);
      w[54] = hc_bytealign_S (w[42], w[43], offset);
      w[53] = hc_bytealign_S (w[41], w[42], offset);
      w[52] = hc_bytealign_S (w[40], w[41], offset);
      w[51] = hc_bytealign_S (w[39], w[40], offset);
      w[50] = hc_bytealign_S (w[38], w[39], offset);
      w[49] = hc_bytealign_S (w[37], w[38], offset);
      w[48] = hc_bytealign_S (w[36], w[37], offset);
      w[47] = hc_bytealign_S (w[35], w[36], offset);
      w[46] = hc_bytealign_S (w[34], w[35], offset);
      w[45] = hc_bytealign_S (w[33], w[34], offset);
      w[44] = hc_bytealign_S (w[32], w[33], offset);
      w[43] = hc_bytealign_S (w[31], w[32], offset);
      w[42] = hc_bytealign_S (w[30], w[31], offset);
      w[41] = hc_bytealign_S (w[29], w[30], offset);
      w[40] = hc_bytealign_S (w[28], w[29], offset);
      w[39] = hc_bytealign_S (w[27], w[28], offset);
      w[38] = hc_bytealign_S (w[26], w[27], offset);
      w[37] = hc_bytealign_S (w[25], w[26], offset);
      w[36] = hc_bytealign_S (w[24], w[25], offset);
      w[35] = hc_bytealign_S (w[23], w[24], offset);
      w[34] = hc_bytealign_S (w[22], w[23], offset);
      w[33] = hc_bytealign_S (w[21], w[22], offset);
      w[32] = hc_bytealign_S (w[20], w[21], offset);
      w[31] = hc_bytealign_S (w[19], w[20], offset);
      w[30] = hc_bytealign_S (w[18], w[19], offset);
      w[29] = hc_bytealign_S (w[17], w[18], offset);
      w[28] = hc_bytealign_S (w[16], w[17], offset);
      w[27] = hc_bytealign_S (w[15], w[16], offset);
      w[26] = hc_bytealign_S (w[14], w[15], offset);
      w[25] = hc_bytealign_S (w[13], w[14], offset);
      w[24] = hc_bytealign_S (w[12], w[13], offset);
      w[23] = hc_bytealign_S (w[11], w[12], offset);
      w[22] = hc_bytealign_S (w[10], w[11], offset);
      w[21] = hc_bytealign_S (w[ 9], w[10], offset);
      w[20] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[19] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[18] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[17] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[16] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[15] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[14] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[13] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[12] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[11] = hc_bytealign_S (    0, w[ 0], offset);
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 12:
      w[63] = hc_bytealign_S (w[50], w[51], offset);
      w[62] = hc_bytealign_S (w[49], w[50], offset);
      w[61] = hc_bytealign_S (w[48], w[49], offset);
      w[60] = hc_bytealign_S (w[47], w[48], offset);
      w[59] = hc_bytealign_S (w[46], w[47], offset);
      w[58] = hc_bytealign_S (w[45], w[46], offset);
      w[57] = hc_bytealign_S (w[44], w[45], offset);
      w[56] = hc_bytealign_S (w[43], w[44], offset);
      w[55] = hc_bytealign_S (w[42], w[43], offset);
      w[54] = hc_bytealign_S (w[41], w[42], offset);
      w[53] = hc_bytealign_S (w[40], w[41], offset);
      w[52] = hc_bytealign_S (w[39], w[40], offset);
      w[51] = hc_bytealign_S (w[38], w[39], offset);
      w[50] = hc_bytealign_S (w[37], w[38], offset);
      w[49] = hc_bytealign_S (w[36], w[37], offset);
      w[48] = hc_bytealign_S (w[35], w[36], offset);
      w[47] = hc_bytealign_S (w[34], w[35], offset);
      w[46] = hc_bytealign_S (w[33], w[34], offset);
      w[45] = hc_bytealign_S (w[32], w[33], offset);
      w[44] = hc_bytealign_S (w[31], w[32], offset);
      w[43] = hc_bytealign_S (w[30], w[31], offset);
      w[42] = hc_bytealign_S (w[29], w[30], offset);
      w[41] = hc_bytealign_S (w[28], w[29], offset);
      w[40] = hc_bytealign_S (w[27], w[28], offset);
      w[39] = hc_bytealign_S (w[26], w[27], offset);
      w[38] = hc_bytealign_S (w[25], w[26], offset);
      w[37] = hc_bytealign_S (w[24], w[25], offset);
      w[36] = hc_bytealign_S (w[23], w[24], offset);
      w[35] = hc_bytealign_S (w[22], w[23], offset);
      w[34] = hc_bytealign_S (w[21], w[22], offset);
      w[33] = hc_bytealign_S (w[20], w[21], offset);
      w[32] = hc_bytealign_S (w[19], w[20], offset);
      w[31] = hc_bytealign_S (w[18], w[19], offset);
      w[30] = hc_bytealign_S (w[17], w[18], offset);
      w[29] = hc_bytealign_S (w[16], w[17], offset);
      w[28] = hc_bytealign_S (w[15], w[16], offset);
      w[27] = hc_bytealign_S (w[14], w[15], offset);
      w[26] = hc_bytealign_S (w[13], w[14], offset);
      w[25] = hc_bytealign_S (w[12], w[13], offset);
      w[24] = hc_bytealign_S (w[11], w[12], offset);
      w[23] = hc_bytealign_S (w[10], w[11], offset);
      w[22] = hc_bytealign_S (w[ 9], w[10], offset);
      w[21] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[20] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[19] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[18] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[17] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[16] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[15] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[14] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[13] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[12] = hc_bytealign_S (    0, w[ 0], offset);
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 13:
      w[63] = hc_bytealign_S (w[49], w[50], offset);
      w[62] = hc_bytealign_S (w[48], w[49], offset);
      w[61] = hc_bytealign_S (w[47], w[48], offset);
      w[60] = hc_bytealign_S (w[46], w[47], offset);
      w[59] = hc_bytealign_S (w[45], w[46], offset);
      w[58] = hc_bytealign_S (w[44], w[45], offset);
      w[57] = hc_bytealign_S (w[43], w[44], offset);
      w[56] = hc_bytealign_S (w[42], w[43], offset);
      w[55] = hc_bytealign_S (w[41], w[42], offset);
      w[54] = hc_bytealign_S (w[40], w[41], offset);
      w[53] = hc_bytealign_S (w[39], w[40], offset);
      w[52] = hc_bytealign_S (w[38], w[39], offset);
      w[51] = hc_bytealign_S (w[37], w[38], offset);
      w[50] = hc_bytealign_S (w[36], w[37], offset);
      w[49] = hc_bytealign_S (w[35], w[36], offset);
      w[48] = hc_bytealign_S (w[34], w[35], offset);
      w[47] = hc_bytealign_S (w[33], w[34], offset);
      w[46] = hc_bytealign_S (w[32], w[33], offset);
      w[45] = hc_bytealign_S (w[31], w[32], offset);
      w[44] = hc_bytealign_S (w[30], w[31], offset);
      w[43] = hc_bytealign_S (w[29], w[30], offset);
      w[42] = hc_bytealign_S (w[28], w[29], offset);
      w[41] = hc_bytealign_S (w[27], w[28], offset);
      w[40] = hc_bytealign_S (w[26], w[27], offset);
      w[39] = hc_bytealign_S (w[25], w[26], offset);
      w[38] = hc_bytealign_S (w[24], w[25], offset);
      w[37] = hc_bytealign_S (w[23], w[24], offset);
      w[36] = hc_bytealign_S (w[22], w[23], offset);
      w[35] = hc_bytealign_S (w[21], w[22], offset);
      w[34] = hc_bytealign_S (w[20], w[21], offset);
      w[33] = hc_bytealign_S (w[19], w[20], offset);
      w[32] = hc_bytealign_S (w[18], w[19], offset);
      w[31] = hc_bytealign_S (w[17], w[18], offset);
      w[30] = hc_bytealign_S (w[16], w[17], offset);
      w[29] = hc_bytealign_S (w[15], w[16], offset);
      w[28] = hc_bytealign_S (w[14], w[15], offset);
      w[27] = hc_bytealign_S (w[13], w[14], offset);
      w[26] = hc_bytealign_S (w[12], w[13], offset);
      w[25] = hc_bytealign_S (w[11], w[12], offset);
      w[24] = hc_bytealign_S (w[10], w[11], offset);
      w[23] = hc_bytealign_S (w[ 9], w[10], offset);
      w[22] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[21] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[20] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[19] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[18] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[17] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[16] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[15] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[14] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[13] = hc_bytealign_S (    0, w[ 0], offset);
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 14:
      w[63] = hc_bytealign_S (w[48], w[49], offset);
      w[62] = hc_bytealign_S (w[47], w[48], offset);
      w[61] = hc_bytealign_S (w[46], w[47], offset);
      w[60] = hc_bytealign_S (w[45], w[46], offset);
      w[59] = hc_bytealign_S (w[44], w[45], offset);
      w[58] = hc_bytealign_S (w[43], w[44], offset);
      w[57] = hc_bytealign_S (w[42], w[43], offset);
      w[56] = hc_bytealign_S (w[41], w[42], offset);
      w[55] = hc_bytealign_S (w[40], w[41], offset);
      w[54] = hc_bytealign_S (w[39], w[40], offset);
      w[53] = hc_bytealign_S (w[38], w[39], offset);
      w[52] = hc_bytealign_S (w[37], w[38], offset);
      w[51] = hc_bytealign_S (w[36], w[37], offset);
      w[50] = hc_bytealign_S (w[35], w[36], offset);
      w[49] = hc_bytealign_S (w[34], w[35], offset);
      w[48] = hc_bytealign_S (w[33], w[34], offset);
      w[47] = hc_bytealign_S (w[32], w[33], offset);
      w[46] = hc_bytealign_S (w[31], w[32], offset);
      w[45] = hc_bytealign_S (w[30], w[31], offset);
      w[44] = hc_bytealign_S (w[29], w[30], offset);
      w[43] = hc_bytealign_S (w[28], w[29], offset);
      w[42] = hc_bytealign_S (w[27], w[28], offset);
      w[41] = hc_bytealign_S (w[26], w[27], offset);
      w[40] = hc_bytealign_S (w[25], w[26], offset);
      w[39] = hc_bytealign_S (w[24], w[25], offset);
      w[38] = hc_bytealign_S (w[23], w[24], offset);
      w[37] = hc_bytealign_S (w[22], w[23], offset);
      w[36] = hc_bytealign_S (w[21], w[22], offset);
      w[35] = hc_bytealign_S (w[20], w[21], offset);
      w[34] = hc_bytealign_S (w[19], w[20], offset);
      w[33] = hc_bytealign_S (w[18], w[19], offset);
      w[32] = hc_bytealign_S (w[17], w[18], offset);
      w[31] = hc_bytealign_S (w[16], w[17], offset);
      w[30] = hc_bytealign_S (w[15], w[16], offset);
      w[29] = hc_bytealign_S (w[14], w[15], offset);
      w[28] = hc_bytealign_S (w[13], w[14], offset);
      w[27] = hc_bytealign_S (w[12], w[13], offset);
      w[26] = hc_bytealign_S (w[11], w[12], offset);
      w[25] = hc_bytealign_S (w[10], w[11], offset);
      w[24] = hc_bytealign_S (w[ 9], w[10], offset);
      w[23] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[22] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[21] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[20] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[19] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[18] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[17] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[16] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[15] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[14] = hc_bytealign_S (    0, w[ 0], offset);
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 15:
      w[63] = hc_bytealign_S (w[47], w[48], offset);
      w[62] = hc_bytealign_S (w[46], w[47], offset);
      w[61] = hc_bytealign_S (w[45], w[46], offset);
      w[60] = hc_bytealign_S (w[44], w[45], offset);
      w[59] = hc_bytealign_S (w[43], w[44], offset);
      w[58] = hc_bytealign_S (w[42], w[43], offset);
      w[57] = hc_bytealign_S (w[41], w[42], offset);
      w[56] = hc_bytealign_S (w[40], w[41], offset);
      w[55] = hc_bytealign_S (w[39], w[40], offset);
      w[54] = hc_bytealign_S (w[38], w[39], offset);
      w[53] = hc_bytealign_S (w[37], w[38], offset);
      w[52] = hc_bytealign_S (w[36], w[37], offset);
      w[51] = hc_bytealign_S (w[35], w[36], offset);
      w[50] = hc_bytealign_S (w[34], w[35], offset);
      w[49] = hc_bytealign_S (w[33], w[34], offset);
      w[48] = hc_bytealign_S (w[32], w[33], offset);
      w[47] = hc_bytealign_S (w[31], w[32], offset);
      w[46] = hc_bytealign_S (w[30], w[31], offset);
      w[45] = hc_bytealign_S (w[29], w[30], offset);
      w[44] = hc_bytealign_S (w[28], w[29], offset);
      w[43] = hc_bytealign_S (w[27], w[28], offset);
      w[42] = hc_bytealign_S (w[26], w[27], offset);
      w[41] = hc_bytealign_S (w[25], w[26], offset);
      w[40] = hc_bytealign_S (w[24], w[25], offset);
      w[39] = hc_bytealign_S (w[23], w[24], offset);
      w[38] = hc_bytealign_S (w[22], w[23], offset);
      w[37] = hc_bytealign_S (w[21], w[22], offset);
      w[36] = hc_bytealign_S (w[20], w[21], offset);
      w[35] = hc_bytealign_S (w[19], w[20], offset);
      w[34] = hc_bytealign_S (w[18], w[19], offset);
      w[33] = hc_bytealign_S (w[17], w[18], offset);
      w[32] = hc_bytealign_S (w[16], w[17], offset);
      w[31] = hc_bytealign_S (w[15], w[16], offset);
      w[30] = hc_bytealign_S (w[14], w[15], offset);
      w[29] = hc_bytealign_S (w[13], w[14], offset);
      w[28] = hc_bytealign_S (w[12], w[13], offset);
      w[27] = hc_bytealign_S (w[11], w[12], offset);
      w[26] = hc_bytealign_S (w[10], w[11], offset);
      w[25] = hc_bytealign_S (w[ 9], w[10], offset);
      w[24] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[23] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[22] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[21] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[20] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[19] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[18] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[17] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[16] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[15] = hc_bytealign_S (    0, w[ 0], offset);
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 16:
      w[63] = hc_bytealign_S (w[46], w[47], offset);
      w[62] = hc_bytealign_S (w[45], w[46], offset);
      w[61] = hc_bytealign_S (w[44], w[45], offset);
      w[60] = hc_bytealign_S (w[43], w[44], offset);
      w[59] = hc_bytealign_S (w[42], w[43], offset);
      w[58] = hc_bytealign_S (w[41], w[42], offset);
      w[57] = hc_bytealign_S (w[40], w[41], offset);
      w[56] = hc_bytealign_S (w[39], w[40], offset);
      w[55] = hc_bytealign_S (w[38], w[39], offset);
      w[54] = hc_bytealign_S (w[37], w[38], offset);
      w[53] = hc_bytealign_S (w[36], w[37], offset);
      w[52] = hc_bytealign_S (w[35], w[36], offset);
      w[51] = hc_bytealign_S (w[34], w[35], offset);
      w[50] = hc_bytealign_S (w[33], w[34], offset);
      w[49] = hc_bytealign_S (w[32], w[33], offset);
      w[48] = hc_bytealign_S (w[31], w[32], offset);
      w[47] = hc_bytealign_S (w[30], w[31], offset);
      w[46] = hc_bytealign_S (w[29], w[30], offset);
      w[45] = hc_bytealign_S (w[28], w[29], offset);
      w[44] = hc_bytealign_S (w[27], w[28], offset);
      w[43] = hc_bytealign_S (w[26], w[27], offset);
      w[42] = hc_bytealign_S (w[25], w[26], offset);
      w[41] = hc_bytealign_S (w[24], w[25], offset);
      w[40] = hc_bytealign_S (w[23], w[24], offset);
      w[39] = hc_bytealign_S (w[22], w[23], offset);
      w[38] = hc_bytealign_S (w[21], w[22], offset);
      w[37] = hc_bytealign_S (w[20], w[21], offset);
      w[36] = hc_bytealign_S (w[19], w[20], offset);
      w[35] = hc_bytealign_S (w[18], w[19], offset);
      w[34] = hc_bytealign_S (w[17], w[18], offset);
      w[33] = hc_bytealign_S (w[16], w[17], offset);
      w[32] = hc_bytealign_S (w[15], w[16], offset);
      w[31] = hc_bytealign_S (w[14], w[15], offset);
      w[30] = hc_bytealign_S (w[13], w[14], offset);
      w[29] = hc_bytealign_S (w[12], w[13], offset);
      w[28] = hc_bytealign_S (w[11], w[12], offset);
      w[27] = hc_bytealign_S (w[10], w[11], offset);
      w[26] = hc_bytealign_S (w[ 9], w[10], offset);
      w[25] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[24] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[23] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[22] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[21] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[20] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[19] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[18] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[17] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[16] = hc_bytealign_S (    0, w[ 0], offset);
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 17:
      w[63] = hc_bytealign_S (w[45], w[46], offset);
      w[62] = hc_bytealign_S (w[44], w[45], offset);
      w[61] = hc_bytealign_S (w[43], w[44], offset);
      w[60] = hc_bytealign_S (w[42], w[43], offset);
      w[59] = hc_bytealign_S (w[41], w[42], offset);
      w[58] = hc_bytealign_S (w[40], w[41], offset);
      w[57] = hc_bytealign_S (w[39], w[40], offset);
      w[56] = hc_bytealign_S (w[38], w[39], offset);
      w[55] = hc_bytealign_S (w[37], w[38], offset);
      w[54] = hc_bytealign_S (w[36], w[37], offset);
      w[53] = hc_bytealign_S (w[35], w[36], offset);
      w[52] = hc_bytealign_S (w[34], w[35], offset);
      w[51] = hc_bytealign_S (w[33], w[34], offset);
      w[50] = hc_bytealign_S (w[32], w[33], offset);
      w[49] = hc_bytealign_S (w[31], w[32], offset);
      w[48] = hc_bytealign_S (w[30], w[31], offset);
      w[47] = hc_bytealign_S (w[29], w[30], offset);
      w[46] = hc_bytealign_S (w[28], w[29], offset);
      w[45] = hc_bytealign_S (w[27], w[28], offset);
      w[44] = hc_bytealign_S (w[26], w[27], offset);
      w[43] = hc_bytealign_S (w[25], w[26], offset);
      w[42] = hc_bytealign_S (w[24], w[25], offset);
      w[41] = hc_bytealign_S (w[23], w[24], offset);
      w[40] = hc_bytealign_S (w[22], w[23], offset);
      w[39] = hc_bytealign_S (w[21], w[22], offset);
      w[38] = hc_bytealign_S (w[20], w[21], offset);
      w[37] = hc_bytealign_S (w[19], w[20], offset);
      w[36] = hc_bytealign_S (w[18], w[19], offset);
      w[35] = hc_bytealign_S (w[17], w[18], offset);
      w[34] = hc_bytealign_S (w[16], w[17], offset);
      w[33] = hc_bytealign_S (w[15], w[16], offset);
      w[32] = hc_bytealign_S (w[14], w[15], offset);
      w[31] = hc_bytealign_S (w[13], w[14], offset);
      w[30] = hc_bytealign_S (w[12], w[13], offset);
      w[29] = hc_bytealign_S (w[11], w[12], offset);
      w[28] = hc_bytealign_S (w[10], w[11], offset);
      w[27] = hc_bytealign_S (w[ 9], w[10], offset);
      w[26] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[25] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[24] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[23] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[22] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[21] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[20] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[19] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[18] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[17] = hc_bytealign_S (    0, w[ 0], offset);
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 18:
      w[63] = hc_bytealign_S (w[44], w[45], offset);
      w[62] = hc_bytealign_S (w[43], w[44], offset);
      w[61] = hc_bytealign_S (w[42], w[43], offset);
      w[60] = hc_bytealign_S (w[41], w[42], offset);
      w[59] = hc_bytealign_S (w[40], w[41], offset);
      w[58] = hc_bytealign_S (w[39], w[40], offset);
      w[57] = hc_bytealign_S (w[38], w[39], offset);
      w[56] = hc_bytealign_S (w[37], w[38], offset);
      w[55] = hc_bytealign_S (w[36], w[37], offset);
      w[54] = hc_bytealign_S (w[35], w[36], offset);
      w[53] = hc_bytealign_S (w[34], w[35], offset);
      w[52] = hc_bytealign_S (w[33], w[34], offset);
      w[51] = hc_bytealign_S (w[32], w[33], offset);
      w[50] = hc_bytealign_S (w[31], w[32], offset);
      w[49] = hc_bytealign_S (w[30], w[31], offset);
      w[48] = hc_bytealign_S (w[29], w[30], offset);
      w[47] = hc_bytealign_S (w[28], w[29], offset);
      w[46] = hc_bytealign_S (w[27], w[28], offset);
      w[45] = hc_bytealign_S (w[26], w[27], offset);
      w[44] = hc_bytealign_S (w[25], w[26], offset);
      w[43] = hc_bytealign_S (w[24], w[25], offset);
      w[42] = hc_bytealign_S (w[23], w[24], offset);
      w[41] = hc_bytealign_S (w[22], w[23], offset);
      w[40] = hc_bytealign_S (w[21], w[22], offset);
      w[39] = hc_bytealign_S (w[20], w[21], offset);
      w[38] = hc_bytealign_S (w[19], w[20], offset);
      w[37] = hc_bytealign_S (w[18], w[19], offset);
      w[36] = hc_bytealign_S (w[17], w[18], offset);
      w[35] = hc_bytealign_S (w[16], w[17], offset);
      w[34] = hc_bytealign_S (w[15], w[16], offset);
      w[33] = hc_bytealign_S (w[14], w[15], offset);
      w[32] = hc_bytealign_S (w[13], w[14], offset);
      w[31] = hc_bytealign_S (w[12], w[13], offset);
      w[30] = hc_bytealign_S (w[11], w[12], offset);
      w[29] = hc_bytealign_S (w[10], w[11], offset);
      w[28] = hc_bytealign_S (w[ 9], w[10], offset);
      w[27] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[26] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[25] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[24] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[23] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[22] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[21] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[20] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[19] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[18] = hc_bytealign_S (    0, w[ 0], offset);
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 19:
      w[63] = hc_bytealign_S (w[43], w[44], offset);
      w[62] = hc_bytealign_S (w[42], w[43], offset);
      w[61] = hc_bytealign_S (w[41], w[42], offset);
      w[60] = hc_bytealign_S (w[40], w[41], offset);
      w[59] = hc_bytealign_S (w[39], w[40], offset);
      w[58] = hc_bytealign_S (w[38], w[39], offset);
      w[57] = hc_bytealign_S (w[37], w[38], offset);
      w[56] = hc_bytealign_S (w[36], w[37], offset);
      w[55] = hc_bytealign_S (w[35], w[36], offset);
      w[54] = hc_bytealign_S (w[34], w[35], offset);
      w[53] = hc_bytealign_S (w[33], w[34], offset);
      w[52] = hc_bytealign_S (w[32], w[33], offset);
      w[51] = hc_bytealign_S (w[31], w[32], offset);
      w[50] = hc_bytealign_S (w[30], w[31], offset);
      w[49] = hc_bytealign_S (w[29], w[30], offset);
      w[48] = hc_bytealign_S (w[28], w[29], offset);
      w[47] = hc_bytealign_S (w[27], w[28], offset);
      w[46] = hc_bytealign_S (w[26], w[27], offset);
      w[45] = hc_bytealign_S (w[25], w[26], offset);
      w[44] = hc_bytealign_S (w[24], w[25], offset);
      w[43] = hc_bytealign_S (w[23], w[24], offset);
      w[42] = hc_bytealign_S (w[22], w[23], offset);
      w[41] = hc_bytealign_S (w[21], w[22], offset);
      w[40] = hc_bytealign_S (w[20], w[21], offset);
      w[39] = hc_bytealign_S (w[19], w[20], offset);
      w[38] = hc_bytealign_S (w[18], w[19], offset);
      w[37] = hc_bytealign_S (w[17], w[18], offset);
      w[36] = hc_bytealign_S (w[16], w[17], offset);
      w[35] = hc_bytealign_S (w[15], w[16], offset);
      w[34] = hc_bytealign_S (w[14], w[15], offset);
      w[33] = hc_bytealign_S (w[13], w[14], offset);
      w[32] = hc_bytealign_S (w[12], w[13], offset);
      w[31] = hc_bytealign_S (w[11], w[12], offset);
      w[30] = hc_bytealign_S (w[10], w[11], offset);
      w[29] = hc_bytealign_S (w[ 9], w[10], offset);
      w[28] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[27] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[26] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[25] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[24] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[23] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[22] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[21] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[20] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[19] = hc_bytealign_S (    0, w[ 0], offset);
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 20:
      w[63] = hc_bytealign_S (w[42], w[43], offset);
      w[62] = hc_bytealign_S (w[41], w[42], offset);
      w[61] = hc_bytealign_S (w[40], w[41], offset);
      w[60] = hc_bytealign_S (w[39], w[40], offset);
      w[59] = hc_bytealign_S (w[38], w[39], offset);
      w[58] = hc_bytealign_S (w[37], w[38], offset);
      w[57] = hc_bytealign_S (w[36], w[37], offset);
      w[56] = hc_bytealign_S (w[35], w[36], offset);
      w[55] = hc_bytealign_S (w[34], w[35], offset);
      w[54] = hc_bytealign_S (w[33], w[34], offset);
      w[53] = hc_bytealign_S (w[32], w[33], offset);
      w[52] = hc_bytealign_S (w[31], w[32], offset);
      w[51] = hc_bytealign_S (w[30], w[31], offset);
      w[50] = hc_bytealign_S (w[29], w[30], offset);
      w[49] = hc_bytealign_S (w[28], w[29], offset);
      w[48] = hc_bytealign_S (w[27], w[28], offset);
      w[47] = hc_bytealign_S (w[26], w[27], offset);
      w[46] = hc_bytealign_S (w[25], w[26], offset);
      w[45] = hc_bytealign_S (w[24], w[25], offset);
      w[44] = hc_bytealign_S (w[23], w[24], offset);
      w[43] = hc_bytealign_S (w[22], w[23], offset);
      w[42] = hc_bytealign_S (w[21], w[22], offset);
      w[41] = hc_bytealign_S (w[20], w[21], offset);
      w[40] = hc_bytealign_S (w[19], w[20], offset);
      w[39] = hc_bytealign_S (w[18], w[19], offset);
      w[38] = hc_bytealign_S (w[17], w[18], offset);
      w[37] = hc_bytealign_S (w[16], w[17], offset);
      w[36] = hc_bytealign_S (w[15], w[16], offset);
      w[35] = hc_bytealign_S (w[14], w[15], offset);
      w[34] = hc_bytealign_S (w[13], w[14], offset);
      w[33] = hc_bytealign_S (w[12], w[13], offset);
      w[32] = hc_bytealign_S (w[11], w[12], offset);
      w[31] = hc_bytealign_S (w[10], w[11], offset);
      w[30] = hc_bytealign_S (w[ 9], w[10], offset);
      w[29] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[28] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[27] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[26] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[25] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[24] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[23] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[22] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[21] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[20] = hc_bytealign_S (    0, w[ 0], offset);
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 21:
      w[63] = hc_bytealign_S (w[41], w[42], offset);
      w[62] = hc_bytealign_S (w[40], w[41], offset);
      w[61] = hc_bytealign_S (w[39], w[40], offset);
      w[60] = hc_bytealign_S (w[38], w[39], offset);
      w[59] = hc_bytealign_S (w[37], w[38], offset);
      w[58] = hc_bytealign_S (w[36], w[37], offset);
      w[57] = hc_bytealign_S (w[35], w[36], offset);
      w[56] = hc_bytealign_S (w[34], w[35], offset);
      w[55] = hc_bytealign_S (w[33], w[34], offset);
      w[54] = hc_bytealign_S (w[32], w[33], offset);
      w[53] = hc_bytealign_S (w[31], w[32], offset);
      w[52] = hc_bytealign_S (w[30], w[31], offset);
      w[51] = hc_bytealign_S (w[29], w[30], offset);
      w[50] = hc_bytealign_S (w[28], w[29], offset);
      w[49] = hc_bytealign_S (w[27], w[28], offset);
      w[48] = hc_bytealign_S (w[26], w[27], offset);
      w[47] = hc_bytealign_S (w[25], w[26], offset);
      w[46] = hc_bytealign_S (w[24], w[25], offset);
      w[45] = hc_bytealign_S (w[23], w[24], offset);
      w[44] = hc_bytealign_S (w[22], w[23], offset);
      w[43] = hc_bytealign_S (w[21], w[22], offset);
      w[42] = hc_bytealign_S (w[20], w[21], offset);
      w[41] = hc_bytealign_S (w[19], w[20], offset);
      w[40] = hc_bytealign_S (w[18], w[19], offset);
      w[39] = hc_bytealign_S (w[17], w[18], offset);
      w[38] = hc_bytealign_S (w[16], w[17], offset);
      w[37] = hc_bytealign_S (w[15], w[16], offset);
      w[36] = hc_bytealign_S (w[14], w[15], offset);
      w[35] = hc_bytealign_S (w[13], w[14], offset);
      w[34] = hc_bytealign_S (w[12], w[13], offset);
      w[33] = hc_bytealign_S (w[11], w[12], offset);
      w[32] = hc_bytealign_S (w[10], w[11], offset);
      w[31] = hc_bytealign_S (w[ 9], w[10], offset);
      w[30] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[29] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[28] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[27] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[26] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[25] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[24] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[23] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[22] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[21] = hc_bytealign_S (    0, w[ 0], offset);
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 22:
      w[63] = hc_bytealign_S (w[40], w[41], offset);
      w[62] = hc_bytealign_S (w[39], w[40], offset);
      w[61] = hc_bytealign_S (w[38], w[39], offset);
      w[60] = hc_bytealign_S (w[37], w[38], offset);
      w[59] = hc_bytealign_S (w[36], w[37], offset);
      w[58] = hc_bytealign_S (w[35], w[36], offset);
      w[57] = hc_bytealign_S (w[34], w[35], offset);
      w[56] = hc_bytealign_S (w[33], w[34], offset);
      w[55] = hc_bytealign_S (w[32], w[33], offset);
      w[54] = hc_bytealign_S (w[31], w[32], offset);
      w[53] = hc_bytealign_S (w[30], w[31], offset);
      w[52] = hc_bytealign_S (w[29], w[30], offset);
      w[51] = hc_bytealign_S (w[28], w[29], offset);
      w[50] = hc_bytealign_S (w[27], w[28], offset);
      w[49] = hc_bytealign_S (w[26], w[27], offset);
      w[48] = hc_bytealign_S (w[25], w[26], offset);
      w[47] = hc_bytealign_S (w[24], w[25], offset);
      w[46] = hc_bytealign_S (w[23], w[24], offset);
      w[45] = hc_bytealign_S (w[22], w[23], offset);
      w[44] = hc_bytealign_S (w[21], w[22], offset);
      w[43] = hc_bytealign_S (w[20], w[21], offset);
      w[42] = hc_bytealign_S (w[19], w[20], offset);
      w[41] = hc_bytealign_S (w[18], w[19], offset);
      w[40] = hc_bytealign_S (w[17], w[18], offset);
      w[39] = hc_bytealign_S (w[16], w[17], offset);
      w[38] = hc_bytealign_S (w[15], w[16], offset);
      w[37] = hc_bytealign_S (w[14], w[15], offset);
      w[36] = hc_bytealign_S (w[13], w[14], offset);
      w[35] = hc_bytealign_S (w[12], w[13], offset);
      w[34] = hc_bytealign_S (w[11], w[12], offset);
      w[33] = hc_bytealign_S (w[10], w[11], offset);
      w[32] = hc_bytealign_S (w[ 9], w[10], offset);
      w[31] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[30] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[29] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[28] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[27] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[26] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[25] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[24] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[23] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[22] = hc_bytealign_S (    0, w[ 0], offset);
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 23:
      w[63] = hc_bytealign_S (w[39], w[40], offset);
      w[62] = hc_bytealign_S (w[38], w[39], offset);
      w[61] = hc_bytealign_S (w[37], w[38], offset);
      w[60] = hc_bytealign_S (w[36], w[37], offset);
      w[59] = hc_bytealign_S (w[35], w[36], offset);
      w[58] = hc_bytealign_S (w[34], w[35], offset);
      w[57] = hc_bytealign_S (w[33], w[34], offset);
      w[56] = hc_bytealign_S (w[32], w[33], offset);
      w[55] = hc_bytealign_S (w[31], w[32], offset);
      w[54] = hc_bytealign_S (w[30], w[31], offset);
      w[53] = hc_bytealign_S (w[29], w[30], offset);
      w[52] = hc_bytealign_S (w[28], w[29], offset);
      w[51] = hc_bytealign_S (w[27], w[28], offset);
      w[50] = hc_bytealign_S (w[26], w[27], offset);
      w[49] = hc_bytealign_S (w[25], w[26], offset);
      w[48] = hc_bytealign_S (w[24], w[25], offset);
      w[47] = hc_bytealign_S (w[23], w[24], offset);
      w[46] = hc_bytealign_S (w[22], w[23], offset);
      w[45] = hc_bytealign_S (w[21], w[22], offset);
      w[44] = hc_bytealign_S (w[20], w[21], offset);
      w[43] = hc_bytealign_S (w[19], w[20], offset);
      w[42] = hc_bytealign_S (w[18], w[19], offset);
      w[41] = hc_bytealign_S (w[17], w[18], offset);
      w[40] = hc_bytealign_S (w[16], w[17], offset);
      w[39] = hc_bytealign_S (w[15], w[16], offset);
      w[38] = hc_bytealign_S (w[14], w[15], offset);
      w[37] = hc_bytealign_S (w[13], w[14], offset);
      w[36] = hc_bytealign_S (w[12], w[13], offset);
      w[35] = hc_bytealign_S (w[11], w[12], offset);
      w[34] = hc_bytealign_S (w[10], w[11], offset);
      w[33] = hc_bytealign_S (w[ 9], w[10], offset);
      w[32] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[31] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[30] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[29] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[28] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[27] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[26] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[25] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[24] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[23] = hc_bytealign_S (    0, w[ 0], offset);
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 24:
      w[63] = hc_bytealign_S (w[38], w[39], offset);
      w[62] = hc_bytealign_S (w[37], w[38], offset);
      w[61] = hc_bytealign_S (w[36], w[37], offset);
      w[60] = hc_bytealign_S (w[35], w[36], offset);
      w[59] = hc_bytealign_S (w[34], w[35], offset);
      w[58] = hc_bytealign_S (w[33], w[34], offset);
      w[57] = hc_bytealign_S (w[32], w[33], offset);
      w[56] = hc_bytealign_S (w[31], w[32], offset);
      w[55] = hc_bytealign_S (w[30], w[31], offset);
      w[54] = hc_bytealign_S (w[29], w[30], offset);
      w[53] = hc_bytealign_S (w[28], w[29], offset);
      w[52] = hc_bytealign_S (w[27], w[28], offset);
      w[51] = hc_bytealign_S (w[26], w[27], offset);
      w[50] = hc_bytealign_S (w[25], w[26], offset);
      w[49] = hc_bytealign_S (w[24], w[25], offset);
      w[48] = hc_bytealign_S (w[23], w[24], offset);
      w[47] = hc_bytealign_S (w[22], w[23], offset);
      w[46] = hc_bytealign_S (w[21], w[22], offset);
      w[45] = hc_bytealign_S (w[20], w[21], offset);
      w[44] = hc_bytealign_S (w[19], w[20], offset);
      w[43] = hc_bytealign_S (w[18], w[19], offset);
      w[42] = hc_bytealign_S (w[17], w[18], offset);
      w[41] = hc_bytealign_S (w[16], w[17], offset);
      w[40] = hc_bytealign_S (w[15], w[16], offset);
      w[39] = hc_bytealign_S (w[14], w[15], offset);
      w[38] = hc_bytealign_S (w[13], w[14], offset);
      w[37] = hc_bytealign_S (w[12], w[13], offset);
      w[36] = hc_bytealign_S (w[11], w[12], offset);
      w[35] = hc_bytealign_S (w[10], w[11], offset);
      w[34] = hc_bytealign_S (w[ 9], w[10], offset);
      w[33] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[32] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[31] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[30] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[29] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[28] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[27] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[26] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[25] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[24] = hc_bytealign_S (    0, w[ 0], offset);
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 25:
      w[63] = hc_bytealign_S (w[37], w[38], offset);
      w[62] = hc_bytealign_S (w[36], w[37], offset);
      w[61] = hc_bytealign_S (w[35], w[36], offset);
      w[60] = hc_bytealign_S (w[34], w[35], offset);
      w[59] = hc_bytealign_S (w[33], w[34], offset);
      w[58] = hc_bytealign_S (w[32], w[33], offset);
      w[57] = hc_bytealign_S (w[31], w[32], offset);
      w[56] = hc_bytealign_S (w[30], w[31], offset);
      w[55] = hc_bytealign_S (w[29], w[30], offset);
      w[54] = hc_bytealign_S (w[28], w[29], offset);
      w[53] = hc_bytealign_S (w[27], w[28], offset);
      w[52] = hc_bytealign_S (w[26], w[27], offset);
      w[51] = hc_bytealign_S (w[25], w[26], offset);
      w[50] = hc_bytealign_S (w[24], w[25], offset);
      w[49] = hc_bytealign_S (w[23], w[24], offset);
      w[48] = hc_bytealign_S (w[22], w[23], offset);
      w[47] = hc_bytealign_S (w[21], w[22], offset);
      w[46] = hc_bytealign_S (w[20], w[21], offset);
      w[45] = hc_bytealign_S (w[19], w[20], offset);
      w[44] = hc_bytealign_S (w[18], w[19], offset);
      w[43] = hc_bytealign_S (w[17], w[18], offset);
      w[42] = hc_bytealign_S (w[16], w[17], offset);
      w[41] = hc_bytealign_S (w[15], w[16], offset);
      w[40] = hc_bytealign_S (w[14], w[15], offset);
      w[39] = hc_bytealign_S (w[13], w[14], offset);
      w[38] = hc_bytealign_S (w[12], w[13], offset);
      w[37] = hc_bytealign_S (w[11], w[12], offset);
      w[36] = hc_bytealign_S (w[10], w[11], offset);
      w[35] = hc_bytealign_S (w[ 9], w[10], offset);
      w[34] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[33] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[32] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[31] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[30] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[29] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[28] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[27] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[26] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[25] = hc_bytealign_S (    0, w[ 0], offset);
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 26:
      w[63] = hc_bytealign_S (w[36], w[37], offset);
      w[62] = hc_bytealign_S (w[35], w[36], offset);
      w[61] = hc_bytealign_S (w[34], w[35], offset);
      w[60] = hc_bytealign_S (w[33], w[34], offset);
      w[59] = hc_bytealign_S (w[32], w[33], offset);
      w[58] = hc_bytealign_S (w[31], w[32], offset);
      w[57] = hc_bytealign_S (w[30], w[31], offset);
      w[56] = hc_bytealign_S (w[29], w[30], offset);
      w[55] = hc_bytealign_S (w[28], w[29], offset);
      w[54] = hc_bytealign_S (w[27], w[28], offset);
      w[53] = hc_bytealign_S (w[26], w[27], offset);
      w[52] = hc_bytealign_S (w[25], w[26], offset);
      w[51] = hc_bytealign_S (w[24], w[25], offset);
      w[50] = hc_bytealign_S (w[23], w[24], offset);
      w[49] = hc_bytealign_S (w[22], w[23], offset);
      w[48] = hc_bytealign_S (w[21], w[22], offset);
      w[47] = hc_bytealign_S (w[20], w[21], offset);
      w[46] = hc_bytealign_S (w[19], w[20], offset);
      w[45] = hc_bytealign_S (w[18], w[19], offset);
      w[44] = hc_bytealign_S (w[17], w[18], offset);
      w[43] = hc_bytealign_S (w[16], w[17], offset);
      w[42] = hc_bytealign_S (w[15], w[16], offset);
      w[41] = hc_bytealign_S (w[14], w[15], offset);
      w[40] = hc_bytealign_S (w[13], w[14], offset);
      w[39] = hc_bytealign_S (w[12], w[13], offset);
      w[38] = hc_bytealign_S (w[11], w[12], offset);
      w[37] = hc_bytealign_S (w[10], w[11], offset);
      w[36] = hc_bytealign_S (w[ 9], w[10], offset);
      w[35] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[34] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[33] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[32] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[31] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[30] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[29] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[28] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[27] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[26] = hc_bytealign_S (    0, w[ 0], offset);
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 27:
      w[63] = hc_bytealign_S (w[35], w[36], offset);
      w[62] = hc_bytealign_S (w[34], w[35], offset);
      w[61] = hc_bytealign_S (w[33], w[34], offset);
      w[60] = hc_bytealign_S (w[32], w[33], offset);
      w[59] = hc_bytealign_S (w[31], w[32], offset);
      w[58] = hc_bytealign_S (w[30], w[31], offset);
      w[57] = hc_bytealign_S (w[29], w[30], offset);
      w[56] = hc_bytealign_S (w[28], w[29], offset);
      w[55] = hc_bytealign_S (w[27], w[28], offset);
      w[54] = hc_bytealign_S (w[26], w[27], offset);
      w[53] = hc_bytealign_S (w[25], w[26], offset);
      w[52] = hc_bytealign_S (w[24], w[25], offset);
      w[51] = hc_bytealign_S (w[23], w[24], offset);
      w[50] = hc_bytealign_S (w[22], w[23], offset);
      w[49] = hc_bytealign_S (w[21], w[22], offset);
      w[48] = hc_bytealign_S (w[20], w[21], offset);
      w[47] = hc_bytealign_S (w[19], w[20], offset);
      w[46] = hc_bytealign_S (w[18], w[19], offset);
      w[45] = hc_bytealign_S (w[17], w[18], offset);
      w[44] = hc_bytealign_S (w[16], w[17], offset);
      w[43] = hc_bytealign_S (w[15], w[16], offset);
      w[42] = hc_bytealign_S (w[14], w[15], offset);
      w[41] = hc_bytealign_S (w[13], w[14], offset);
      w[40] = hc_bytealign_S (w[12], w[13], offset);
      w[39] = hc_bytealign_S (w[11], w[12], offset);
      w[38] = hc_bytealign_S (w[10], w[11], offset);
      w[37] = hc_bytealign_S (w[ 9], w[10], offset);
      w[36] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[35] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[34] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[33] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[32] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[31] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[30] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[29] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[28] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[27] = hc_bytealign_S (    0, w[ 0], offset);
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 28:
      w[63] = hc_bytealign_S (w[34], w[35], offset);
      w[62] = hc_bytealign_S (w[33], w[34], offset);
      w[61] = hc_bytealign_S (w[32], w[33], offset);
      w[60] = hc_bytealign_S (w[31], w[32], offset);
      w[59] = hc_bytealign_S (w[30], w[31], offset);
      w[58] = hc_bytealign_S (w[29], w[30], offset);
      w[57] = hc_bytealign_S (w[28], w[29], offset);
      w[56] = hc_bytealign_S (w[27], w[28], offset);
      w[55] = hc_bytealign_S (w[26], w[27], offset);
      w[54] = hc_bytealign_S (w[25], w[26], offset);
      w[53] = hc_bytealign_S (w[24], w[25], offset);
      w[52] = hc_bytealign_S (w[23], w[24], offset);
      w[51] = hc_bytealign_S (w[22], w[23], offset);
      w[50] = hc_bytealign_S (w[21], w[22], offset);
      w[49] = hc_bytealign_S (w[20], w[21], offset);
      w[48] = hc_bytealign_S (w[19], w[20], offset);
      w[47] = hc_bytealign_S (w[18], w[19], offset);
      w[46] = hc_bytealign_S (w[17], w[18], offset);
      w[45] = hc_bytealign_S (w[16], w[17], offset);
      w[44] = hc_bytealign_S (w[15], w[16], offset);
      w[43] = hc_bytealign_S (w[14], w[15], offset);
      w[42] = hc_bytealign_S (w[13], w[14], offset);
      w[41] = hc_bytealign_S (w[12], w[13], offset);
      w[40] = hc_bytealign_S (w[11], w[12], offset);
      w[39] = hc_bytealign_S (w[10], w[11], offset);
      w[38] = hc_bytealign_S (w[ 9], w[10], offset);
      w[37] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[36] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[35] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[34] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[33] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[32] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[31] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[30] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[29] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[28] = hc_bytealign_S (    0, w[ 0], offset);
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 29:
      w[63] = hc_bytealign_S (w[33], w[34], offset);
      w[62] = hc_bytealign_S (w[32], w[33], offset);
      w[61] = hc_bytealign_S (w[31], w[32], offset);
      w[60] = hc_bytealign_S (w[30], w[31], offset);
      w[59] = hc_bytealign_S (w[29], w[30], offset);
      w[58] = hc_bytealign_S (w[28], w[29], offset);
      w[57] = hc_bytealign_S (w[27], w[28], offset);
      w[56] = hc_bytealign_S (w[26], w[27], offset);
      w[55] = hc_bytealign_S (w[25], w[26], offset);
      w[54] = hc_bytealign_S (w[24], w[25], offset);
      w[53] = hc_bytealign_S (w[23], w[24], offset);
      w[52] = hc_bytealign_S (w[22], w[23], offset);
      w[51] = hc_bytealign_S (w[21], w[22], offset);
      w[50] = hc_bytealign_S (w[20], w[21], offset);
      w[49] = hc_bytealign_S (w[19], w[20], offset);
      w[48] = hc_bytealign_S (w[18], w[19], offset);
      w[47] = hc_bytealign_S (w[17], w[18], offset);
      w[46] = hc_bytealign_S (w[16], w[17], offset);
      w[45] = hc_bytealign_S (w[15], w[16], offset);
      w[44] = hc_bytealign_S (w[14], w[15], offset);
      w[43] = hc_bytealign_S (w[13], w[14], offset);
      w[42] = hc_bytealign_S (w[12], w[13], offset);
      w[41] = hc_bytealign_S (w[11], w[12], offset);
      w[40] = hc_bytealign_S (w[10], w[11], offset);
      w[39] = hc_bytealign_S (w[ 9], w[10], offset);
      w[38] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[37] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[36] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[35] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[34] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[33] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[32] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[31] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[30] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[29] = hc_bytealign_S (    0, w[ 0], offset);
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 30:
      w[63] = hc_bytealign_S (w[32], w[33], offset);
      w[62] = hc_bytealign_S (w[31], w[32], offset);
      w[61] = hc_bytealign_S (w[30], w[31], offset);
      w[60] = hc_bytealign_S (w[29], w[30], offset);
      w[59] = hc_bytealign_S (w[28], w[29], offset);
      w[58] = hc_bytealign_S (w[27], w[28], offset);
      w[57] = hc_bytealign_S (w[26], w[27], offset);
      w[56] = hc_bytealign_S (w[25], w[26], offset);
      w[55] = hc_bytealign_S (w[24], w[25], offset);
      w[54] = hc_bytealign_S (w[23], w[24], offset);
      w[53] = hc_bytealign_S (w[22], w[23], offset);
      w[52] = hc_bytealign_S (w[21], w[22], offset);
      w[51] = hc_bytealign_S (w[20], w[21], offset);
      w[50] = hc_bytealign_S (w[19], w[20], offset);
      w[49] = hc_bytealign_S (w[18], w[19], offset);
      w[48] = hc_bytealign_S (w[17], w[18], offset);
      w[47] = hc_bytealign_S (w[16], w[17], offset);
      w[46] = hc_bytealign_S (w[15], w[16], offset);
      w[45] = hc_bytealign_S (w[14], w[15], offset);
      w[44] = hc_bytealign_S (w[13], w[14], offset);
      w[43] = hc_bytealign_S (w[12], w[13], offset);
      w[42] = hc_bytealign_S (w[11], w[12], offset);
      w[41] = hc_bytealign_S (w[10], w[11], offset);
      w[40] = hc_bytealign_S (w[ 9], w[10], offset);
      w[39] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[38] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[37] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[36] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[35] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[34] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[33] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[32] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[31] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[30] = hc_bytealign_S (    0, w[ 0], offset);
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 31:
      w[63] = hc_bytealign_S (w[31], w[32], offset);
      w[62] = hc_bytealign_S (w[30], w[31], offset);
      w[61] = hc_bytealign_S (w[29], w[30], offset);
      w[60] = hc_bytealign_S (w[28], w[29], offset);
      w[59] = hc_bytealign_S (w[27], w[28], offset);
      w[58] = hc_bytealign_S (w[26], w[27], offset);
      w[57] = hc_bytealign_S (w[25], w[26], offset);
      w[56] = hc_bytealign_S (w[24], w[25], offset);
      w[55] = hc_bytealign_S (w[23], w[24], offset);
      w[54] = hc_bytealign_S (w[22], w[23], offset);
      w[53] = hc_bytealign_S (w[21], w[22], offset);
      w[52] = hc_bytealign_S (w[20], w[21], offset);
      w[51] = hc_bytealign_S (w[19], w[20], offset);
      w[50] = hc_bytealign_S (w[18], w[19], offset);
      w[49] = hc_bytealign_S (w[17], w[18], offset);
      w[48] = hc_bytealign_S (w[16], w[17], offset);
      w[47] = hc_bytealign_S (w[15], w[16], offset);
      w[46] = hc_bytealign_S (w[14], w[15], offset);
      w[45] = hc_bytealign_S (w[13], w[14], offset);
      w[44] = hc_bytealign_S (w[12], w[13], offset);
      w[43] = hc_bytealign_S (w[11], w[12], offset);
      w[42] = hc_bytealign_S (w[10], w[11], offset);
      w[41] = hc_bytealign_S (w[ 9], w[10], offset);
      w[40] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[39] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[38] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[37] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[36] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[35] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[34] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[33] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[32] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[31] = hc_bytealign_S (    0, w[ 0], offset);
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 32:
      w[63] = hc_bytealign_S (w[30], w[31], offset);
      w[62] = hc_bytealign_S (w[29], w[30], offset);
      w[61] = hc_bytealign_S (w[28], w[29], offset);
      w[60] = hc_bytealign_S (w[27], w[28], offset);
      w[59] = hc_bytealign_S (w[26], w[27], offset);
      w[58] = hc_bytealign_S (w[25], w[26], offset);
      w[57] = hc_bytealign_S (w[24], w[25], offset);
      w[56] = hc_bytealign_S (w[23], w[24], offset);
      w[55] = hc_bytealign_S (w[22], w[23], offset);
      w[54] = hc_bytealign_S (w[21], w[22], offset);
      w[53] = hc_bytealign_S (w[20], w[21], offset);
      w[52] = hc_bytealign_S (w[19], w[20], offset);
      w[51] = hc_bytealign_S (w[18], w[19], offset);
      w[50] = hc_bytealign_S (w[17], w[18], offset);
      w[49] = hc_bytealign_S (w[16], w[17], offset);
      w[48] = hc_bytealign_S (w[15], w[16], offset);
      w[47] = hc_bytealign_S (w[14], w[15], offset);
      w[46] = hc_bytealign_S (w[13], w[14], offset);
      w[45] = hc_bytealign_S (w[12], w[13], offset);
      w[44] = hc_bytealign_S (w[11], w[12], offset);
      w[43] = hc_bytealign_S (w[10], w[11], offset);
      w[42] = hc_bytealign_S (w[ 9], w[10], offset);
      w[41] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[40] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[39] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[38] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[37] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[36] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[35] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[34] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[33] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[32] = hc_bytealign_S (    0, w[ 0], offset);
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 33:
      w[63] = hc_bytealign_S (w[29], w[30], offset);
      w[62] = hc_bytealign_S (w[28], w[29], offset);
      w[61] = hc_bytealign_S (w[27], w[28], offset);
      w[60] = hc_bytealign_S (w[26], w[27], offset);
      w[59] = hc_bytealign_S (w[25], w[26], offset);
      w[58] = hc_bytealign_S (w[24], w[25], offset);
      w[57] = hc_bytealign_S (w[23], w[24], offset);
      w[56] = hc_bytealign_S (w[22], w[23], offset);
      w[55] = hc_bytealign_S (w[21], w[22], offset);
      w[54] = hc_bytealign_S (w[20], w[21], offset);
      w[53] = hc_bytealign_S (w[19], w[20], offset);
      w[52] = hc_bytealign_S (w[18], w[19], offset);
      w[51] = hc_bytealign_S (w[17], w[18], offset);
      w[50] = hc_bytealign_S (w[16], w[17], offset);
      w[49] = hc_bytealign_S (w[15], w[16], offset);
      w[48] = hc_bytealign_S (w[14], w[15], offset);
      w[47] = hc_bytealign_S (w[13], w[14], offset);
      w[46] = hc_bytealign_S (w[12], w[13], offset);
      w[45] = hc_bytealign_S (w[11], w[12], offset);
      w[44] = hc_bytealign_S (w[10], w[11], offset);
      w[43] = hc_bytealign_S (w[ 9], w[10], offset);
      w[42] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[41] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[40] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[39] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[38] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[37] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[36] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[35] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[34] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[33] = hc_bytealign_S (    0, w[ 0], offset);
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 34:
      w[63] = hc_bytealign_S (w[28], w[29], offset);
      w[62] = hc_bytealign_S (w[27], w[28], offset);
      w[61] = hc_bytealign_S (w[26], w[27], offset);
      w[60] = hc_bytealign_S (w[25], w[26], offset);
      w[59] = hc_bytealign_S (w[24], w[25], offset);
      w[58] = hc_bytealign_S (w[23], w[24], offset);
      w[57] = hc_bytealign_S (w[22], w[23], offset);
      w[56] = hc_bytealign_S (w[21], w[22], offset);
      w[55] = hc_bytealign_S (w[20], w[21], offset);
      w[54] = hc_bytealign_S (w[19], w[20], offset);
      w[53] = hc_bytealign_S (w[18], w[19], offset);
      w[52] = hc_bytealign_S (w[17], w[18], offset);
      w[51] = hc_bytealign_S (w[16], w[17], offset);
      w[50] = hc_bytealign_S (w[15], w[16], offset);
      w[49] = hc_bytealign_S (w[14], w[15], offset);
      w[48] = hc_bytealign_S (w[13], w[14], offset);
      w[47] = hc_bytealign_S (w[12], w[13], offset);
      w[46] = hc_bytealign_S (w[11], w[12], offset);
      w[45] = hc_bytealign_S (w[10], w[11], offset);
      w[44] = hc_bytealign_S (w[ 9], w[10], offset);
      w[43] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[42] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[41] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[40] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[39] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[38] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[37] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[36] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[35] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[34] = hc_bytealign_S (    0, w[ 0], offset);
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 35:
      w[63] = hc_bytealign_S (w[27], w[28], offset);
      w[62] = hc_bytealign_S (w[26], w[27], offset);
      w[61] = hc_bytealign_S (w[25], w[26], offset);
      w[60] = hc_bytealign_S (w[24], w[25], offset);
      w[59] = hc_bytealign_S (w[23], w[24], offset);
      w[58] = hc_bytealign_S (w[22], w[23], offset);
      w[57] = hc_bytealign_S (w[21], w[22], offset);
      w[56] = hc_bytealign_S (w[20], w[21], offset);
      w[55] = hc_bytealign_S (w[19], w[20], offset);
      w[54] = hc_bytealign_S (w[18], w[19], offset);
      w[53] = hc_bytealign_S (w[17], w[18], offset);
      w[52] = hc_bytealign_S (w[16], w[17], offset);
      w[51] = hc_bytealign_S (w[15], w[16], offset);
      w[50] = hc_bytealign_S (w[14], w[15], offset);
      w[49] = hc_bytealign_S (w[13], w[14], offset);
      w[48] = hc_bytealign_S (w[12], w[13], offset);
      w[47] = hc_bytealign_S (w[11], w[12], offset);
      w[46] = hc_bytealign_S (w[10], w[11], offset);
      w[45] = hc_bytealign_S (w[ 9], w[10], offset);
      w[44] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[43] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[42] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[41] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[40] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[39] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[38] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[37] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[36] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[35] = hc_bytealign_S (    0, w[ 0], offset);
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 36:
      w[63] = hc_bytealign_S (w[26], w[27], offset);
      w[62] = hc_bytealign_S (w[25], w[26], offset);
      w[61] = hc_bytealign_S (w[24], w[25], offset);
      w[60] = hc_bytealign_S (w[23], w[24], offset);
      w[59] = hc_bytealign_S (w[22], w[23], offset);
      w[58] = hc_bytealign_S (w[21], w[22], offset);
      w[57] = hc_bytealign_S (w[20], w[21], offset);
      w[56] = hc_bytealign_S (w[19], w[20], offset);
      w[55] = hc_bytealign_S (w[18], w[19], offset);
      w[54] = hc_bytealign_S (w[17], w[18], offset);
      w[53] = hc_bytealign_S (w[16], w[17], offset);
      w[52] = hc_bytealign_S (w[15], w[16], offset);
      w[51] = hc_bytealign_S (w[14], w[15], offset);
      w[50] = hc_bytealign_S (w[13], w[14], offset);
      w[49] = hc_bytealign_S (w[12], w[13], offset);
      w[48] = hc_bytealign_S (w[11], w[12], offset);
      w[47] = hc_bytealign_S (w[10], w[11], offset);
      w[46] = hc_bytealign_S (w[ 9], w[10], offset);
      w[45] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[44] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[43] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[42] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[41] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[40] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[39] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[38] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[37] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[36] = hc_bytealign_S (    0, w[ 0], offset);
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 37:
      w[63] = hc_bytealign_S (w[25], w[26], offset);
      w[62] = hc_bytealign_S (w[24], w[25], offset);
      w[61] = hc_bytealign_S (w[23], w[24], offset);
      w[60] = hc_bytealign_S (w[22], w[23], offset);
      w[59] = hc_bytealign_S (w[21], w[22], offset);
      w[58] = hc_bytealign_S (w[20], w[21], offset);
      w[57] = hc_bytealign_S (w[19], w[20], offset);
      w[56] = hc_bytealign_S (w[18], w[19], offset);
      w[55] = hc_bytealign_S (w[17], w[18], offset);
      w[54] = hc_bytealign_S (w[16], w[17], offset);
      w[53] = hc_bytealign_S (w[15], w[16], offset);
      w[52] = hc_bytealign_S (w[14], w[15], offset);
      w[51] = hc_bytealign_S (w[13], w[14], offset);
      w[50] = hc_bytealign_S (w[12], w[13], offset);
      w[49] = hc_bytealign_S (w[11], w[12], offset);
      w[48] = hc_bytealign_S (w[10], w[11], offset);
      w[47] = hc_bytealign_S (w[ 9], w[10], offset);
      w[46] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[45] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[44] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[43] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[42] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[41] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[40] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[39] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[38] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[37] = hc_bytealign_S (    0, w[ 0], offset);
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 38:
      w[63] = hc_bytealign_S (w[24], w[25], offset);
      w[62] = hc_bytealign_S (w[23], w[24], offset);
      w[61] = hc_bytealign_S (w[22], w[23], offset);
      w[60] = hc_bytealign_S (w[21], w[22], offset);
      w[59] = hc_bytealign_S (w[20], w[21], offset);
      w[58] = hc_bytealign_S (w[19], w[20], offset);
      w[57] = hc_bytealign_S (w[18], w[19], offset);
      w[56] = hc_bytealign_S (w[17], w[18], offset);
      w[55] = hc_bytealign_S (w[16], w[17], offset);
      w[54] = hc_bytealign_S (w[15], w[16], offset);
      w[53] = hc_bytealign_S (w[14], w[15], offset);
      w[52] = hc_bytealign_S (w[13], w[14], offset);
      w[51] = hc_bytealign_S (w[12], w[13], offset);
      w[50] = hc_bytealign_S (w[11], w[12], offset);
      w[49] = hc_bytealign_S (w[10], w[11], offset);
      w[48] = hc_bytealign_S (w[ 9], w[10], offset);
      w[47] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[46] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[45] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[44] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[43] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[42] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[41] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[40] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[39] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[38] = hc_bytealign_S (    0, w[ 0], offset);
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 39:
      w[63] = hc_bytealign_S (w[23], w[24], offset);
      w[62] = hc_bytealign_S (w[22], w[23], offset);
      w[61] = hc_bytealign_S (w[21], w[22], offset);
      w[60] = hc_bytealign_S (w[20], w[21], offset);
      w[59] = hc_bytealign_S (w[19], w[20], offset);
      w[58] = hc_bytealign_S (w[18], w[19], offset);
      w[57] = hc_bytealign_S (w[17], w[18], offset);
      w[56] = hc_bytealign_S (w[16], w[17], offset);
      w[55] = hc_bytealign_S (w[15], w[16], offset);
      w[54] = hc_bytealign_S (w[14], w[15], offset);
      w[53] = hc_bytealign_S (w[13], w[14], offset);
      w[52] = hc_bytealign_S (w[12], w[13], offset);
      w[51] = hc_bytealign_S (w[11], w[12], offset);
      w[50] = hc_bytealign_S (w[10], w[11], offset);
      w[49] = hc_bytealign_S (w[ 9], w[10], offset);
      w[48] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[47] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[46] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[45] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[44] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[43] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[42] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[41] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[40] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[39] = hc_bytealign_S (    0, w[ 0], offset);
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 40:
      w[63] = hc_bytealign_S (w[22], w[23], offset);
      w[62] = hc_bytealign_S (w[21], w[22], offset);
      w[61] = hc_bytealign_S (w[20], w[21], offset);
      w[60] = hc_bytealign_S (w[19], w[20], offset);
      w[59] = hc_bytealign_S (w[18], w[19], offset);
      w[58] = hc_bytealign_S (w[17], w[18], offset);
      w[57] = hc_bytealign_S (w[16], w[17], offset);
      w[56] = hc_bytealign_S (w[15], w[16], offset);
      w[55] = hc_bytealign_S (w[14], w[15], offset);
      w[54] = hc_bytealign_S (w[13], w[14], offset);
      w[53] = hc_bytealign_S (w[12], w[13], offset);
      w[52] = hc_bytealign_S (w[11], w[12], offset);
      w[51] = hc_bytealign_S (w[10], w[11], offset);
      w[50] = hc_bytealign_S (w[ 9], w[10], offset);
      w[49] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[48] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[47] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[46] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[45] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[44] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[43] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[42] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[41] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[40] = hc_bytealign_S (    0, w[ 0], offset);
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 41:
      w[63] = hc_bytealign_S (w[21], w[22], offset);
      w[62] = hc_bytealign_S (w[20], w[21], offset);
      w[61] = hc_bytealign_S (w[19], w[20], offset);
      w[60] = hc_bytealign_S (w[18], w[19], offset);
      w[59] = hc_bytealign_S (w[17], w[18], offset);
      w[58] = hc_bytealign_S (w[16], w[17], offset);
      w[57] = hc_bytealign_S (w[15], w[16], offset);
      w[56] = hc_bytealign_S (w[14], w[15], offset);
      w[55] = hc_bytealign_S (w[13], w[14], offset);
      w[54] = hc_bytealign_S (w[12], w[13], offset);
      w[53] = hc_bytealign_S (w[11], w[12], offset);
      w[52] = hc_bytealign_S (w[10], w[11], offset);
      w[51] = hc_bytealign_S (w[ 9], w[10], offset);
      w[50] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[49] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[48] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[47] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[46] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[45] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[44] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[43] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[42] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[41] = hc_bytealign_S (    0, w[ 0], offset);
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 42:
      w[63] = hc_bytealign_S (w[20], w[21], offset);
      w[62] = hc_bytealign_S (w[19], w[20], offset);
      w[61] = hc_bytealign_S (w[18], w[19], offset);
      w[60] = hc_bytealign_S (w[17], w[18], offset);
      w[59] = hc_bytealign_S (w[16], w[17], offset);
      w[58] = hc_bytealign_S (w[15], w[16], offset);
      w[57] = hc_bytealign_S (w[14], w[15], offset);
      w[56] = hc_bytealign_S (w[13], w[14], offset);
      w[55] = hc_bytealign_S (w[12], w[13], offset);
      w[54] = hc_bytealign_S (w[11], w[12], offset);
      w[53] = hc_bytealign_S (w[10], w[11], offset);
      w[52] = hc_bytealign_S (w[ 9], w[10], offset);
      w[51] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[50] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[49] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[48] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[47] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[46] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[45] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[44] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[43] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[42] = hc_bytealign_S (    0, w[ 0], offset);
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 43:
      w[63] = hc_bytealign_S (w[19], w[20], offset);
      w[62] = hc_bytealign_S (w[18], w[19], offset);
      w[61] = hc_bytealign_S (w[17], w[18], offset);
      w[60] = hc_bytealign_S (w[16], w[17], offset);
      w[59] = hc_bytealign_S (w[15], w[16], offset);
      w[58] = hc_bytealign_S (w[14], w[15], offset);
      w[57] = hc_bytealign_S (w[13], w[14], offset);
      w[56] = hc_bytealign_S (w[12], w[13], offset);
      w[55] = hc_bytealign_S (w[11], w[12], offset);
      w[54] = hc_bytealign_S (w[10], w[11], offset);
      w[53] = hc_bytealign_S (w[ 9], w[10], offset);
      w[52] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[51] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[50] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[49] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[48] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[47] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[46] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[45] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[44] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[43] = hc_bytealign_S (    0, w[ 0], offset);
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 44:
      w[63] = hc_bytealign_S (w[18], w[19], offset);
      w[62] = hc_bytealign_S (w[17], w[18], offset);
      w[61] = hc_bytealign_S (w[16], w[17], offset);
      w[60] = hc_bytealign_S (w[15], w[16], offset);
      w[59] = hc_bytealign_S (w[14], w[15], offset);
      w[58] = hc_bytealign_S (w[13], w[14], offset);
      w[57] = hc_bytealign_S (w[12], w[13], offset);
      w[56] = hc_bytealign_S (w[11], w[12], offset);
      w[55] = hc_bytealign_S (w[10], w[11], offset);
      w[54] = hc_bytealign_S (w[ 9], w[10], offset);
      w[53] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[52] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[51] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[50] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[49] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[48] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[47] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[46] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[45] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[44] = hc_bytealign_S (    0, w[ 0], offset);
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 45:
      w[63] = hc_bytealign_S (w[17], w[18], offset);
      w[62] = hc_bytealign_S (w[16], w[17], offset);
      w[61] = hc_bytealign_S (w[15], w[16], offset);
      w[60] = hc_bytealign_S (w[14], w[15], offset);
      w[59] = hc_bytealign_S (w[13], w[14], offset);
      w[58] = hc_bytealign_S (w[12], w[13], offset);
      w[57] = hc_bytealign_S (w[11], w[12], offset);
      w[56] = hc_bytealign_S (w[10], w[11], offset);
      w[55] = hc_bytealign_S (w[ 9], w[10], offset);
      w[54] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[53] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[52] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[51] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[50] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[49] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[48] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[47] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[46] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[45] = hc_bytealign_S (    0, w[ 0], offset);
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 46:
      w[63] = hc_bytealign_S (w[16], w[17], offset);
      w[62] = hc_bytealign_S (w[15], w[16], offset);
      w[61] = hc_bytealign_S (w[14], w[15], offset);
      w[60] = hc_bytealign_S (w[13], w[14], offset);
      w[59] = hc_bytealign_S (w[12], w[13], offset);
      w[58] = hc_bytealign_S (w[11], w[12], offset);
      w[57] = hc_bytealign_S (w[10], w[11], offset);
      w[56] = hc_bytealign_S (w[ 9], w[10], offset);
      w[55] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[54] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[53] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[52] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[51] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[50] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[49] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[48] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[47] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[46] = hc_bytealign_S (    0, w[ 0], offset);
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 47:
      w[63] = hc_bytealign_S (w[15], w[16], offset);
      w[62] = hc_bytealign_S (w[14], w[15], offset);
      w[61] = hc_bytealign_S (w[13], w[14], offset);
      w[60] = hc_bytealign_S (w[12], w[13], offset);
      w[59] = hc_bytealign_S (w[11], w[12], offset);
      w[58] = hc_bytealign_S (w[10], w[11], offset);
      w[57] = hc_bytealign_S (w[ 9], w[10], offset);
      w[56] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[55] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[54] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[53] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[52] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[51] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[50] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[49] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[48] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[47] = hc_bytealign_S (    0, w[ 0], offset);
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 48:
      w[63] = hc_bytealign_S (w[14], w[15], offset);
      w[62] = hc_bytealign_S (w[13], w[14], offset);
      w[61] = hc_bytealign_S (w[12], w[13], offset);
      w[60] = hc_bytealign_S (w[11], w[12], offset);
      w[59] = hc_bytealign_S (w[10], w[11], offset);
      w[58] = hc_bytealign_S (w[ 9], w[10], offset);
      w[57] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[56] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[55] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[54] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[53] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[52] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[51] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[50] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[49] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[48] = hc_bytealign_S (    0, w[ 0], offset);
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 49:
      w[63] = hc_bytealign_S (w[13], w[14], offset);
      w[62] = hc_bytealign_S (w[12], w[13], offset);
      w[61] = hc_bytealign_S (w[11], w[12], offset);
      w[60] = hc_bytealign_S (w[10], w[11], offset);
      w[59] = hc_bytealign_S (w[ 9], w[10], offset);
      w[58] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[57] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[56] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[55] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[54] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[53] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[52] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[51] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[50] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[49] = hc_bytealign_S (    0, w[ 0], offset);
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 50:
      w[63] = hc_bytealign_S (w[12], w[13], offset);
      w[62] = hc_bytealign_S (w[11], w[12], offset);
      w[61] = hc_bytealign_S (w[10], w[11], offset);
      w[60] = hc_bytealign_S (w[ 9], w[10], offset);
      w[59] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[58] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[57] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[56] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[55] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[54] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[53] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[52] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[51] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[50] = hc_bytealign_S (    0, w[ 0], offset);
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 51:
      w[63] = hc_bytealign_S (w[11], w[12], offset);
      w[62] = hc_bytealign_S (w[10], w[11], offset);
      w[61] = hc_bytealign_S (w[ 9], w[10], offset);
      w[60] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[59] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[58] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[57] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[56] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[55] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[54] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[53] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[52] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[51] = hc_bytealign_S (    0, w[ 0], offset);
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 52:
      w[63] = hc_bytealign_S (w[10], w[11], offset);
      w[62] = hc_bytealign_S (w[ 9], w[10], offset);
      w[61] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[60] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[59] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[58] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[57] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[56] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[55] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[54] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[53] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[52] = hc_bytealign_S (    0, w[ 0], offset);
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 53:
      w[63] = hc_bytealign_S (w[ 9], w[10], offset);
      w[62] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[61] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[60] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[59] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[58] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[57] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[56] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[55] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[54] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[53] = hc_bytealign_S (    0, w[ 0], offset);
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 54:
      w[63] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[62] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[61] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[60] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[59] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[58] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[57] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[56] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[55] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[54] = hc_bytealign_S (    0, w[ 0], offset);
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 55:
      w[63] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[62] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[61] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[60] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[59] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[58] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[57] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[56] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[55] = hc_bytealign_S (    0, w[ 0], offset);
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 56:
      w[63] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[62] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[61] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[60] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[59] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[58] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[57] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[56] = hc_bytealign_S (    0, w[ 0], offset);
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 57:
      w[63] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[62] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[61] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[60] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[59] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[58] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[57] = hc_bytealign_S (    0, w[ 0], offset);
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 58:
      w[63] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[62] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[61] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[60] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[59] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[58] = hc_bytealign_S (    0, w[ 0], offset);
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 59:
      w[63] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[62] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[61] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[60] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[59] = hc_bytealign_S (    0, w[ 0], offset);
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 60:
      w[63] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[62] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[61] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[60] = hc_bytealign_S (    0, w[ 0], offset);
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 61:
      w[63] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[62] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[61] = hc_bytealign_S (    0, w[ 0], offset);
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 62:
      w[63] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[62] = hc_bytealign_S (    0, w[ 0], offset);
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 63:
      w[63] = hc_bytealign_S (    0, w[ 0], offset);
      w[62] = 0;
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;
  }

  #pragma unroll
  for (int i = 0; i < 64; i++) w[i] = swap32_S (w[i]);

  #endif

  #if (defined IS_AMD && AMD_GCN >= 3) || defined IS_NV

  #if defined IS_NV
  const int selector = (0x76543210 >> (offset_minus_4 * 4)) & 0xffff;
  #endif

  #if defined IS_AMD
  const int selector = 0x0706050403020100 >> (offset_minus_4 * 8);
  #endif

  switch (offset_switch)
  {
    case  0:
      w[63] = hc_byte_perm_S (w[62], w[63], selector);
      w[62] = hc_byte_perm_S (w[61], w[62], selector);
      w[61] = hc_byte_perm_S (w[60], w[61], selector);
      w[60] = hc_byte_perm_S (w[59], w[60], selector);
      w[59] = hc_byte_perm_S (w[58], w[59], selector);
      w[58] = hc_byte_perm_S (w[57], w[58], selector);
      w[57] = hc_byte_perm_S (w[56], w[57], selector);
      w[56] = hc_byte_perm_S (w[55], w[56], selector);
      w[55] = hc_byte_perm_S (w[54], w[55], selector);
      w[54] = hc_byte_perm_S (w[53], w[54], selector);
      w[53] = hc_byte_perm_S (w[52], w[53], selector);
      w[52] = hc_byte_perm_S (w[51], w[52], selector);
      w[51] = hc_byte_perm_S (w[50], w[51], selector);
      w[50] = hc_byte_perm_S (w[49], w[50], selector);
      w[49] = hc_byte_perm_S (w[48], w[49], selector);
      w[48] = hc_byte_perm_S (w[47], w[48], selector);
      w[47] = hc_byte_perm_S (w[46], w[47], selector);
      w[46] = hc_byte_perm_S (w[45], w[46], selector);
      w[45] = hc_byte_perm_S (w[44], w[45], selector);
      w[44] = hc_byte_perm_S (w[43], w[44], selector);
      w[43] = hc_byte_perm_S (w[42], w[43], selector);
      w[42] = hc_byte_perm_S (w[41], w[42], selector);
      w[41] = hc_byte_perm_S (w[40], w[41], selector);
      w[40] = hc_byte_perm_S (w[39], w[40], selector);
      w[39] = hc_byte_perm_S (w[38], w[39], selector);
      w[38] = hc_byte_perm_S (w[37], w[38], selector);
      w[37] = hc_byte_perm_S (w[36], w[37], selector);
      w[36] = hc_byte_perm_S (w[35], w[36], selector);
      w[35] = hc_byte_perm_S (w[34], w[35], selector);
      w[34] = hc_byte_perm_S (w[33], w[34], selector);
      w[33] = hc_byte_perm_S (w[32], w[33], selector);
      w[32] = hc_byte_perm_S (w[31], w[32], selector);
      w[31] = hc_byte_perm_S (w[30], w[31], selector);
      w[30] = hc_byte_perm_S (w[29], w[30], selector);
      w[29] = hc_byte_perm_S (w[28], w[29], selector);
      w[28] = hc_byte_perm_S (w[27], w[28], selector);
      w[27] = hc_byte_perm_S (w[26], w[27], selector);
      w[26] = hc_byte_perm_S (w[25], w[26], selector);
      w[25] = hc_byte_perm_S (w[24], w[25], selector);
      w[24] = hc_byte_perm_S (w[23], w[24], selector);
      w[23] = hc_byte_perm_S (w[22], w[23], selector);
      w[22] = hc_byte_perm_S (w[21], w[22], selector);
      w[21] = hc_byte_perm_S (w[20], w[21], selector);
      w[20] = hc_byte_perm_S (w[19], w[20], selector);
      w[19] = hc_byte_perm_S (w[18], w[19], selector);
      w[18] = hc_byte_perm_S (w[17], w[18], selector);
      w[17] = hc_byte_perm_S (w[16], w[17], selector);
      w[16] = hc_byte_perm_S (w[15], w[16], selector);
      w[15] = hc_byte_perm_S (w[14], w[15], selector);
      w[14] = hc_byte_perm_S (w[13], w[14], selector);
      w[13] = hc_byte_perm_S (w[12], w[13], selector);
      w[12] = hc_byte_perm_S (w[11], w[12], selector);
      w[11] = hc_byte_perm_S (w[10], w[11], selector);
      w[10] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[ 9] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[ 8] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[ 7] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[ 6] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[ 5] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[ 4] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[ 3] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 2] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 1] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 0] = hc_byte_perm_S (    0, w[ 0], selector);

      break;

    case  1:
      w[63] = hc_byte_perm_S (w[61], w[62], selector);
      w[62] = hc_byte_perm_S (w[60], w[61], selector);
      w[61] = hc_byte_perm_S (w[59], w[60], selector);
      w[60] = hc_byte_perm_S (w[58], w[59], selector);
      w[59] = hc_byte_perm_S (w[57], w[58], selector);
      w[58] = hc_byte_perm_S (w[56], w[57], selector);
      w[57] = hc_byte_perm_S (w[55], w[56], selector);
      w[56] = hc_byte_perm_S (w[54], w[55], selector);
      w[55] = hc_byte_perm_S (w[53], w[54], selector);
      w[54] = hc_byte_perm_S (w[52], w[53], selector);
      w[53] = hc_byte_perm_S (w[51], w[52], selector);
      w[52] = hc_byte_perm_S (w[50], w[51], selector);
      w[51] = hc_byte_perm_S (w[49], w[50], selector);
      w[50] = hc_byte_perm_S (w[48], w[49], selector);
      w[49] = hc_byte_perm_S (w[47], w[48], selector);
      w[48] = hc_byte_perm_S (w[46], w[47], selector);
      w[47] = hc_byte_perm_S (w[45], w[46], selector);
      w[46] = hc_byte_perm_S (w[44], w[45], selector);
      w[45] = hc_byte_perm_S (w[43], w[44], selector);
      w[44] = hc_byte_perm_S (w[42], w[43], selector);
      w[43] = hc_byte_perm_S (w[41], w[42], selector);
      w[42] = hc_byte_perm_S (w[40], w[41], selector);
      w[41] = hc_byte_perm_S (w[39], w[40], selector);
      w[40] = hc_byte_perm_S (w[38], w[39], selector);
      w[39] = hc_byte_perm_S (w[37], w[38], selector);
      w[38] = hc_byte_perm_S (w[36], w[37], selector);
      w[37] = hc_byte_perm_S (w[35], w[36], selector);
      w[36] = hc_byte_perm_S (w[34], w[35], selector);
      w[35] = hc_byte_perm_S (w[33], w[34], selector);
      w[34] = hc_byte_perm_S (w[32], w[33], selector);
      w[33] = hc_byte_perm_S (w[31], w[32], selector);
      w[32] = hc_byte_perm_S (w[30], w[31], selector);
      w[31] = hc_byte_perm_S (w[29], w[30], selector);
      w[30] = hc_byte_perm_S (w[28], w[29], selector);
      w[29] = hc_byte_perm_S (w[27], w[28], selector);
      w[28] = hc_byte_perm_S (w[26], w[27], selector);
      w[27] = hc_byte_perm_S (w[25], w[26], selector);
      w[26] = hc_byte_perm_S (w[24], w[25], selector);
      w[25] = hc_byte_perm_S (w[23], w[24], selector);
      w[24] = hc_byte_perm_S (w[22], w[23], selector);
      w[23] = hc_byte_perm_S (w[21], w[22], selector);
      w[22] = hc_byte_perm_S (w[20], w[21], selector);
      w[21] = hc_byte_perm_S (w[19], w[20], selector);
      w[20] = hc_byte_perm_S (w[18], w[19], selector);
      w[19] = hc_byte_perm_S (w[17], w[18], selector);
      w[18] = hc_byte_perm_S (w[16], w[17], selector);
      w[17] = hc_byte_perm_S (w[15], w[16], selector);
      w[16] = hc_byte_perm_S (w[14], w[15], selector);
      w[15] = hc_byte_perm_S (w[13], w[14], selector);
      w[14] = hc_byte_perm_S (w[12], w[13], selector);
      w[13] = hc_byte_perm_S (w[11], w[12], selector);
      w[12] = hc_byte_perm_S (w[10], w[11], selector);
      w[11] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[10] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[ 9] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[ 8] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[ 7] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[ 6] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[ 5] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[ 4] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 3] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 2] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 1] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 0] = 0;

      break;

    case  2:
      w[63] = hc_byte_perm_S (w[60], w[61], selector);
      w[62] = hc_byte_perm_S (w[59], w[60], selector);
      w[61] = hc_byte_perm_S (w[58], w[59], selector);
      w[60] = hc_byte_perm_S (w[57], w[58], selector);
      w[59] = hc_byte_perm_S (w[56], w[57], selector);
      w[58] = hc_byte_perm_S (w[55], w[56], selector);
      w[57] = hc_byte_perm_S (w[54], w[55], selector);
      w[56] = hc_byte_perm_S (w[53], w[54], selector);
      w[55] = hc_byte_perm_S (w[52], w[53], selector);
      w[54] = hc_byte_perm_S (w[51], w[52], selector);
      w[53] = hc_byte_perm_S (w[50], w[51], selector);
      w[52] = hc_byte_perm_S (w[49], w[50], selector);
      w[51] = hc_byte_perm_S (w[48], w[49], selector);
      w[50] = hc_byte_perm_S (w[47], w[48], selector);
      w[49] = hc_byte_perm_S (w[46], w[47], selector);
      w[48] = hc_byte_perm_S (w[45], w[46], selector);
      w[47] = hc_byte_perm_S (w[44], w[45], selector);
      w[46] = hc_byte_perm_S (w[43], w[44], selector);
      w[45] = hc_byte_perm_S (w[42], w[43], selector);
      w[44] = hc_byte_perm_S (w[41], w[42], selector);
      w[43] = hc_byte_perm_S (w[40], w[41], selector);
      w[42] = hc_byte_perm_S (w[39], w[40], selector);
      w[41] = hc_byte_perm_S (w[38], w[39], selector);
      w[40] = hc_byte_perm_S (w[37], w[38], selector);
      w[39] = hc_byte_perm_S (w[36], w[37], selector);
      w[38] = hc_byte_perm_S (w[35], w[36], selector);
      w[37] = hc_byte_perm_S (w[34], w[35], selector);
      w[36] = hc_byte_perm_S (w[33], w[34], selector);
      w[35] = hc_byte_perm_S (w[32], w[33], selector);
      w[34] = hc_byte_perm_S (w[31], w[32], selector);
      w[33] = hc_byte_perm_S (w[30], w[31], selector);
      w[32] = hc_byte_perm_S (w[29], w[30], selector);
      w[31] = hc_byte_perm_S (w[28], w[29], selector);
      w[30] = hc_byte_perm_S (w[27], w[28], selector);
      w[29] = hc_byte_perm_S (w[26], w[27], selector);
      w[28] = hc_byte_perm_S (w[25], w[26], selector);
      w[27] = hc_byte_perm_S (w[24], w[25], selector);
      w[26] = hc_byte_perm_S (w[23], w[24], selector);
      w[25] = hc_byte_perm_S (w[22], w[23], selector);
      w[24] = hc_byte_perm_S (w[21], w[22], selector);
      w[23] = hc_byte_perm_S (w[20], w[21], selector);
      w[22] = hc_byte_perm_S (w[19], w[20], selector);
      w[21] = hc_byte_perm_S (w[18], w[19], selector);
      w[20] = hc_byte_perm_S (w[17], w[18], selector);
      w[19] = hc_byte_perm_S (w[16], w[17], selector);
      w[18] = hc_byte_perm_S (w[15], w[16], selector);
      w[17] = hc_byte_perm_S (w[14], w[15], selector);
      w[16] = hc_byte_perm_S (w[13], w[14], selector);
      w[15] = hc_byte_perm_S (w[12], w[13], selector);
      w[14] = hc_byte_perm_S (w[11], w[12], selector);
      w[13] = hc_byte_perm_S (w[10], w[11], selector);
      w[12] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[11] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[10] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[ 9] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[ 8] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[ 7] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[ 6] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[ 5] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 4] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 3] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 2] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  3:
      w[63] = hc_byte_perm_S (w[59], w[60], selector);
      w[62] = hc_byte_perm_S (w[58], w[59], selector);
      w[61] = hc_byte_perm_S (w[57], w[58], selector);
      w[60] = hc_byte_perm_S (w[56], w[57], selector);
      w[59] = hc_byte_perm_S (w[55], w[56], selector);
      w[58] = hc_byte_perm_S (w[54], w[55], selector);
      w[57] = hc_byte_perm_S (w[53], w[54], selector);
      w[56] = hc_byte_perm_S (w[52], w[53], selector);
      w[55] = hc_byte_perm_S (w[51], w[52], selector);
      w[54] = hc_byte_perm_S (w[50], w[51], selector);
      w[53] = hc_byte_perm_S (w[49], w[50], selector);
      w[52] = hc_byte_perm_S (w[48], w[49], selector);
      w[51] = hc_byte_perm_S (w[47], w[48], selector);
      w[50] = hc_byte_perm_S (w[46], w[47], selector);
      w[49] = hc_byte_perm_S (w[45], w[46], selector);
      w[48] = hc_byte_perm_S (w[44], w[45], selector);
      w[47] = hc_byte_perm_S (w[43], w[44], selector);
      w[46] = hc_byte_perm_S (w[42], w[43], selector);
      w[45] = hc_byte_perm_S (w[41], w[42], selector);
      w[44] = hc_byte_perm_S (w[40], w[41], selector);
      w[43] = hc_byte_perm_S (w[39], w[40], selector);
      w[42] = hc_byte_perm_S (w[38], w[39], selector);
      w[41] = hc_byte_perm_S (w[37], w[38], selector);
      w[40] = hc_byte_perm_S (w[36], w[37], selector);
      w[39] = hc_byte_perm_S (w[35], w[36], selector);
      w[38] = hc_byte_perm_S (w[34], w[35], selector);
      w[37] = hc_byte_perm_S (w[33], w[34], selector);
      w[36] = hc_byte_perm_S (w[32], w[33], selector);
      w[35] = hc_byte_perm_S (w[31], w[32], selector);
      w[34] = hc_byte_perm_S (w[30], w[31], selector);
      w[33] = hc_byte_perm_S (w[29], w[30], selector);
      w[32] = hc_byte_perm_S (w[28], w[29], selector);
      w[31] = hc_byte_perm_S (w[27], w[28], selector);
      w[30] = hc_byte_perm_S (w[26], w[27], selector);
      w[29] = hc_byte_perm_S (w[25], w[26], selector);
      w[28] = hc_byte_perm_S (w[24], w[25], selector);
      w[27] = hc_byte_perm_S (w[23], w[24], selector);
      w[26] = hc_byte_perm_S (w[22], w[23], selector);
      w[25] = hc_byte_perm_S (w[21], w[22], selector);
      w[24] = hc_byte_perm_S (w[20], w[21], selector);
      w[23] = hc_byte_perm_S (w[19], w[20], selector);
      w[22] = hc_byte_perm_S (w[18], w[19], selector);
      w[21] = hc_byte_perm_S (w[17], w[18], selector);
      w[20] = hc_byte_perm_S (w[16], w[17], selector);
      w[19] = hc_byte_perm_S (w[15], w[16], selector);
      w[18] = hc_byte_perm_S (w[14], w[15], selector);
      w[17] = hc_byte_perm_S (w[13], w[14], selector);
      w[16] = hc_byte_perm_S (w[12], w[13], selector);
      w[15] = hc_byte_perm_S (w[11], w[12], selector);
      w[14] = hc_byte_perm_S (w[10], w[11], selector);
      w[13] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[12] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[11] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[10] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[ 9] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[ 8] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[ 7] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[ 6] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 5] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 4] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 3] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  4:
      w[63] = hc_byte_perm_S (w[58], w[59], selector);
      w[62] = hc_byte_perm_S (w[57], w[58], selector);
      w[61] = hc_byte_perm_S (w[56], w[57], selector);
      w[60] = hc_byte_perm_S (w[55], w[56], selector);
      w[59] = hc_byte_perm_S (w[54], w[55], selector);
      w[58] = hc_byte_perm_S (w[53], w[54], selector);
      w[57] = hc_byte_perm_S (w[52], w[53], selector);
      w[56] = hc_byte_perm_S (w[51], w[52], selector);
      w[55] = hc_byte_perm_S (w[50], w[51], selector);
      w[54] = hc_byte_perm_S (w[49], w[50], selector);
      w[53] = hc_byte_perm_S (w[48], w[49], selector);
      w[52] = hc_byte_perm_S (w[47], w[48], selector);
      w[51] = hc_byte_perm_S (w[46], w[47], selector);
      w[50] = hc_byte_perm_S (w[45], w[46], selector);
      w[49] = hc_byte_perm_S (w[44], w[45], selector);
      w[48] = hc_byte_perm_S (w[43], w[44], selector);
      w[47] = hc_byte_perm_S (w[42], w[43], selector);
      w[46] = hc_byte_perm_S (w[41], w[42], selector);
      w[45] = hc_byte_perm_S (w[40], w[41], selector);
      w[44] = hc_byte_perm_S (w[39], w[40], selector);
      w[43] = hc_byte_perm_S (w[38], w[39], selector);
      w[42] = hc_byte_perm_S (w[37], w[38], selector);
      w[41] = hc_byte_perm_S (w[36], w[37], selector);
      w[40] = hc_byte_perm_S (w[35], w[36], selector);
      w[39] = hc_byte_perm_S (w[34], w[35], selector);
      w[38] = hc_byte_perm_S (w[33], w[34], selector);
      w[37] = hc_byte_perm_S (w[32], w[33], selector);
      w[36] = hc_byte_perm_S (w[31], w[32], selector);
      w[35] = hc_byte_perm_S (w[30], w[31], selector);
      w[34] = hc_byte_perm_S (w[29], w[30], selector);
      w[33] = hc_byte_perm_S (w[28], w[29], selector);
      w[32] = hc_byte_perm_S (w[27], w[28], selector);
      w[31] = hc_byte_perm_S (w[26], w[27], selector);
      w[30] = hc_byte_perm_S (w[25], w[26], selector);
      w[29] = hc_byte_perm_S (w[24], w[25], selector);
      w[28] = hc_byte_perm_S (w[23], w[24], selector);
      w[27] = hc_byte_perm_S (w[22], w[23], selector);
      w[26] = hc_byte_perm_S (w[21], w[22], selector);
      w[25] = hc_byte_perm_S (w[20], w[21], selector);
      w[24] = hc_byte_perm_S (w[19], w[20], selector);
      w[23] = hc_byte_perm_S (w[18], w[19], selector);
      w[22] = hc_byte_perm_S (w[17], w[18], selector);
      w[21] = hc_byte_perm_S (w[16], w[17], selector);
      w[20] = hc_byte_perm_S (w[15], w[16], selector);
      w[19] = hc_byte_perm_S (w[14], w[15], selector);
      w[18] = hc_byte_perm_S (w[13], w[14], selector);
      w[17] = hc_byte_perm_S (w[12], w[13], selector);
      w[16] = hc_byte_perm_S (w[11], w[12], selector);
      w[15] = hc_byte_perm_S (w[10], w[11], selector);
      w[14] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[13] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[12] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[11] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[10] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[ 9] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[ 8] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[ 7] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 6] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 5] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 4] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  5:
      w[63] = hc_byte_perm_S (w[57], w[58], selector);
      w[62] = hc_byte_perm_S (w[56], w[57], selector);
      w[61] = hc_byte_perm_S (w[55], w[56], selector);
      w[60] = hc_byte_perm_S (w[54], w[55], selector);
      w[59] = hc_byte_perm_S (w[53], w[54], selector);
      w[58] = hc_byte_perm_S (w[52], w[53], selector);
      w[57] = hc_byte_perm_S (w[51], w[52], selector);
      w[56] = hc_byte_perm_S (w[50], w[51], selector);
      w[55] = hc_byte_perm_S (w[49], w[50], selector);
      w[54] = hc_byte_perm_S (w[48], w[49], selector);
      w[53] = hc_byte_perm_S (w[47], w[48], selector);
      w[52] = hc_byte_perm_S (w[46], w[47], selector);
      w[51] = hc_byte_perm_S (w[45], w[46], selector);
      w[50] = hc_byte_perm_S (w[44], w[45], selector);
      w[49] = hc_byte_perm_S (w[43], w[44], selector);
      w[48] = hc_byte_perm_S (w[42], w[43], selector);
      w[47] = hc_byte_perm_S (w[41], w[42], selector);
      w[46] = hc_byte_perm_S (w[40], w[41], selector);
      w[45] = hc_byte_perm_S (w[39], w[40], selector);
      w[44] = hc_byte_perm_S (w[38], w[39], selector);
      w[43] = hc_byte_perm_S (w[37], w[38], selector);
      w[42] = hc_byte_perm_S (w[36], w[37], selector);
      w[41] = hc_byte_perm_S (w[35], w[36], selector);
      w[40] = hc_byte_perm_S (w[34], w[35], selector);
      w[39] = hc_byte_perm_S (w[33], w[34], selector);
      w[38] = hc_byte_perm_S (w[32], w[33], selector);
      w[37] = hc_byte_perm_S (w[31], w[32], selector);
      w[36] = hc_byte_perm_S (w[30], w[31], selector);
      w[35] = hc_byte_perm_S (w[29], w[30], selector);
      w[34] = hc_byte_perm_S (w[28], w[29], selector);
      w[33] = hc_byte_perm_S (w[27], w[28], selector);
      w[32] = hc_byte_perm_S (w[26], w[27], selector);
      w[31] = hc_byte_perm_S (w[25], w[26], selector);
      w[30] = hc_byte_perm_S (w[24], w[25], selector);
      w[29] = hc_byte_perm_S (w[23], w[24], selector);
      w[28] = hc_byte_perm_S (w[22], w[23], selector);
      w[27] = hc_byte_perm_S (w[21], w[22], selector);
      w[26] = hc_byte_perm_S (w[20], w[21], selector);
      w[25] = hc_byte_perm_S (w[19], w[20], selector);
      w[24] = hc_byte_perm_S (w[18], w[19], selector);
      w[23] = hc_byte_perm_S (w[17], w[18], selector);
      w[22] = hc_byte_perm_S (w[16], w[17], selector);
      w[21] = hc_byte_perm_S (w[15], w[16], selector);
      w[20] = hc_byte_perm_S (w[14], w[15], selector);
      w[19] = hc_byte_perm_S (w[13], w[14], selector);
      w[18] = hc_byte_perm_S (w[12], w[13], selector);
      w[17] = hc_byte_perm_S (w[11], w[12], selector);
      w[16] = hc_byte_perm_S (w[10], w[11], selector);
      w[15] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[14] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[13] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[12] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[11] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[10] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[ 9] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[ 8] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 7] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 6] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 5] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  6:
      w[63] = hc_byte_perm_S (w[56], w[57], selector);
      w[62] = hc_byte_perm_S (w[55], w[56], selector);
      w[61] = hc_byte_perm_S (w[54], w[55], selector);
      w[60] = hc_byte_perm_S (w[53], w[54], selector);
      w[59] = hc_byte_perm_S (w[52], w[53], selector);
      w[58] = hc_byte_perm_S (w[51], w[52], selector);
      w[57] = hc_byte_perm_S (w[50], w[51], selector);
      w[56] = hc_byte_perm_S (w[49], w[50], selector);
      w[55] = hc_byte_perm_S (w[48], w[49], selector);
      w[54] = hc_byte_perm_S (w[47], w[48], selector);
      w[53] = hc_byte_perm_S (w[46], w[47], selector);
      w[52] = hc_byte_perm_S (w[45], w[46], selector);
      w[51] = hc_byte_perm_S (w[44], w[45], selector);
      w[50] = hc_byte_perm_S (w[43], w[44], selector);
      w[49] = hc_byte_perm_S (w[42], w[43], selector);
      w[48] = hc_byte_perm_S (w[41], w[42], selector);
      w[47] = hc_byte_perm_S (w[40], w[41], selector);
      w[46] = hc_byte_perm_S (w[39], w[40], selector);
      w[45] = hc_byte_perm_S (w[38], w[39], selector);
      w[44] = hc_byte_perm_S (w[37], w[38], selector);
      w[43] = hc_byte_perm_S (w[36], w[37], selector);
      w[42] = hc_byte_perm_S (w[35], w[36], selector);
      w[41] = hc_byte_perm_S (w[34], w[35], selector);
      w[40] = hc_byte_perm_S (w[33], w[34], selector);
      w[39] = hc_byte_perm_S (w[32], w[33], selector);
      w[38] = hc_byte_perm_S (w[31], w[32], selector);
      w[37] = hc_byte_perm_S (w[30], w[31], selector);
      w[36] = hc_byte_perm_S (w[29], w[30], selector);
      w[35] = hc_byte_perm_S (w[28], w[29], selector);
      w[34] = hc_byte_perm_S (w[27], w[28], selector);
      w[33] = hc_byte_perm_S (w[26], w[27], selector);
      w[32] = hc_byte_perm_S (w[25], w[26], selector);
      w[31] = hc_byte_perm_S (w[24], w[25], selector);
      w[30] = hc_byte_perm_S (w[23], w[24], selector);
      w[29] = hc_byte_perm_S (w[22], w[23], selector);
      w[28] = hc_byte_perm_S (w[21], w[22], selector);
      w[27] = hc_byte_perm_S (w[20], w[21], selector);
      w[26] = hc_byte_perm_S (w[19], w[20], selector);
      w[25] = hc_byte_perm_S (w[18], w[19], selector);
      w[24] = hc_byte_perm_S (w[17], w[18], selector);
      w[23] = hc_byte_perm_S (w[16], w[17], selector);
      w[22] = hc_byte_perm_S (w[15], w[16], selector);
      w[21] = hc_byte_perm_S (w[14], w[15], selector);
      w[20] = hc_byte_perm_S (w[13], w[14], selector);
      w[19] = hc_byte_perm_S (w[12], w[13], selector);
      w[18] = hc_byte_perm_S (w[11], w[12], selector);
      w[17] = hc_byte_perm_S (w[10], w[11], selector);
      w[16] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[15] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[14] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[13] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[12] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[11] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[10] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[ 9] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 8] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 7] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 6] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  7:
      w[63] = hc_byte_perm_S (w[55], w[56], selector);
      w[62] = hc_byte_perm_S (w[54], w[55], selector);
      w[61] = hc_byte_perm_S (w[53], w[54], selector);
      w[60] = hc_byte_perm_S (w[52], w[53], selector);
      w[59] = hc_byte_perm_S (w[51], w[52], selector);
      w[58] = hc_byte_perm_S (w[50], w[51], selector);
      w[57] = hc_byte_perm_S (w[49], w[50], selector);
      w[56] = hc_byte_perm_S (w[48], w[49], selector);
      w[55] = hc_byte_perm_S (w[47], w[48], selector);
      w[54] = hc_byte_perm_S (w[46], w[47], selector);
      w[53] = hc_byte_perm_S (w[45], w[46], selector);
      w[52] = hc_byte_perm_S (w[44], w[45], selector);
      w[51] = hc_byte_perm_S (w[43], w[44], selector);
      w[50] = hc_byte_perm_S (w[42], w[43], selector);
      w[49] = hc_byte_perm_S (w[41], w[42], selector);
      w[48] = hc_byte_perm_S (w[40], w[41], selector);
      w[47] = hc_byte_perm_S (w[39], w[40], selector);
      w[46] = hc_byte_perm_S (w[38], w[39], selector);
      w[45] = hc_byte_perm_S (w[37], w[38], selector);
      w[44] = hc_byte_perm_S (w[36], w[37], selector);
      w[43] = hc_byte_perm_S (w[35], w[36], selector);
      w[42] = hc_byte_perm_S (w[34], w[35], selector);
      w[41] = hc_byte_perm_S (w[33], w[34], selector);
      w[40] = hc_byte_perm_S (w[32], w[33], selector);
      w[39] = hc_byte_perm_S (w[31], w[32], selector);
      w[38] = hc_byte_perm_S (w[30], w[31], selector);
      w[37] = hc_byte_perm_S (w[29], w[30], selector);
      w[36] = hc_byte_perm_S (w[28], w[29], selector);
      w[35] = hc_byte_perm_S (w[27], w[28], selector);
      w[34] = hc_byte_perm_S (w[26], w[27], selector);
      w[33] = hc_byte_perm_S (w[25], w[26], selector);
      w[32] = hc_byte_perm_S (w[24], w[25], selector);
      w[31] = hc_byte_perm_S (w[23], w[24], selector);
      w[30] = hc_byte_perm_S (w[22], w[23], selector);
      w[29] = hc_byte_perm_S (w[21], w[22], selector);
      w[28] = hc_byte_perm_S (w[20], w[21], selector);
      w[27] = hc_byte_perm_S (w[19], w[20], selector);
      w[26] = hc_byte_perm_S (w[18], w[19], selector);
      w[25] = hc_byte_perm_S (w[17], w[18], selector);
      w[24] = hc_byte_perm_S (w[16], w[17], selector);
      w[23] = hc_byte_perm_S (w[15], w[16], selector);
      w[22] = hc_byte_perm_S (w[14], w[15], selector);
      w[21] = hc_byte_perm_S (w[13], w[14], selector);
      w[20] = hc_byte_perm_S (w[12], w[13], selector);
      w[19] = hc_byte_perm_S (w[11], w[12], selector);
      w[18] = hc_byte_perm_S (w[10], w[11], selector);
      w[17] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[16] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[15] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[14] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[13] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[12] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[11] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[10] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[ 9] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 8] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 7] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  8:
      w[63] = hc_byte_perm_S (w[54], w[55], selector);
      w[62] = hc_byte_perm_S (w[53], w[54], selector);
      w[61] = hc_byte_perm_S (w[52], w[53], selector);
      w[60] = hc_byte_perm_S (w[51], w[52], selector);
      w[59] = hc_byte_perm_S (w[50], w[51], selector);
      w[58] = hc_byte_perm_S (w[49], w[50], selector);
      w[57] = hc_byte_perm_S (w[48], w[49], selector);
      w[56] = hc_byte_perm_S (w[47], w[48], selector);
      w[55] = hc_byte_perm_S (w[46], w[47], selector);
      w[54] = hc_byte_perm_S (w[45], w[46], selector);
      w[53] = hc_byte_perm_S (w[44], w[45], selector);
      w[52] = hc_byte_perm_S (w[43], w[44], selector);
      w[51] = hc_byte_perm_S (w[42], w[43], selector);
      w[50] = hc_byte_perm_S (w[41], w[42], selector);
      w[49] = hc_byte_perm_S (w[40], w[41], selector);
      w[48] = hc_byte_perm_S (w[39], w[40], selector);
      w[47] = hc_byte_perm_S (w[38], w[39], selector);
      w[46] = hc_byte_perm_S (w[37], w[38], selector);
      w[45] = hc_byte_perm_S (w[36], w[37], selector);
      w[44] = hc_byte_perm_S (w[35], w[36], selector);
      w[43] = hc_byte_perm_S (w[34], w[35], selector);
      w[42] = hc_byte_perm_S (w[33], w[34], selector);
      w[41] = hc_byte_perm_S (w[32], w[33], selector);
      w[40] = hc_byte_perm_S (w[31], w[32], selector);
      w[39] = hc_byte_perm_S (w[30], w[31], selector);
      w[38] = hc_byte_perm_S (w[29], w[30], selector);
      w[37] = hc_byte_perm_S (w[28], w[29], selector);
      w[36] = hc_byte_perm_S (w[27], w[28], selector);
      w[35] = hc_byte_perm_S (w[26], w[27], selector);
      w[34] = hc_byte_perm_S (w[25], w[26], selector);
      w[33] = hc_byte_perm_S (w[24], w[25], selector);
      w[32] = hc_byte_perm_S (w[23], w[24], selector);
      w[31] = hc_byte_perm_S (w[22], w[23], selector);
      w[30] = hc_byte_perm_S (w[21], w[22], selector);
      w[29] = hc_byte_perm_S (w[20], w[21], selector);
      w[28] = hc_byte_perm_S (w[19], w[20], selector);
      w[27] = hc_byte_perm_S (w[18], w[19], selector);
      w[26] = hc_byte_perm_S (w[17], w[18], selector);
      w[25] = hc_byte_perm_S (w[16], w[17], selector);
      w[24] = hc_byte_perm_S (w[15], w[16], selector);
      w[23] = hc_byte_perm_S (w[14], w[15], selector);
      w[22] = hc_byte_perm_S (w[13], w[14], selector);
      w[21] = hc_byte_perm_S (w[12], w[13], selector);
      w[20] = hc_byte_perm_S (w[11], w[12], selector);
      w[19] = hc_byte_perm_S (w[10], w[11], selector);
      w[18] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[17] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[16] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[15] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[14] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[13] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[12] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[11] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[10] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[ 9] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 8] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  9:
      w[63] = hc_byte_perm_S (w[53], w[54], selector);
      w[62] = hc_byte_perm_S (w[52], w[53], selector);
      w[61] = hc_byte_perm_S (w[51], w[52], selector);
      w[60] = hc_byte_perm_S (w[50], w[51], selector);
      w[59] = hc_byte_perm_S (w[49], w[50], selector);
      w[58] = hc_byte_perm_S (w[48], w[49], selector);
      w[57] = hc_byte_perm_S (w[47], w[48], selector);
      w[56] = hc_byte_perm_S (w[46], w[47], selector);
      w[55] = hc_byte_perm_S (w[45], w[46], selector);
      w[54] = hc_byte_perm_S (w[44], w[45], selector);
      w[53] = hc_byte_perm_S (w[43], w[44], selector);
      w[52] = hc_byte_perm_S (w[42], w[43], selector);
      w[51] = hc_byte_perm_S (w[41], w[42], selector);
      w[50] = hc_byte_perm_S (w[40], w[41], selector);
      w[49] = hc_byte_perm_S (w[39], w[40], selector);
      w[48] = hc_byte_perm_S (w[38], w[39], selector);
      w[47] = hc_byte_perm_S (w[37], w[38], selector);
      w[46] = hc_byte_perm_S (w[36], w[37], selector);
      w[45] = hc_byte_perm_S (w[35], w[36], selector);
      w[44] = hc_byte_perm_S (w[34], w[35], selector);
      w[43] = hc_byte_perm_S (w[33], w[34], selector);
      w[42] = hc_byte_perm_S (w[32], w[33], selector);
      w[41] = hc_byte_perm_S (w[31], w[32], selector);
      w[40] = hc_byte_perm_S (w[30], w[31], selector);
      w[39] = hc_byte_perm_S (w[29], w[30], selector);
      w[38] = hc_byte_perm_S (w[28], w[29], selector);
      w[37] = hc_byte_perm_S (w[27], w[28], selector);
      w[36] = hc_byte_perm_S (w[26], w[27], selector);
      w[35] = hc_byte_perm_S (w[25], w[26], selector);
      w[34] = hc_byte_perm_S (w[24], w[25], selector);
      w[33] = hc_byte_perm_S (w[23], w[24], selector);
      w[32] = hc_byte_perm_S (w[22], w[23], selector);
      w[31] = hc_byte_perm_S (w[21], w[22], selector);
      w[30] = hc_byte_perm_S (w[20], w[21], selector);
      w[29] = hc_byte_perm_S (w[19], w[20], selector);
      w[28] = hc_byte_perm_S (w[18], w[19], selector);
      w[27] = hc_byte_perm_S (w[17], w[18], selector);
      w[26] = hc_byte_perm_S (w[16], w[17], selector);
      w[25] = hc_byte_perm_S (w[15], w[16], selector);
      w[24] = hc_byte_perm_S (w[14], w[15], selector);
      w[23] = hc_byte_perm_S (w[13], w[14], selector);
      w[22] = hc_byte_perm_S (w[12], w[13], selector);
      w[21] = hc_byte_perm_S (w[11], w[12], selector);
      w[20] = hc_byte_perm_S (w[10], w[11], selector);
      w[19] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[18] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[17] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[16] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[15] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[14] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[13] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[12] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[11] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[10] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[ 9] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 10:
      w[63] = hc_byte_perm_S (w[52], w[53], selector);
      w[62] = hc_byte_perm_S (w[51], w[52], selector);
      w[61] = hc_byte_perm_S (w[50], w[51], selector);
      w[60] = hc_byte_perm_S (w[49], w[50], selector);
      w[59] = hc_byte_perm_S (w[48], w[49], selector);
      w[58] = hc_byte_perm_S (w[47], w[48], selector);
      w[57] = hc_byte_perm_S (w[46], w[47], selector);
      w[56] = hc_byte_perm_S (w[45], w[46], selector);
      w[55] = hc_byte_perm_S (w[44], w[45], selector);
      w[54] = hc_byte_perm_S (w[43], w[44], selector);
      w[53] = hc_byte_perm_S (w[42], w[43], selector);
      w[52] = hc_byte_perm_S (w[41], w[42], selector);
      w[51] = hc_byte_perm_S (w[40], w[41], selector);
      w[50] = hc_byte_perm_S (w[39], w[40], selector);
      w[49] = hc_byte_perm_S (w[38], w[39], selector);
      w[48] = hc_byte_perm_S (w[37], w[38], selector);
      w[47] = hc_byte_perm_S (w[36], w[37], selector);
      w[46] = hc_byte_perm_S (w[35], w[36], selector);
      w[45] = hc_byte_perm_S (w[34], w[35], selector);
      w[44] = hc_byte_perm_S (w[33], w[34], selector);
      w[43] = hc_byte_perm_S (w[32], w[33], selector);
      w[42] = hc_byte_perm_S (w[31], w[32], selector);
      w[41] = hc_byte_perm_S (w[30], w[31], selector);
      w[40] = hc_byte_perm_S (w[29], w[30], selector);
      w[39] = hc_byte_perm_S (w[28], w[29], selector);
      w[38] = hc_byte_perm_S (w[27], w[28], selector);
      w[37] = hc_byte_perm_S (w[26], w[27], selector);
      w[36] = hc_byte_perm_S (w[25], w[26], selector);
      w[35] = hc_byte_perm_S (w[24], w[25], selector);
      w[34] = hc_byte_perm_S (w[23], w[24], selector);
      w[33] = hc_byte_perm_S (w[22], w[23], selector);
      w[32] = hc_byte_perm_S (w[21], w[22], selector);
      w[31] = hc_byte_perm_S (w[20], w[21], selector);
      w[30] = hc_byte_perm_S (w[19], w[20], selector);
      w[29] = hc_byte_perm_S (w[18], w[19], selector);
      w[28] = hc_byte_perm_S (w[17], w[18], selector);
      w[27] = hc_byte_perm_S (w[16], w[17], selector);
      w[26] = hc_byte_perm_S (w[15], w[16], selector);
      w[25] = hc_byte_perm_S (w[14], w[15], selector);
      w[24] = hc_byte_perm_S (w[13], w[14], selector);
      w[23] = hc_byte_perm_S (w[12], w[13], selector);
      w[22] = hc_byte_perm_S (w[11], w[12], selector);
      w[21] = hc_byte_perm_S (w[10], w[11], selector);
      w[20] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[19] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[18] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[17] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[16] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[15] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[14] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[13] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[12] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[11] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[10] = hc_byte_perm_S (    0, w[ 0], selector);
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 11:
      w[63] = hc_byte_perm_S (w[51], w[52], selector);
      w[62] = hc_byte_perm_S (w[50], w[51], selector);
      w[61] = hc_byte_perm_S (w[49], w[50], selector);
      w[60] = hc_byte_perm_S (w[48], w[49], selector);
      w[59] = hc_byte_perm_S (w[47], w[48], selector);
      w[58] = hc_byte_perm_S (w[46], w[47], selector);
      w[57] = hc_byte_perm_S (w[45], w[46], selector);
      w[56] = hc_byte_perm_S (w[44], w[45], selector);
      w[55] = hc_byte_perm_S (w[43], w[44], selector);
      w[54] = hc_byte_perm_S (w[42], w[43], selector);
      w[53] = hc_byte_perm_S (w[41], w[42], selector);
      w[52] = hc_byte_perm_S (w[40], w[41], selector);
      w[51] = hc_byte_perm_S (w[39], w[40], selector);
      w[50] = hc_byte_perm_S (w[38], w[39], selector);
      w[49] = hc_byte_perm_S (w[37], w[38], selector);
      w[48] = hc_byte_perm_S (w[36], w[37], selector);
      w[47] = hc_byte_perm_S (w[35], w[36], selector);
      w[46] = hc_byte_perm_S (w[34], w[35], selector);
      w[45] = hc_byte_perm_S (w[33], w[34], selector);
      w[44] = hc_byte_perm_S (w[32], w[33], selector);
      w[43] = hc_byte_perm_S (w[31], w[32], selector);
      w[42] = hc_byte_perm_S (w[30], w[31], selector);
      w[41] = hc_byte_perm_S (w[29], w[30], selector);
      w[40] = hc_byte_perm_S (w[28], w[29], selector);
      w[39] = hc_byte_perm_S (w[27], w[28], selector);
      w[38] = hc_byte_perm_S (w[26], w[27], selector);
      w[37] = hc_byte_perm_S (w[25], w[26], selector);
      w[36] = hc_byte_perm_S (w[24], w[25], selector);
      w[35] = hc_byte_perm_S (w[23], w[24], selector);
      w[34] = hc_byte_perm_S (w[22], w[23], selector);
      w[33] = hc_byte_perm_S (w[21], w[22], selector);
      w[32] = hc_byte_perm_S (w[20], w[21], selector);
      w[31] = hc_byte_perm_S (w[19], w[20], selector);
      w[30] = hc_byte_perm_S (w[18], w[19], selector);
      w[29] = hc_byte_perm_S (w[17], w[18], selector);
      w[28] = hc_byte_perm_S (w[16], w[17], selector);
      w[27] = hc_byte_perm_S (w[15], w[16], selector);
      w[26] = hc_byte_perm_S (w[14], w[15], selector);
      w[25] = hc_byte_perm_S (w[13], w[14], selector);
      w[24] = hc_byte_perm_S (w[12], w[13], selector);
      w[23] = hc_byte_perm_S (w[11], w[12], selector);
      w[22] = hc_byte_perm_S (w[10], w[11], selector);
      w[21] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[20] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[19] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[18] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[17] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[16] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[15] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[14] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[13] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[12] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[11] = hc_byte_perm_S (    0, w[ 0], selector);
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 12:
      w[63] = hc_byte_perm_S (w[50], w[51], selector);
      w[62] = hc_byte_perm_S (w[49], w[50], selector);
      w[61] = hc_byte_perm_S (w[48], w[49], selector);
      w[60] = hc_byte_perm_S (w[47], w[48], selector);
      w[59] = hc_byte_perm_S (w[46], w[47], selector);
      w[58] = hc_byte_perm_S (w[45], w[46], selector);
      w[57] = hc_byte_perm_S (w[44], w[45], selector);
      w[56] = hc_byte_perm_S (w[43], w[44], selector);
      w[55] = hc_byte_perm_S (w[42], w[43], selector);
      w[54] = hc_byte_perm_S (w[41], w[42], selector);
      w[53] = hc_byte_perm_S (w[40], w[41], selector);
      w[52] = hc_byte_perm_S (w[39], w[40], selector);
      w[51] = hc_byte_perm_S (w[38], w[39], selector);
      w[50] = hc_byte_perm_S (w[37], w[38], selector);
      w[49] = hc_byte_perm_S (w[36], w[37], selector);
      w[48] = hc_byte_perm_S (w[35], w[36], selector);
      w[47] = hc_byte_perm_S (w[34], w[35], selector);
      w[46] = hc_byte_perm_S (w[33], w[34], selector);
      w[45] = hc_byte_perm_S (w[32], w[33], selector);
      w[44] = hc_byte_perm_S (w[31], w[32], selector);
      w[43] = hc_byte_perm_S (w[30], w[31], selector);
      w[42] = hc_byte_perm_S (w[29], w[30], selector);
      w[41] = hc_byte_perm_S (w[28], w[29], selector);
      w[40] = hc_byte_perm_S (w[27], w[28], selector);
      w[39] = hc_byte_perm_S (w[26], w[27], selector);
      w[38] = hc_byte_perm_S (w[25], w[26], selector);
      w[37] = hc_byte_perm_S (w[24], w[25], selector);
      w[36] = hc_byte_perm_S (w[23], w[24], selector);
      w[35] = hc_byte_perm_S (w[22], w[23], selector);
      w[34] = hc_byte_perm_S (w[21], w[22], selector);
      w[33] = hc_byte_perm_S (w[20], w[21], selector);
      w[32] = hc_byte_perm_S (w[19], w[20], selector);
      w[31] = hc_byte_perm_S (w[18], w[19], selector);
      w[30] = hc_byte_perm_S (w[17], w[18], selector);
      w[29] = hc_byte_perm_S (w[16], w[17], selector);
      w[28] = hc_byte_perm_S (w[15], w[16], selector);
      w[27] = hc_byte_perm_S (w[14], w[15], selector);
      w[26] = hc_byte_perm_S (w[13], w[14], selector);
      w[25] = hc_byte_perm_S (w[12], w[13], selector);
      w[24] = hc_byte_perm_S (w[11], w[12], selector);
      w[23] = hc_byte_perm_S (w[10], w[11], selector);
      w[22] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[21] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[20] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[19] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[18] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[17] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[16] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[15] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[14] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[13] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[12] = hc_byte_perm_S (    0, w[ 0], selector);
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 13:
      w[63] = hc_byte_perm_S (w[49], w[50], selector);
      w[62] = hc_byte_perm_S (w[48], w[49], selector);
      w[61] = hc_byte_perm_S (w[47], w[48], selector);
      w[60] = hc_byte_perm_S (w[46], w[47], selector);
      w[59] = hc_byte_perm_S (w[45], w[46], selector);
      w[58] = hc_byte_perm_S (w[44], w[45], selector);
      w[57] = hc_byte_perm_S (w[43], w[44], selector);
      w[56] = hc_byte_perm_S (w[42], w[43], selector);
      w[55] = hc_byte_perm_S (w[41], w[42], selector);
      w[54] = hc_byte_perm_S (w[40], w[41], selector);
      w[53] = hc_byte_perm_S (w[39], w[40], selector);
      w[52] = hc_byte_perm_S (w[38], w[39], selector);
      w[51] = hc_byte_perm_S (w[37], w[38], selector);
      w[50] = hc_byte_perm_S (w[36], w[37], selector);
      w[49] = hc_byte_perm_S (w[35], w[36], selector);
      w[48] = hc_byte_perm_S (w[34], w[35], selector);
      w[47] = hc_byte_perm_S (w[33], w[34], selector);
      w[46] = hc_byte_perm_S (w[32], w[33], selector);
      w[45] = hc_byte_perm_S (w[31], w[32], selector);
      w[44] = hc_byte_perm_S (w[30], w[31], selector);
      w[43] = hc_byte_perm_S (w[29], w[30], selector);
      w[42] = hc_byte_perm_S (w[28], w[29], selector);
      w[41] = hc_byte_perm_S (w[27], w[28], selector);
      w[40] = hc_byte_perm_S (w[26], w[27], selector);
      w[39] = hc_byte_perm_S (w[25], w[26], selector);
      w[38] = hc_byte_perm_S (w[24], w[25], selector);
      w[37] = hc_byte_perm_S (w[23], w[24], selector);
      w[36] = hc_byte_perm_S (w[22], w[23], selector);
      w[35] = hc_byte_perm_S (w[21], w[22], selector);
      w[34] = hc_byte_perm_S (w[20], w[21], selector);
      w[33] = hc_byte_perm_S (w[19], w[20], selector);
      w[32] = hc_byte_perm_S (w[18], w[19], selector);
      w[31] = hc_byte_perm_S (w[17], w[18], selector);
      w[30] = hc_byte_perm_S (w[16], w[17], selector);
      w[29] = hc_byte_perm_S (w[15], w[16], selector);
      w[28] = hc_byte_perm_S (w[14], w[15], selector);
      w[27] = hc_byte_perm_S (w[13], w[14], selector);
      w[26] = hc_byte_perm_S (w[12], w[13], selector);
      w[25] = hc_byte_perm_S (w[11], w[12], selector);
      w[24] = hc_byte_perm_S (w[10], w[11], selector);
      w[23] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[22] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[21] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[20] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[19] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[18] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[17] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[16] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[15] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[14] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[13] = hc_byte_perm_S (    0, w[ 0], selector);
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 14:
      w[63] = hc_byte_perm_S (w[48], w[49], selector);
      w[62] = hc_byte_perm_S (w[47], w[48], selector);
      w[61] = hc_byte_perm_S (w[46], w[47], selector);
      w[60] = hc_byte_perm_S (w[45], w[46], selector);
      w[59] = hc_byte_perm_S (w[44], w[45], selector);
      w[58] = hc_byte_perm_S (w[43], w[44], selector);
      w[57] = hc_byte_perm_S (w[42], w[43], selector);
      w[56] = hc_byte_perm_S (w[41], w[42], selector);
      w[55] = hc_byte_perm_S (w[40], w[41], selector);
      w[54] = hc_byte_perm_S (w[39], w[40], selector);
      w[53] = hc_byte_perm_S (w[38], w[39], selector);
      w[52] = hc_byte_perm_S (w[37], w[38], selector);
      w[51] = hc_byte_perm_S (w[36], w[37], selector);
      w[50] = hc_byte_perm_S (w[35], w[36], selector);
      w[49] = hc_byte_perm_S (w[34], w[35], selector);
      w[48] = hc_byte_perm_S (w[33], w[34], selector);
      w[47] = hc_byte_perm_S (w[32], w[33], selector);
      w[46] = hc_byte_perm_S (w[31], w[32], selector);
      w[45] = hc_byte_perm_S (w[30], w[31], selector);
      w[44] = hc_byte_perm_S (w[29], w[30], selector);
      w[43] = hc_byte_perm_S (w[28], w[29], selector);
      w[42] = hc_byte_perm_S (w[27], w[28], selector);
      w[41] = hc_byte_perm_S (w[26], w[27], selector);
      w[40] = hc_byte_perm_S (w[25], w[26], selector);
      w[39] = hc_byte_perm_S (w[24], w[25], selector);
      w[38] = hc_byte_perm_S (w[23], w[24], selector);
      w[37] = hc_byte_perm_S (w[22], w[23], selector);
      w[36] = hc_byte_perm_S (w[21], w[22], selector);
      w[35] = hc_byte_perm_S (w[20], w[21], selector);
      w[34] = hc_byte_perm_S (w[19], w[20], selector);
      w[33] = hc_byte_perm_S (w[18], w[19], selector);
      w[32] = hc_byte_perm_S (w[17], w[18], selector);
      w[31] = hc_byte_perm_S (w[16], w[17], selector);
      w[30] = hc_byte_perm_S (w[15], w[16], selector);
      w[29] = hc_byte_perm_S (w[14], w[15], selector);
      w[28] = hc_byte_perm_S (w[13], w[14], selector);
      w[27] = hc_byte_perm_S (w[12], w[13], selector);
      w[26] = hc_byte_perm_S (w[11], w[12], selector);
      w[25] = hc_byte_perm_S (w[10], w[11], selector);
      w[24] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[23] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[22] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[21] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[20] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[19] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[18] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[17] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[16] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[15] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[14] = hc_byte_perm_S (    0, w[ 0], selector);
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 15:
      w[63] = hc_byte_perm_S (w[47], w[48], selector);
      w[62] = hc_byte_perm_S (w[46], w[47], selector);
      w[61] = hc_byte_perm_S (w[45], w[46], selector);
      w[60] = hc_byte_perm_S (w[44], w[45], selector);
      w[59] = hc_byte_perm_S (w[43], w[44], selector);
      w[58] = hc_byte_perm_S (w[42], w[43], selector);
      w[57] = hc_byte_perm_S (w[41], w[42], selector);
      w[56] = hc_byte_perm_S (w[40], w[41], selector);
      w[55] = hc_byte_perm_S (w[39], w[40], selector);
      w[54] = hc_byte_perm_S (w[38], w[39], selector);
      w[53] = hc_byte_perm_S (w[37], w[38], selector);
      w[52] = hc_byte_perm_S (w[36], w[37], selector);
      w[51] = hc_byte_perm_S (w[35], w[36], selector);
      w[50] = hc_byte_perm_S (w[34], w[35], selector);
      w[49] = hc_byte_perm_S (w[33], w[34], selector);
      w[48] = hc_byte_perm_S (w[32], w[33], selector);
      w[47] = hc_byte_perm_S (w[31], w[32], selector);
      w[46] = hc_byte_perm_S (w[30], w[31], selector);
      w[45] = hc_byte_perm_S (w[29], w[30], selector);
      w[44] = hc_byte_perm_S (w[28], w[29], selector);
      w[43] = hc_byte_perm_S (w[27], w[28], selector);
      w[42] = hc_byte_perm_S (w[26], w[27], selector);
      w[41] = hc_byte_perm_S (w[25], w[26], selector);
      w[40] = hc_byte_perm_S (w[24], w[25], selector);
      w[39] = hc_byte_perm_S (w[23], w[24], selector);
      w[38] = hc_byte_perm_S (w[22], w[23], selector);
      w[37] = hc_byte_perm_S (w[21], w[22], selector);
      w[36] = hc_byte_perm_S (w[20], w[21], selector);
      w[35] = hc_byte_perm_S (w[19], w[20], selector);
      w[34] = hc_byte_perm_S (w[18], w[19], selector);
      w[33] = hc_byte_perm_S (w[17], w[18], selector);
      w[32] = hc_byte_perm_S (w[16], w[17], selector);
      w[31] = hc_byte_perm_S (w[15], w[16], selector);
      w[30] = hc_byte_perm_S (w[14], w[15], selector);
      w[29] = hc_byte_perm_S (w[13], w[14], selector);
      w[28] = hc_byte_perm_S (w[12], w[13], selector);
      w[27] = hc_byte_perm_S (w[11], w[12], selector);
      w[26] = hc_byte_perm_S (w[10], w[11], selector);
      w[25] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[24] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[23] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[22] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[21] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[20] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[19] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[18] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[17] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[16] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[15] = hc_byte_perm_S (    0, w[ 0], selector);
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 16:
      w[63] = hc_byte_perm_S (w[46], w[47], selector);
      w[62] = hc_byte_perm_S (w[45], w[46], selector);
      w[61] = hc_byte_perm_S (w[44], w[45], selector);
      w[60] = hc_byte_perm_S (w[43], w[44], selector);
      w[59] = hc_byte_perm_S (w[42], w[43], selector);
      w[58] = hc_byte_perm_S (w[41], w[42], selector);
      w[57] = hc_byte_perm_S (w[40], w[41], selector);
      w[56] = hc_byte_perm_S (w[39], w[40], selector);
      w[55] = hc_byte_perm_S (w[38], w[39], selector);
      w[54] = hc_byte_perm_S (w[37], w[38], selector);
      w[53] = hc_byte_perm_S (w[36], w[37], selector);
      w[52] = hc_byte_perm_S (w[35], w[36], selector);
      w[51] = hc_byte_perm_S (w[34], w[35], selector);
      w[50] = hc_byte_perm_S (w[33], w[34], selector);
      w[49] = hc_byte_perm_S (w[32], w[33], selector);
      w[48] = hc_byte_perm_S (w[31], w[32], selector);
      w[47] = hc_byte_perm_S (w[30], w[31], selector);
      w[46] = hc_byte_perm_S (w[29], w[30], selector);
      w[45] = hc_byte_perm_S (w[28], w[29], selector);
      w[44] = hc_byte_perm_S (w[27], w[28], selector);
      w[43] = hc_byte_perm_S (w[26], w[27], selector);
      w[42] = hc_byte_perm_S (w[25], w[26], selector);
      w[41] = hc_byte_perm_S (w[24], w[25], selector);
      w[40] = hc_byte_perm_S (w[23], w[24], selector);
      w[39] = hc_byte_perm_S (w[22], w[23], selector);
      w[38] = hc_byte_perm_S (w[21], w[22], selector);
      w[37] = hc_byte_perm_S (w[20], w[21], selector);
      w[36] = hc_byte_perm_S (w[19], w[20], selector);
      w[35] = hc_byte_perm_S (w[18], w[19], selector);
      w[34] = hc_byte_perm_S (w[17], w[18], selector);
      w[33] = hc_byte_perm_S (w[16], w[17], selector);
      w[32] = hc_byte_perm_S (w[15], w[16], selector);
      w[31] = hc_byte_perm_S (w[14], w[15], selector);
      w[30] = hc_byte_perm_S (w[13], w[14], selector);
      w[29] = hc_byte_perm_S (w[12], w[13], selector);
      w[28] = hc_byte_perm_S (w[11], w[12], selector);
      w[27] = hc_byte_perm_S (w[10], w[11], selector);
      w[26] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[25] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[24] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[23] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[22] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[21] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[20] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[19] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[18] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[17] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[16] = hc_byte_perm_S (    0, w[ 0], selector);
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 17:
      w[63] = hc_byte_perm_S (w[45], w[46], selector);
      w[62] = hc_byte_perm_S (w[44], w[45], selector);
      w[61] = hc_byte_perm_S (w[43], w[44], selector);
      w[60] = hc_byte_perm_S (w[42], w[43], selector);
      w[59] = hc_byte_perm_S (w[41], w[42], selector);
      w[58] = hc_byte_perm_S (w[40], w[41], selector);
      w[57] = hc_byte_perm_S (w[39], w[40], selector);
      w[56] = hc_byte_perm_S (w[38], w[39], selector);
      w[55] = hc_byte_perm_S (w[37], w[38], selector);
      w[54] = hc_byte_perm_S (w[36], w[37], selector);
      w[53] = hc_byte_perm_S (w[35], w[36], selector);
      w[52] = hc_byte_perm_S (w[34], w[35], selector);
      w[51] = hc_byte_perm_S (w[33], w[34], selector);
      w[50] = hc_byte_perm_S (w[32], w[33], selector);
      w[49] = hc_byte_perm_S (w[31], w[32], selector);
      w[48] = hc_byte_perm_S (w[30], w[31], selector);
      w[47] = hc_byte_perm_S (w[29], w[30], selector);
      w[46] = hc_byte_perm_S (w[28], w[29], selector);
      w[45] = hc_byte_perm_S (w[27], w[28], selector);
      w[44] = hc_byte_perm_S (w[26], w[27], selector);
      w[43] = hc_byte_perm_S (w[25], w[26], selector);
      w[42] = hc_byte_perm_S (w[24], w[25], selector);
      w[41] = hc_byte_perm_S (w[23], w[24], selector);
      w[40] = hc_byte_perm_S (w[22], w[23], selector);
      w[39] = hc_byte_perm_S (w[21], w[22], selector);
      w[38] = hc_byte_perm_S (w[20], w[21], selector);
      w[37] = hc_byte_perm_S (w[19], w[20], selector);
      w[36] = hc_byte_perm_S (w[18], w[19], selector);
      w[35] = hc_byte_perm_S (w[17], w[18], selector);
      w[34] = hc_byte_perm_S (w[16], w[17], selector);
      w[33] = hc_byte_perm_S (w[15], w[16], selector);
      w[32] = hc_byte_perm_S (w[14], w[15], selector);
      w[31] = hc_byte_perm_S (w[13], w[14], selector);
      w[30] = hc_byte_perm_S (w[12], w[13], selector);
      w[29] = hc_byte_perm_S (w[11], w[12], selector);
      w[28] = hc_byte_perm_S (w[10], w[11], selector);
      w[27] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[26] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[25] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[24] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[23] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[22] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[21] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[20] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[19] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[18] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[17] = hc_byte_perm_S (    0, w[ 0], selector);
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 18:
      w[63] = hc_byte_perm_S (w[44], w[45], selector);
      w[62] = hc_byte_perm_S (w[43], w[44], selector);
      w[61] = hc_byte_perm_S (w[42], w[43], selector);
      w[60] = hc_byte_perm_S (w[41], w[42], selector);
      w[59] = hc_byte_perm_S (w[40], w[41], selector);
      w[58] = hc_byte_perm_S (w[39], w[40], selector);
      w[57] = hc_byte_perm_S (w[38], w[39], selector);
      w[56] = hc_byte_perm_S (w[37], w[38], selector);
      w[55] = hc_byte_perm_S (w[36], w[37], selector);
      w[54] = hc_byte_perm_S (w[35], w[36], selector);
      w[53] = hc_byte_perm_S (w[34], w[35], selector);
      w[52] = hc_byte_perm_S (w[33], w[34], selector);
      w[51] = hc_byte_perm_S (w[32], w[33], selector);
      w[50] = hc_byte_perm_S (w[31], w[32], selector);
      w[49] = hc_byte_perm_S (w[30], w[31], selector);
      w[48] = hc_byte_perm_S (w[29], w[30], selector);
      w[47] = hc_byte_perm_S (w[28], w[29], selector);
      w[46] = hc_byte_perm_S (w[27], w[28], selector);
      w[45] = hc_byte_perm_S (w[26], w[27], selector);
      w[44] = hc_byte_perm_S (w[25], w[26], selector);
      w[43] = hc_byte_perm_S (w[24], w[25], selector);
      w[42] = hc_byte_perm_S (w[23], w[24], selector);
      w[41] = hc_byte_perm_S (w[22], w[23], selector);
      w[40] = hc_byte_perm_S (w[21], w[22], selector);
      w[39] = hc_byte_perm_S (w[20], w[21], selector);
      w[38] = hc_byte_perm_S (w[19], w[20], selector);
      w[37] = hc_byte_perm_S (w[18], w[19], selector);
      w[36] = hc_byte_perm_S (w[17], w[18], selector);
      w[35] = hc_byte_perm_S (w[16], w[17], selector);
      w[34] = hc_byte_perm_S (w[15], w[16], selector);
      w[33] = hc_byte_perm_S (w[14], w[15], selector);
      w[32] = hc_byte_perm_S (w[13], w[14], selector);
      w[31] = hc_byte_perm_S (w[12], w[13], selector);
      w[30] = hc_byte_perm_S (w[11], w[12], selector);
      w[29] = hc_byte_perm_S (w[10], w[11], selector);
      w[28] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[27] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[26] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[25] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[24] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[23] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[22] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[21] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[20] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[19] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[18] = hc_byte_perm_S (    0, w[ 0], selector);
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 19:
      w[63] = hc_byte_perm_S (w[43], w[44], selector);
      w[62] = hc_byte_perm_S (w[42], w[43], selector);
      w[61] = hc_byte_perm_S (w[41], w[42], selector);
      w[60] = hc_byte_perm_S (w[40], w[41], selector);
      w[59] = hc_byte_perm_S (w[39], w[40], selector);
      w[58] = hc_byte_perm_S (w[38], w[39], selector);
      w[57] = hc_byte_perm_S (w[37], w[38], selector);
      w[56] = hc_byte_perm_S (w[36], w[37], selector);
      w[55] = hc_byte_perm_S (w[35], w[36], selector);
      w[54] = hc_byte_perm_S (w[34], w[35], selector);
      w[53] = hc_byte_perm_S (w[33], w[34], selector);
      w[52] = hc_byte_perm_S (w[32], w[33], selector);
      w[51] = hc_byte_perm_S (w[31], w[32], selector);
      w[50] = hc_byte_perm_S (w[30], w[31], selector);
      w[49] = hc_byte_perm_S (w[29], w[30], selector);
      w[48] = hc_byte_perm_S (w[28], w[29], selector);
      w[47] = hc_byte_perm_S (w[27], w[28], selector);
      w[46] = hc_byte_perm_S (w[26], w[27], selector);
      w[45] = hc_byte_perm_S (w[25], w[26], selector);
      w[44] = hc_byte_perm_S (w[24], w[25], selector);
      w[43] = hc_byte_perm_S (w[23], w[24], selector);
      w[42] = hc_byte_perm_S (w[22], w[23], selector);
      w[41] = hc_byte_perm_S (w[21], w[22], selector);
      w[40] = hc_byte_perm_S (w[20], w[21], selector);
      w[39] = hc_byte_perm_S (w[19], w[20], selector);
      w[38] = hc_byte_perm_S (w[18], w[19], selector);
      w[37] = hc_byte_perm_S (w[17], w[18], selector);
      w[36] = hc_byte_perm_S (w[16], w[17], selector);
      w[35] = hc_byte_perm_S (w[15], w[16], selector);
      w[34] = hc_byte_perm_S (w[14], w[15], selector);
      w[33] = hc_byte_perm_S (w[13], w[14], selector);
      w[32] = hc_byte_perm_S (w[12], w[13], selector);
      w[31] = hc_byte_perm_S (w[11], w[12], selector);
      w[30] = hc_byte_perm_S (w[10], w[11], selector);
      w[29] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[28] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[27] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[26] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[25] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[24] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[23] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[22] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[21] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[20] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[19] = hc_byte_perm_S (    0, w[ 0], selector);
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 20:
      w[63] = hc_byte_perm_S (w[42], w[43], selector);
      w[62] = hc_byte_perm_S (w[41], w[42], selector);
      w[61] = hc_byte_perm_S (w[40], w[41], selector);
      w[60] = hc_byte_perm_S (w[39], w[40], selector);
      w[59] = hc_byte_perm_S (w[38], w[39], selector);
      w[58] = hc_byte_perm_S (w[37], w[38], selector);
      w[57] = hc_byte_perm_S (w[36], w[37], selector);
      w[56] = hc_byte_perm_S (w[35], w[36], selector);
      w[55] = hc_byte_perm_S (w[34], w[35], selector);
      w[54] = hc_byte_perm_S (w[33], w[34], selector);
      w[53] = hc_byte_perm_S (w[32], w[33], selector);
      w[52] = hc_byte_perm_S (w[31], w[32], selector);
      w[51] = hc_byte_perm_S (w[30], w[31], selector);
      w[50] = hc_byte_perm_S (w[29], w[30], selector);
      w[49] = hc_byte_perm_S (w[28], w[29], selector);
      w[48] = hc_byte_perm_S (w[27], w[28], selector);
      w[47] = hc_byte_perm_S (w[26], w[27], selector);
      w[46] = hc_byte_perm_S (w[25], w[26], selector);
      w[45] = hc_byte_perm_S (w[24], w[25], selector);
      w[44] = hc_byte_perm_S (w[23], w[24], selector);
      w[43] = hc_byte_perm_S (w[22], w[23], selector);
      w[42] = hc_byte_perm_S (w[21], w[22], selector);
      w[41] = hc_byte_perm_S (w[20], w[21], selector);
      w[40] = hc_byte_perm_S (w[19], w[20], selector);
      w[39] = hc_byte_perm_S (w[18], w[19], selector);
      w[38] = hc_byte_perm_S (w[17], w[18], selector);
      w[37] = hc_byte_perm_S (w[16], w[17], selector);
      w[36] = hc_byte_perm_S (w[15], w[16], selector);
      w[35] = hc_byte_perm_S (w[14], w[15], selector);
      w[34] = hc_byte_perm_S (w[13], w[14], selector);
      w[33] = hc_byte_perm_S (w[12], w[13], selector);
      w[32] = hc_byte_perm_S (w[11], w[12], selector);
      w[31] = hc_byte_perm_S (w[10], w[11], selector);
      w[30] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[29] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[28] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[27] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[26] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[25] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[24] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[23] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[22] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[21] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[20] = hc_byte_perm_S (    0, w[ 0], selector);
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 21:
      w[63] = hc_byte_perm_S (w[41], w[42], selector);
      w[62] = hc_byte_perm_S (w[40], w[41], selector);
      w[61] = hc_byte_perm_S (w[39], w[40], selector);
      w[60] = hc_byte_perm_S (w[38], w[39], selector);
      w[59] = hc_byte_perm_S (w[37], w[38], selector);
      w[58] = hc_byte_perm_S (w[36], w[37], selector);
      w[57] = hc_byte_perm_S (w[35], w[36], selector);
      w[56] = hc_byte_perm_S (w[34], w[35], selector);
      w[55] = hc_byte_perm_S (w[33], w[34], selector);
      w[54] = hc_byte_perm_S (w[32], w[33], selector);
      w[53] = hc_byte_perm_S (w[31], w[32], selector);
      w[52] = hc_byte_perm_S (w[30], w[31], selector);
      w[51] = hc_byte_perm_S (w[29], w[30], selector);
      w[50] = hc_byte_perm_S (w[28], w[29], selector);
      w[49] = hc_byte_perm_S (w[27], w[28], selector);
      w[48] = hc_byte_perm_S (w[26], w[27], selector);
      w[47] = hc_byte_perm_S (w[25], w[26], selector);
      w[46] = hc_byte_perm_S (w[24], w[25], selector);
      w[45] = hc_byte_perm_S (w[23], w[24], selector);
      w[44] = hc_byte_perm_S (w[22], w[23], selector);
      w[43] = hc_byte_perm_S (w[21], w[22], selector);
      w[42] = hc_byte_perm_S (w[20], w[21], selector);
      w[41] = hc_byte_perm_S (w[19], w[20], selector);
      w[40] = hc_byte_perm_S (w[18], w[19], selector);
      w[39] = hc_byte_perm_S (w[17], w[18], selector);
      w[38] = hc_byte_perm_S (w[16], w[17], selector);
      w[37] = hc_byte_perm_S (w[15], w[16], selector);
      w[36] = hc_byte_perm_S (w[14], w[15], selector);
      w[35] = hc_byte_perm_S (w[13], w[14], selector);
      w[34] = hc_byte_perm_S (w[12], w[13], selector);
      w[33] = hc_byte_perm_S (w[11], w[12], selector);
      w[32] = hc_byte_perm_S (w[10], w[11], selector);
      w[31] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[30] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[29] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[28] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[27] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[26] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[25] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[24] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[23] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[22] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[21] = hc_byte_perm_S (    0, w[ 0], selector);
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 22:
      w[63] = hc_byte_perm_S (w[40], w[41], selector);
      w[62] = hc_byte_perm_S (w[39], w[40], selector);
      w[61] = hc_byte_perm_S (w[38], w[39], selector);
      w[60] = hc_byte_perm_S (w[37], w[38], selector);
      w[59] = hc_byte_perm_S (w[36], w[37], selector);
      w[58] = hc_byte_perm_S (w[35], w[36], selector);
      w[57] = hc_byte_perm_S (w[34], w[35], selector);
      w[56] = hc_byte_perm_S (w[33], w[34], selector);
      w[55] = hc_byte_perm_S (w[32], w[33], selector);
      w[54] = hc_byte_perm_S (w[31], w[32], selector);
      w[53] = hc_byte_perm_S (w[30], w[31], selector);
      w[52] = hc_byte_perm_S (w[29], w[30], selector);
      w[51] = hc_byte_perm_S (w[28], w[29], selector);
      w[50] = hc_byte_perm_S (w[27], w[28], selector);
      w[49] = hc_byte_perm_S (w[26], w[27], selector);
      w[48] = hc_byte_perm_S (w[25], w[26], selector);
      w[47] = hc_byte_perm_S (w[24], w[25], selector);
      w[46] = hc_byte_perm_S (w[23], w[24], selector);
      w[45] = hc_byte_perm_S (w[22], w[23], selector);
      w[44] = hc_byte_perm_S (w[21], w[22], selector);
      w[43] = hc_byte_perm_S (w[20], w[21], selector);
      w[42] = hc_byte_perm_S (w[19], w[20], selector);
      w[41] = hc_byte_perm_S (w[18], w[19], selector);
      w[40] = hc_byte_perm_S (w[17], w[18], selector);
      w[39] = hc_byte_perm_S (w[16], w[17], selector);
      w[38] = hc_byte_perm_S (w[15], w[16], selector);
      w[37] = hc_byte_perm_S (w[14], w[15], selector);
      w[36] = hc_byte_perm_S (w[13], w[14], selector);
      w[35] = hc_byte_perm_S (w[12], w[13], selector);
      w[34] = hc_byte_perm_S (w[11], w[12], selector);
      w[33] = hc_byte_perm_S (w[10], w[11], selector);
      w[32] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[31] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[30] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[29] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[28] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[27] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[26] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[25] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[24] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[23] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[22] = hc_byte_perm_S (    0, w[ 0], selector);
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 23:
      w[63] = hc_byte_perm_S (w[39], w[40], selector);
      w[62] = hc_byte_perm_S (w[38], w[39], selector);
      w[61] = hc_byte_perm_S (w[37], w[38], selector);
      w[60] = hc_byte_perm_S (w[36], w[37], selector);
      w[59] = hc_byte_perm_S (w[35], w[36], selector);
      w[58] = hc_byte_perm_S (w[34], w[35], selector);
      w[57] = hc_byte_perm_S (w[33], w[34], selector);
      w[56] = hc_byte_perm_S (w[32], w[33], selector);
      w[55] = hc_byte_perm_S (w[31], w[32], selector);
      w[54] = hc_byte_perm_S (w[30], w[31], selector);
      w[53] = hc_byte_perm_S (w[29], w[30], selector);
      w[52] = hc_byte_perm_S (w[28], w[29], selector);
      w[51] = hc_byte_perm_S (w[27], w[28], selector);
      w[50] = hc_byte_perm_S (w[26], w[27], selector);
      w[49] = hc_byte_perm_S (w[25], w[26], selector);
      w[48] = hc_byte_perm_S (w[24], w[25], selector);
      w[47] = hc_byte_perm_S (w[23], w[24], selector);
      w[46] = hc_byte_perm_S (w[22], w[23], selector);
      w[45] = hc_byte_perm_S (w[21], w[22], selector);
      w[44] = hc_byte_perm_S (w[20], w[21], selector);
      w[43] = hc_byte_perm_S (w[19], w[20], selector);
      w[42] = hc_byte_perm_S (w[18], w[19], selector);
      w[41] = hc_byte_perm_S (w[17], w[18], selector);
      w[40] = hc_byte_perm_S (w[16], w[17], selector);
      w[39] = hc_byte_perm_S (w[15], w[16], selector);
      w[38] = hc_byte_perm_S (w[14], w[15], selector);
      w[37] = hc_byte_perm_S (w[13], w[14], selector);
      w[36] = hc_byte_perm_S (w[12], w[13], selector);
      w[35] = hc_byte_perm_S (w[11], w[12], selector);
      w[34] = hc_byte_perm_S (w[10], w[11], selector);
      w[33] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[32] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[31] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[30] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[29] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[28] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[27] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[26] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[25] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[24] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[23] = hc_byte_perm_S (    0, w[ 0], selector);
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 24:
      w[63] = hc_byte_perm_S (w[38], w[39], selector);
      w[62] = hc_byte_perm_S (w[37], w[38], selector);
      w[61] = hc_byte_perm_S (w[36], w[37], selector);
      w[60] = hc_byte_perm_S (w[35], w[36], selector);
      w[59] = hc_byte_perm_S (w[34], w[35], selector);
      w[58] = hc_byte_perm_S (w[33], w[34], selector);
      w[57] = hc_byte_perm_S (w[32], w[33], selector);
      w[56] = hc_byte_perm_S (w[31], w[32], selector);
      w[55] = hc_byte_perm_S (w[30], w[31], selector);
      w[54] = hc_byte_perm_S (w[29], w[30], selector);
      w[53] = hc_byte_perm_S (w[28], w[29], selector);
      w[52] = hc_byte_perm_S (w[27], w[28], selector);
      w[51] = hc_byte_perm_S (w[26], w[27], selector);
      w[50] = hc_byte_perm_S (w[25], w[26], selector);
      w[49] = hc_byte_perm_S (w[24], w[25], selector);
      w[48] = hc_byte_perm_S (w[23], w[24], selector);
      w[47] = hc_byte_perm_S (w[22], w[23], selector);
      w[46] = hc_byte_perm_S (w[21], w[22], selector);
      w[45] = hc_byte_perm_S (w[20], w[21], selector);
      w[44] = hc_byte_perm_S (w[19], w[20], selector);
      w[43] = hc_byte_perm_S (w[18], w[19], selector);
      w[42] = hc_byte_perm_S (w[17], w[18], selector);
      w[41] = hc_byte_perm_S (w[16], w[17], selector);
      w[40] = hc_byte_perm_S (w[15], w[16], selector);
      w[39] = hc_byte_perm_S (w[14], w[15], selector);
      w[38] = hc_byte_perm_S (w[13], w[14], selector);
      w[37] = hc_byte_perm_S (w[12], w[13], selector);
      w[36] = hc_byte_perm_S (w[11], w[12], selector);
      w[35] = hc_byte_perm_S (w[10], w[11], selector);
      w[34] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[33] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[32] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[31] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[30] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[29] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[28] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[27] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[26] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[25] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[24] = hc_byte_perm_S (    0, w[ 0], selector);
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 25:
      w[63] = hc_byte_perm_S (w[37], w[38], selector);
      w[62] = hc_byte_perm_S (w[36], w[37], selector);
      w[61] = hc_byte_perm_S (w[35], w[36], selector);
      w[60] = hc_byte_perm_S (w[34], w[35], selector);
      w[59] = hc_byte_perm_S (w[33], w[34], selector);
      w[58] = hc_byte_perm_S (w[32], w[33], selector);
      w[57] = hc_byte_perm_S (w[31], w[32], selector);
      w[56] = hc_byte_perm_S (w[30], w[31], selector);
      w[55] = hc_byte_perm_S (w[29], w[30], selector);
      w[54] = hc_byte_perm_S (w[28], w[29], selector);
      w[53] = hc_byte_perm_S (w[27], w[28], selector);
      w[52] = hc_byte_perm_S (w[26], w[27], selector);
      w[51] = hc_byte_perm_S (w[25], w[26], selector);
      w[50] = hc_byte_perm_S (w[24], w[25], selector);
      w[49] = hc_byte_perm_S (w[23], w[24], selector);
      w[48] = hc_byte_perm_S (w[22], w[23], selector);
      w[47] = hc_byte_perm_S (w[21], w[22], selector);
      w[46] = hc_byte_perm_S (w[20], w[21], selector);
      w[45] = hc_byte_perm_S (w[19], w[20], selector);
      w[44] = hc_byte_perm_S (w[18], w[19], selector);
      w[43] = hc_byte_perm_S (w[17], w[18], selector);
      w[42] = hc_byte_perm_S (w[16], w[17], selector);
      w[41] = hc_byte_perm_S (w[15], w[16], selector);
      w[40] = hc_byte_perm_S (w[14], w[15], selector);
      w[39] = hc_byte_perm_S (w[13], w[14], selector);
      w[38] = hc_byte_perm_S (w[12], w[13], selector);
      w[37] = hc_byte_perm_S (w[11], w[12], selector);
      w[36] = hc_byte_perm_S (w[10], w[11], selector);
      w[35] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[34] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[33] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[32] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[31] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[30] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[29] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[28] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[27] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[26] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[25] = hc_byte_perm_S (    0, w[ 0], selector);
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 26:
      w[63] = hc_byte_perm_S (w[36], w[37], selector);
      w[62] = hc_byte_perm_S (w[35], w[36], selector);
      w[61] = hc_byte_perm_S (w[34], w[35], selector);
      w[60] = hc_byte_perm_S (w[33], w[34], selector);
      w[59] = hc_byte_perm_S (w[32], w[33], selector);
      w[58] = hc_byte_perm_S (w[31], w[32], selector);
      w[57] = hc_byte_perm_S (w[30], w[31], selector);
      w[56] = hc_byte_perm_S (w[29], w[30], selector);
      w[55] = hc_byte_perm_S (w[28], w[29], selector);
      w[54] = hc_byte_perm_S (w[27], w[28], selector);
      w[53] = hc_byte_perm_S (w[26], w[27], selector);
      w[52] = hc_byte_perm_S (w[25], w[26], selector);
      w[51] = hc_byte_perm_S (w[24], w[25], selector);
      w[50] = hc_byte_perm_S (w[23], w[24], selector);
      w[49] = hc_byte_perm_S (w[22], w[23], selector);
      w[48] = hc_byte_perm_S (w[21], w[22], selector);
      w[47] = hc_byte_perm_S (w[20], w[21], selector);
      w[46] = hc_byte_perm_S (w[19], w[20], selector);
      w[45] = hc_byte_perm_S (w[18], w[19], selector);
      w[44] = hc_byte_perm_S (w[17], w[18], selector);
      w[43] = hc_byte_perm_S (w[16], w[17], selector);
      w[42] = hc_byte_perm_S (w[15], w[16], selector);
      w[41] = hc_byte_perm_S (w[14], w[15], selector);
      w[40] = hc_byte_perm_S (w[13], w[14], selector);
      w[39] = hc_byte_perm_S (w[12], w[13], selector);
      w[38] = hc_byte_perm_S (w[11], w[12], selector);
      w[37] = hc_byte_perm_S (w[10], w[11], selector);
      w[36] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[35] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[34] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[33] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[32] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[31] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[30] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[29] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[28] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[27] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[26] = hc_byte_perm_S (    0, w[ 0], selector);
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 27:
      w[63] = hc_byte_perm_S (w[35], w[36], selector);
      w[62] = hc_byte_perm_S (w[34], w[35], selector);
      w[61] = hc_byte_perm_S (w[33], w[34], selector);
      w[60] = hc_byte_perm_S (w[32], w[33], selector);
      w[59] = hc_byte_perm_S (w[31], w[32], selector);
      w[58] = hc_byte_perm_S (w[30], w[31], selector);
      w[57] = hc_byte_perm_S (w[29], w[30], selector);
      w[56] = hc_byte_perm_S (w[28], w[29], selector);
      w[55] = hc_byte_perm_S (w[27], w[28], selector);
      w[54] = hc_byte_perm_S (w[26], w[27], selector);
      w[53] = hc_byte_perm_S (w[25], w[26], selector);
      w[52] = hc_byte_perm_S (w[24], w[25], selector);
      w[51] = hc_byte_perm_S (w[23], w[24], selector);
      w[50] = hc_byte_perm_S (w[22], w[23], selector);
      w[49] = hc_byte_perm_S (w[21], w[22], selector);
      w[48] = hc_byte_perm_S (w[20], w[21], selector);
      w[47] = hc_byte_perm_S (w[19], w[20], selector);
      w[46] = hc_byte_perm_S (w[18], w[19], selector);
      w[45] = hc_byte_perm_S (w[17], w[18], selector);
      w[44] = hc_byte_perm_S (w[16], w[17], selector);
      w[43] = hc_byte_perm_S (w[15], w[16], selector);
      w[42] = hc_byte_perm_S (w[14], w[15], selector);
      w[41] = hc_byte_perm_S (w[13], w[14], selector);
      w[40] = hc_byte_perm_S (w[12], w[13], selector);
      w[39] = hc_byte_perm_S (w[11], w[12], selector);
      w[38] = hc_byte_perm_S (w[10], w[11], selector);
      w[37] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[36] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[35] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[34] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[33] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[32] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[31] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[30] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[29] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[28] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[27] = hc_byte_perm_S (    0, w[ 0], selector);
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 28:
      w[63] = hc_byte_perm_S (w[34], w[35], selector);
      w[62] = hc_byte_perm_S (w[33], w[34], selector);
      w[61] = hc_byte_perm_S (w[32], w[33], selector);
      w[60] = hc_byte_perm_S (w[31], w[32], selector);
      w[59] = hc_byte_perm_S (w[30], w[31], selector);
      w[58] = hc_byte_perm_S (w[29], w[30], selector);
      w[57] = hc_byte_perm_S (w[28], w[29], selector);
      w[56] = hc_byte_perm_S (w[27], w[28], selector);
      w[55] = hc_byte_perm_S (w[26], w[27], selector);
      w[54] = hc_byte_perm_S (w[25], w[26], selector);
      w[53] = hc_byte_perm_S (w[24], w[25], selector);
      w[52] = hc_byte_perm_S (w[23], w[24], selector);
      w[51] = hc_byte_perm_S (w[22], w[23], selector);
      w[50] = hc_byte_perm_S (w[21], w[22], selector);
      w[49] = hc_byte_perm_S (w[20], w[21], selector);
      w[48] = hc_byte_perm_S (w[19], w[20], selector);
      w[47] = hc_byte_perm_S (w[18], w[19], selector);
      w[46] = hc_byte_perm_S (w[17], w[18], selector);
      w[45] = hc_byte_perm_S (w[16], w[17], selector);
      w[44] = hc_byte_perm_S (w[15], w[16], selector);
      w[43] = hc_byte_perm_S (w[14], w[15], selector);
      w[42] = hc_byte_perm_S (w[13], w[14], selector);
      w[41] = hc_byte_perm_S (w[12], w[13], selector);
      w[40] = hc_byte_perm_S (w[11], w[12], selector);
      w[39] = hc_byte_perm_S (w[10], w[11], selector);
      w[38] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[37] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[36] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[35] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[34] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[33] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[32] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[31] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[30] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[29] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[28] = hc_byte_perm_S (    0, w[ 0], selector);
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 29:
      w[63] = hc_byte_perm_S (w[33], w[34], selector);
      w[62] = hc_byte_perm_S (w[32], w[33], selector);
      w[61] = hc_byte_perm_S (w[31], w[32], selector);
      w[60] = hc_byte_perm_S (w[30], w[31], selector);
      w[59] = hc_byte_perm_S (w[29], w[30], selector);
      w[58] = hc_byte_perm_S (w[28], w[29], selector);
      w[57] = hc_byte_perm_S (w[27], w[28], selector);
      w[56] = hc_byte_perm_S (w[26], w[27], selector);
      w[55] = hc_byte_perm_S (w[25], w[26], selector);
      w[54] = hc_byte_perm_S (w[24], w[25], selector);
      w[53] = hc_byte_perm_S (w[23], w[24], selector);
      w[52] = hc_byte_perm_S (w[22], w[23], selector);
      w[51] = hc_byte_perm_S (w[21], w[22], selector);
      w[50] = hc_byte_perm_S (w[20], w[21], selector);
      w[49] = hc_byte_perm_S (w[19], w[20], selector);
      w[48] = hc_byte_perm_S (w[18], w[19], selector);
      w[47] = hc_byte_perm_S (w[17], w[18], selector);
      w[46] = hc_byte_perm_S (w[16], w[17], selector);
      w[45] = hc_byte_perm_S (w[15], w[16], selector);
      w[44] = hc_byte_perm_S (w[14], w[15], selector);
      w[43] = hc_byte_perm_S (w[13], w[14], selector);
      w[42] = hc_byte_perm_S (w[12], w[13], selector);
      w[41] = hc_byte_perm_S (w[11], w[12], selector);
      w[40] = hc_byte_perm_S (w[10], w[11], selector);
      w[39] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[38] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[37] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[36] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[35] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[34] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[33] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[32] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[31] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[30] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[29] = hc_byte_perm_S (    0, w[ 0], selector);
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 30:
      w[63] = hc_byte_perm_S (w[32], w[33], selector);
      w[62] = hc_byte_perm_S (w[31], w[32], selector);
      w[61] = hc_byte_perm_S (w[30], w[31], selector);
      w[60] = hc_byte_perm_S (w[29], w[30], selector);
      w[59] = hc_byte_perm_S (w[28], w[29], selector);
      w[58] = hc_byte_perm_S (w[27], w[28], selector);
      w[57] = hc_byte_perm_S (w[26], w[27], selector);
      w[56] = hc_byte_perm_S (w[25], w[26], selector);
      w[55] = hc_byte_perm_S (w[24], w[25], selector);
      w[54] = hc_byte_perm_S (w[23], w[24], selector);
      w[53] = hc_byte_perm_S (w[22], w[23], selector);
      w[52] = hc_byte_perm_S (w[21], w[22], selector);
      w[51] = hc_byte_perm_S (w[20], w[21], selector);
      w[50] = hc_byte_perm_S (w[19], w[20], selector);
      w[49] = hc_byte_perm_S (w[18], w[19], selector);
      w[48] = hc_byte_perm_S (w[17], w[18], selector);
      w[47] = hc_byte_perm_S (w[16], w[17], selector);
      w[46] = hc_byte_perm_S (w[15], w[16], selector);
      w[45] = hc_byte_perm_S (w[14], w[15], selector);
      w[44] = hc_byte_perm_S (w[13], w[14], selector);
      w[43] = hc_byte_perm_S (w[12], w[13], selector);
      w[42] = hc_byte_perm_S (w[11], w[12], selector);
      w[41] = hc_byte_perm_S (w[10], w[11], selector);
      w[40] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[39] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[38] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[37] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[36] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[35] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[34] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[33] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[32] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[31] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[30] = hc_byte_perm_S (    0, w[ 0], selector);
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 31:
      w[63] = hc_byte_perm_S (w[31], w[32], selector);
      w[62] = hc_byte_perm_S (w[30], w[31], selector);
      w[61] = hc_byte_perm_S (w[29], w[30], selector);
      w[60] = hc_byte_perm_S (w[28], w[29], selector);
      w[59] = hc_byte_perm_S (w[27], w[28], selector);
      w[58] = hc_byte_perm_S (w[26], w[27], selector);
      w[57] = hc_byte_perm_S (w[25], w[26], selector);
      w[56] = hc_byte_perm_S (w[24], w[25], selector);
      w[55] = hc_byte_perm_S (w[23], w[24], selector);
      w[54] = hc_byte_perm_S (w[22], w[23], selector);
      w[53] = hc_byte_perm_S (w[21], w[22], selector);
      w[52] = hc_byte_perm_S (w[20], w[21], selector);
      w[51] = hc_byte_perm_S (w[19], w[20], selector);
      w[50] = hc_byte_perm_S (w[18], w[19], selector);
      w[49] = hc_byte_perm_S (w[17], w[18], selector);
      w[48] = hc_byte_perm_S (w[16], w[17], selector);
      w[47] = hc_byte_perm_S (w[15], w[16], selector);
      w[46] = hc_byte_perm_S (w[14], w[15], selector);
      w[45] = hc_byte_perm_S (w[13], w[14], selector);
      w[44] = hc_byte_perm_S (w[12], w[13], selector);
      w[43] = hc_byte_perm_S (w[11], w[12], selector);
      w[42] = hc_byte_perm_S (w[10], w[11], selector);
      w[41] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[40] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[39] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[38] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[37] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[36] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[35] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[34] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[33] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[32] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[31] = hc_byte_perm_S (    0, w[ 0], selector);
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 32:
      w[63] = hc_byte_perm_S (w[30], w[31], selector);
      w[62] = hc_byte_perm_S (w[29], w[30], selector);
      w[61] = hc_byte_perm_S (w[28], w[29], selector);
      w[60] = hc_byte_perm_S (w[27], w[28], selector);
      w[59] = hc_byte_perm_S (w[26], w[27], selector);
      w[58] = hc_byte_perm_S (w[25], w[26], selector);
      w[57] = hc_byte_perm_S (w[24], w[25], selector);
      w[56] = hc_byte_perm_S (w[23], w[24], selector);
      w[55] = hc_byte_perm_S (w[22], w[23], selector);
      w[54] = hc_byte_perm_S (w[21], w[22], selector);
      w[53] = hc_byte_perm_S (w[20], w[21], selector);
      w[52] = hc_byte_perm_S (w[19], w[20], selector);
      w[51] = hc_byte_perm_S (w[18], w[19], selector);
      w[50] = hc_byte_perm_S (w[17], w[18], selector);
      w[49] = hc_byte_perm_S (w[16], w[17], selector);
      w[48] = hc_byte_perm_S (w[15], w[16], selector);
      w[47] = hc_byte_perm_S (w[14], w[15], selector);
      w[46] = hc_byte_perm_S (w[13], w[14], selector);
      w[45] = hc_byte_perm_S (w[12], w[13], selector);
      w[44] = hc_byte_perm_S (w[11], w[12], selector);
      w[43] = hc_byte_perm_S (w[10], w[11], selector);
      w[42] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[41] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[40] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[39] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[38] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[37] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[36] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[35] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[34] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[33] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[32] = hc_byte_perm_S (    0, w[ 0], selector);
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 33:
      w[63] = hc_byte_perm_S (w[29], w[30], selector);
      w[62] = hc_byte_perm_S (w[28], w[29], selector);
      w[61] = hc_byte_perm_S (w[27], w[28], selector);
      w[60] = hc_byte_perm_S (w[26], w[27], selector);
      w[59] = hc_byte_perm_S (w[25], w[26], selector);
      w[58] = hc_byte_perm_S (w[24], w[25], selector);
      w[57] = hc_byte_perm_S (w[23], w[24], selector);
      w[56] = hc_byte_perm_S (w[22], w[23], selector);
      w[55] = hc_byte_perm_S (w[21], w[22], selector);
      w[54] = hc_byte_perm_S (w[20], w[21], selector);
      w[53] = hc_byte_perm_S (w[19], w[20], selector);
      w[52] = hc_byte_perm_S (w[18], w[19], selector);
      w[51] = hc_byte_perm_S (w[17], w[18], selector);
      w[50] = hc_byte_perm_S (w[16], w[17], selector);
      w[49] = hc_byte_perm_S (w[15], w[16], selector);
      w[48] = hc_byte_perm_S (w[14], w[15], selector);
      w[47] = hc_byte_perm_S (w[13], w[14], selector);
      w[46] = hc_byte_perm_S (w[12], w[13], selector);
      w[45] = hc_byte_perm_S (w[11], w[12], selector);
      w[44] = hc_byte_perm_S (w[10], w[11], selector);
      w[43] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[42] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[41] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[40] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[39] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[38] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[37] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[36] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[35] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[34] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[33] = hc_byte_perm_S (    0, w[ 0], selector);
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 34:
      w[63] = hc_byte_perm_S (w[28], w[29], selector);
      w[62] = hc_byte_perm_S (w[27], w[28], selector);
      w[61] = hc_byte_perm_S (w[26], w[27], selector);
      w[60] = hc_byte_perm_S (w[25], w[26], selector);
      w[59] = hc_byte_perm_S (w[24], w[25], selector);
      w[58] = hc_byte_perm_S (w[23], w[24], selector);
      w[57] = hc_byte_perm_S (w[22], w[23], selector);
      w[56] = hc_byte_perm_S (w[21], w[22], selector);
      w[55] = hc_byte_perm_S (w[20], w[21], selector);
      w[54] = hc_byte_perm_S (w[19], w[20], selector);
      w[53] = hc_byte_perm_S (w[18], w[19], selector);
      w[52] = hc_byte_perm_S (w[17], w[18], selector);
      w[51] = hc_byte_perm_S (w[16], w[17], selector);
      w[50] = hc_byte_perm_S (w[15], w[16], selector);
      w[49] = hc_byte_perm_S (w[14], w[15], selector);
      w[48] = hc_byte_perm_S (w[13], w[14], selector);
      w[47] = hc_byte_perm_S (w[12], w[13], selector);
      w[46] = hc_byte_perm_S (w[11], w[12], selector);
      w[45] = hc_byte_perm_S (w[10], w[11], selector);
      w[44] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[43] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[42] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[41] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[40] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[39] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[38] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[37] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[36] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[35] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[34] = hc_byte_perm_S (    0, w[ 0], selector);
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 35:
      w[63] = hc_byte_perm_S (w[27], w[28], selector);
      w[62] = hc_byte_perm_S (w[26], w[27], selector);
      w[61] = hc_byte_perm_S (w[25], w[26], selector);
      w[60] = hc_byte_perm_S (w[24], w[25], selector);
      w[59] = hc_byte_perm_S (w[23], w[24], selector);
      w[58] = hc_byte_perm_S (w[22], w[23], selector);
      w[57] = hc_byte_perm_S (w[21], w[22], selector);
      w[56] = hc_byte_perm_S (w[20], w[21], selector);
      w[55] = hc_byte_perm_S (w[19], w[20], selector);
      w[54] = hc_byte_perm_S (w[18], w[19], selector);
      w[53] = hc_byte_perm_S (w[17], w[18], selector);
      w[52] = hc_byte_perm_S (w[16], w[17], selector);
      w[51] = hc_byte_perm_S (w[15], w[16], selector);
      w[50] = hc_byte_perm_S (w[14], w[15], selector);
      w[49] = hc_byte_perm_S (w[13], w[14], selector);
      w[48] = hc_byte_perm_S (w[12], w[13], selector);
      w[47] = hc_byte_perm_S (w[11], w[12], selector);
      w[46] = hc_byte_perm_S (w[10], w[11], selector);
      w[45] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[44] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[43] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[42] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[41] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[40] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[39] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[38] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[37] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[36] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[35] = hc_byte_perm_S (    0, w[ 0], selector);
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 36:
      w[63] = hc_byte_perm_S (w[26], w[27], selector);
      w[62] = hc_byte_perm_S (w[25], w[26], selector);
      w[61] = hc_byte_perm_S (w[24], w[25], selector);
      w[60] = hc_byte_perm_S (w[23], w[24], selector);
      w[59] = hc_byte_perm_S (w[22], w[23], selector);
      w[58] = hc_byte_perm_S (w[21], w[22], selector);
      w[57] = hc_byte_perm_S (w[20], w[21], selector);
      w[56] = hc_byte_perm_S (w[19], w[20], selector);
      w[55] = hc_byte_perm_S (w[18], w[19], selector);
      w[54] = hc_byte_perm_S (w[17], w[18], selector);
      w[53] = hc_byte_perm_S (w[16], w[17], selector);
      w[52] = hc_byte_perm_S (w[15], w[16], selector);
      w[51] = hc_byte_perm_S (w[14], w[15], selector);
      w[50] = hc_byte_perm_S (w[13], w[14], selector);
      w[49] = hc_byte_perm_S (w[12], w[13], selector);
      w[48] = hc_byte_perm_S (w[11], w[12], selector);
      w[47] = hc_byte_perm_S (w[10], w[11], selector);
      w[46] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[45] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[44] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[43] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[42] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[41] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[40] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[39] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[38] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[37] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[36] = hc_byte_perm_S (    0, w[ 0], selector);
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 37:
      w[63] = hc_byte_perm_S (w[25], w[26], selector);
      w[62] = hc_byte_perm_S (w[24], w[25], selector);
      w[61] = hc_byte_perm_S (w[23], w[24], selector);
      w[60] = hc_byte_perm_S (w[22], w[23], selector);
      w[59] = hc_byte_perm_S (w[21], w[22], selector);
      w[58] = hc_byte_perm_S (w[20], w[21], selector);
      w[57] = hc_byte_perm_S (w[19], w[20], selector);
      w[56] = hc_byte_perm_S (w[18], w[19], selector);
      w[55] = hc_byte_perm_S (w[17], w[18], selector);
      w[54] = hc_byte_perm_S (w[16], w[17], selector);
      w[53] = hc_byte_perm_S (w[15], w[16], selector);
      w[52] = hc_byte_perm_S (w[14], w[15], selector);
      w[51] = hc_byte_perm_S (w[13], w[14], selector);
      w[50] = hc_byte_perm_S (w[12], w[13], selector);
      w[49] = hc_byte_perm_S (w[11], w[12], selector);
      w[48] = hc_byte_perm_S (w[10], w[11], selector);
      w[47] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[46] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[45] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[44] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[43] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[42] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[41] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[40] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[39] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[38] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[37] = hc_byte_perm_S (    0, w[ 0], selector);
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 38:
      w[63] = hc_byte_perm_S (w[24], w[25], selector);
      w[62] = hc_byte_perm_S (w[23], w[24], selector);
      w[61] = hc_byte_perm_S (w[22], w[23], selector);
      w[60] = hc_byte_perm_S (w[21], w[22], selector);
      w[59] = hc_byte_perm_S (w[20], w[21], selector);
      w[58] = hc_byte_perm_S (w[19], w[20], selector);
      w[57] = hc_byte_perm_S (w[18], w[19], selector);
      w[56] = hc_byte_perm_S (w[17], w[18], selector);
      w[55] = hc_byte_perm_S (w[16], w[17], selector);
      w[54] = hc_byte_perm_S (w[15], w[16], selector);
      w[53] = hc_byte_perm_S (w[14], w[15], selector);
      w[52] = hc_byte_perm_S (w[13], w[14], selector);
      w[51] = hc_byte_perm_S (w[12], w[13], selector);
      w[50] = hc_byte_perm_S (w[11], w[12], selector);
      w[49] = hc_byte_perm_S (w[10], w[11], selector);
      w[48] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[47] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[46] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[45] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[44] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[43] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[42] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[41] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[40] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[39] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[38] = hc_byte_perm_S (    0, w[ 0], selector);
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 39:
      w[63] = hc_byte_perm_S (w[23], w[24], selector);
      w[62] = hc_byte_perm_S (w[22], w[23], selector);
      w[61] = hc_byte_perm_S (w[21], w[22], selector);
      w[60] = hc_byte_perm_S (w[20], w[21], selector);
      w[59] = hc_byte_perm_S (w[19], w[20], selector);
      w[58] = hc_byte_perm_S (w[18], w[19], selector);
      w[57] = hc_byte_perm_S (w[17], w[18], selector);
      w[56] = hc_byte_perm_S (w[16], w[17], selector);
      w[55] = hc_byte_perm_S (w[15], w[16], selector);
      w[54] = hc_byte_perm_S (w[14], w[15], selector);
      w[53] = hc_byte_perm_S (w[13], w[14], selector);
      w[52] = hc_byte_perm_S (w[12], w[13], selector);
      w[51] = hc_byte_perm_S (w[11], w[12], selector);
      w[50] = hc_byte_perm_S (w[10], w[11], selector);
      w[49] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[48] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[47] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[46] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[45] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[44] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[43] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[42] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[41] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[40] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[39] = hc_byte_perm_S (    0, w[ 0], selector);
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 40:
      w[63] = hc_byte_perm_S (w[22], w[23], selector);
      w[62] = hc_byte_perm_S (w[21], w[22], selector);
      w[61] = hc_byte_perm_S (w[20], w[21], selector);
      w[60] = hc_byte_perm_S (w[19], w[20], selector);
      w[59] = hc_byte_perm_S (w[18], w[19], selector);
      w[58] = hc_byte_perm_S (w[17], w[18], selector);
      w[57] = hc_byte_perm_S (w[16], w[17], selector);
      w[56] = hc_byte_perm_S (w[15], w[16], selector);
      w[55] = hc_byte_perm_S (w[14], w[15], selector);
      w[54] = hc_byte_perm_S (w[13], w[14], selector);
      w[53] = hc_byte_perm_S (w[12], w[13], selector);
      w[52] = hc_byte_perm_S (w[11], w[12], selector);
      w[51] = hc_byte_perm_S (w[10], w[11], selector);
      w[50] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[49] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[48] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[47] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[46] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[45] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[44] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[43] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[42] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[41] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[40] = hc_byte_perm_S (    0, w[ 0], selector);
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 41:
      w[63] = hc_byte_perm_S (w[21], w[22], selector);
      w[62] = hc_byte_perm_S (w[20], w[21], selector);
      w[61] = hc_byte_perm_S (w[19], w[20], selector);
      w[60] = hc_byte_perm_S (w[18], w[19], selector);
      w[59] = hc_byte_perm_S (w[17], w[18], selector);
      w[58] = hc_byte_perm_S (w[16], w[17], selector);
      w[57] = hc_byte_perm_S (w[15], w[16], selector);
      w[56] = hc_byte_perm_S (w[14], w[15], selector);
      w[55] = hc_byte_perm_S (w[13], w[14], selector);
      w[54] = hc_byte_perm_S (w[12], w[13], selector);
      w[53] = hc_byte_perm_S (w[11], w[12], selector);
      w[52] = hc_byte_perm_S (w[10], w[11], selector);
      w[51] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[50] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[49] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[48] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[47] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[46] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[45] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[44] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[43] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[42] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[41] = hc_byte_perm_S (    0, w[ 0], selector);
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 42:
      w[63] = hc_byte_perm_S (w[20], w[21], selector);
      w[62] = hc_byte_perm_S (w[19], w[20], selector);
      w[61] = hc_byte_perm_S (w[18], w[19], selector);
      w[60] = hc_byte_perm_S (w[17], w[18], selector);
      w[59] = hc_byte_perm_S (w[16], w[17], selector);
      w[58] = hc_byte_perm_S (w[15], w[16], selector);
      w[57] = hc_byte_perm_S (w[14], w[15], selector);
      w[56] = hc_byte_perm_S (w[13], w[14], selector);
      w[55] = hc_byte_perm_S (w[12], w[13], selector);
      w[54] = hc_byte_perm_S (w[11], w[12], selector);
      w[53] = hc_byte_perm_S (w[10], w[11], selector);
      w[52] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[51] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[50] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[49] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[48] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[47] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[46] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[45] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[44] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[43] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[42] = hc_byte_perm_S (    0, w[ 0], selector);
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 43:
      w[63] = hc_byte_perm_S (w[19], w[20], selector);
      w[62] = hc_byte_perm_S (w[18], w[19], selector);
      w[61] = hc_byte_perm_S (w[17], w[18], selector);
      w[60] = hc_byte_perm_S (w[16], w[17], selector);
      w[59] = hc_byte_perm_S (w[15], w[16], selector);
      w[58] = hc_byte_perm_S (w[14], w[15], selector);
      w[57] = hc_byte_perm_S (w[13], w[14], selector);
      w[56] = hc_byte_perm_S (w[12], w[13], selector);
      w[55] = hc_byte_perm_S (w[11], w[12], selector);
      w[54] = hc_byte_perm_S (w[10], w[11], selector);
      w[53] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[52] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[51] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[50] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[49] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[48] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[47] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[46] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[45] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[44] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[43] = hc_byte_perm_S (    0, w[ 0], selector);
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 44:
      w[63] = hc_byte_perm_S (w[18], w[19], selector);
      w[62] = hc_byte_perm_S (w[17], w[18], selector);
      w[61] = hc_byte_perm_S (w[16], w[17], selector);
      w[60] = hc_byte_perm_S (w[15], w[16], selector);
      w[59] = hc_byte_perm_S (w[14], w[15], selector);
      w[58] = hc_byte_perm_S (w[13], w[14], selector);
      w[57] = hc_byte_perm_S (w[12], w[13], selector);
      w[56] = hc_byte_perm_S (w[11], w[12], selector);
      w[55] = hc_byte_perm_S (w[10], w[11], selector);
      w[54] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[53] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[52] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[51] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[50] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[49] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[48] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[47] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[46] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[45] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[44] = hc_byte_perm_S (    0, w[ 0], selector);
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 45:
      w[63] = hc_byte_perm_S (w[17], w[18], selector);
      w[62] = hc_byte_perm_S (w[16], w[17], selector);
      w[61] = hc_byte_perm_S (w[15], w[16], selector);
      w[60] = hc_byte_perm_S (w[14], w[15], selector);
      w[59] = hc_byte_perm_S (w[13], w[14], selector);
      w[58] = hc_byte_perm_S (w[12], w[13], selector);
      w[57] = hc_byte_perm_S (w[11], w[12], selector);
      w[56] = hc_byte_perm_S (w[10], w[11], selector);
      w[55] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[54] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[53] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[52] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[51] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[50] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[49] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[48] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[47] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[46] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[45] = hc_byte_perm_S (    0, w[ 0], selector);
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 46:
      w[63] = hc_byte_perm_S (w[16], w[17], selector);
      w[62] = hc_byte_perm_S (w[15], w[16], selector);
      w[61] = hc_byte_perm_S (w[14], w[15], selector);
      w[60] = hc_byte_perm_S (w[13], w[14], selector);
      w[59] = hc_byte_perm_S (w[12], w[13], selector);
      w[58] = hc_byte_perm_S (w[11], w[12], selector);
      w[57] = hc_byte_perm_S (w[10], w[11], selector);
      w[56] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[55] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[54] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[53] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[52] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[51] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[50] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[49] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[48] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[47] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[46] = hc_byte_perm_S (    0, w[ 0], selector);
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 47:
      w[63] = hc_byte_perm_S (w[15], w[16], selector);
      w[62] = hc_byte_perm_S (w[14], w[15], selector);
      w[61] = hc_byte_perm_S (w[13], w[14], selector);
      w[60] = hc_byte_perm_S (w[12], w[13], selector);
      w[59] = hc_byte_perm_S (w[11], w[12], selector);
      w[58] = hc_byte_perm_S (w[10], w[11], selector);
      w[57] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[56] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[55] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[54] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[53] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[52] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[51] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[50] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[49] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[48] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[47] = hc_byte_perm_S (    0, w[ 0], selector);
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 48:
      w[63] = hc_byte_perm_S (w[14], w[15], selector);
      w[62] = hc_byte_perm_S (w[13], w[14], selector);
      w[61] = hc_byte_perm_S (w[12], w[13], selector);
      w[60] = hc_byte_perm_S (w[11], w[12], selector);
      w[59] = hc_byte_perm_S (w[10], w[11], selector);
      w[58] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[57] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[56] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[55] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[54] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[53] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[52] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[51] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[50] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[49] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[48] = hc_byte_perm_S (    0, w[ 0], selector);
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 49:
      w[63] = hc_byte_perm_S (w[13], w[14], selector);
      w[62] = hc_byte_perm_S (w[12], w[13], selector);
      w[61] = hc_byte_perm_S (w[11], w[12], selector);
      w[60] = hc_byte_perm_S (w[10], w[11], selector);
      w[59] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[58] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[57] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[56] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[55] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[54] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[53] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[52] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[51] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[50] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[49] = hc_byte_perm_S (    0, w[ 0], selector);
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 50:
      w[63] = hc_byte_perm_S (w[12], w[13], selector);
      w[62] = hc_byte_perm_S (w[11], w[12], selector);
      w[61] = hc_byte_perm_S (w[10], w[11], selector);
      w[60] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[59] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[58] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[57] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[56] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[55] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[54] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[53] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[52] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[51] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[50] = hc_byte_perm_S (    0, w[ 0], selector);
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 51:
      w[63] = hc_byte_perm_S (w[11], w[12], selector);
      w[62] = hc_byte_perm_S (w[10], w[11], selector);
      w[61] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[60] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[59] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[58] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[57] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[56] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[55] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[54] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[53] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[52] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[51] = hc_byte_perm_S (    0, w[ 0], selector);
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 52:
      w[63] = hc_byte_perm_S (w[10], w[11], selector);
      w[62] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[61] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[60] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[59] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[58] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[57] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[56] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[55] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[54] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[53] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[52] = hc_byte_perm_S (    0, w[ 0], selector);
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 53:
      w[63] = hc_byte_perm_S (w[ 9], w[10], selector);
      w[62] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[61] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[60] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[59] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[58] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[57] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[56] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[55] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[54] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[53] = hc_byte_perm_S (    0, w[ 0], selector);
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 54:
      w[63] = hc_byte_perm_S (w[ 8], w[ 9], selector);
      w[62] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[61] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[60] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[59] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[58] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[57] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[56] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[55] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[54] = hc_byte_perm_S (    0, w[ 0], selector);
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 55:
      w[63] = hc_byte_perm_S (w[ 7], w[ 8], selector);
      w[62] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[61] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[60] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[59] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[58] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[57] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[56] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[55] = hc_byte_perm_S (    0, w[ 0], selector);
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 56:
      w[63] = hc_byte_perm_S (w[ 6], w[ 7], selector);
      w[62] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[61] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[60] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[59] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[58] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[57] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[56] = hc_byte_perm_S (    0, w[ 0], selector);
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 57:
      w[63] = hc_byte_perm_S (w[ 5], w[ 6], selector);
      w[62] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[61] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[60] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[59] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[58] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[57] = hc_byte_perm_S (    0, w[ 0], selector);
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 58:
      w[63] = hc_byte_perm_S (w[ 4], w[ 5], selector);
      w[62] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[61] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[60] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[59] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[58] = hc_byte_perm_S (    0, w[ 0], selector);
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 59:
      w[63] = hc_byte_perm_S (w[ 3], w[ 4], selector);
      w[62] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[61] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[60] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[59] = hc_byte_perm_S (    0, w[ 0], selector);
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 60:
      w[63] = hc_byte_perm_S (w[ 2], w[ 3], selector);
      w[62] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[61] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[60] = hc_byte_perm_S (    0, w[ 0], selector);
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 61:
      w[63] = hc_byte_perm_S (w[ 1], w[ 2], selector);
      w[62] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[61] = hc_byte_perm_S (    0, w[ 0], selector);
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 62:
      w[63] = hc_byte_perm_S (w[ 0], w[ 1], selector);
      w[62] = hc_byte_perm_S (    0, w[ 0], selector);
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 63:
      w[63] = hc_byte_perm_S (    0, w[ 0], selector);
      w[62] = 0;
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;
  }
  #endif
}

DECLSPEC void switch_buffer_by_offset_1x64_be_S (u32 *w, const u32 offset)
{
  const int offset_switch = offset / 4;

  #if (defined IS_AMD && AMD_GCN < 3) || defined IS_GENERIC
  switch (offset_switch)
  {
    case  0:
      w[63] = hc_bytealign_S (w[62], w[63], offset);
      w[62] = hc_bytealign_S (w[61], w[62], offset);
      w[61] = hc_bytealign_S (w[60], w[61], offset);
      w[60] = hc_bytealign_S (w[59], w[60], offset);
      w[59] = hc_bytealign_S (w[58], w[59], offset);
      w[58] = hc_bytealign_S (w[57], w[58], offset);
      w[57] = hc_bytealign_S (w[56], w[57], offset);
      w[56] = hc_bytealign_S (w[55], w[56], offset);
      w[55] = hc_bytealign_S (w[54], w[55], offset);
      w[54] = hc_bytealign_S (w[53], w[54], offset);
      w[53] = hc_bytealign_S (w[52], w[53], offset);
      w[52] = hc_bytealign_S (w[51], w[52], offset);
      w[51] = hc_bytealign_S (w[50], w[51], offset);
      w[50] = hc_bytealign_S (w[49], w[50], offset);
      w[49] = hc_bytealign_S (w[48], w[49], offset);
      w[48] = hc_bytealign_S (w[47], w[48], offset);
      w[47] = hc_bytealign_S (w[46], w[47], offset);
      w[46] = hc_bytealign_S (w[45], w[46], offset);
      w[45] = hc_bytealign_S (w[44], w[45], offset);
      w[44] = hc_bytealign_S (w[43], w[44], offset);
      w[43] = hc_bytealign_S (w[42], w[43], offset);
      w[42] = hc_bytealign_S (w[41], w[42], offset);
      w[41] = hc_bytealign_S (w[40], w[41], offset);
      w[40] = hc_bytealign_S (w[39], w[40], offset);
      w[39] = hc_bytealign_S (w[38], w[39], offset);
      w[38] = hc_bytealign_S (w[37], w[38], offset);
      w[37] = hc_bytealign_S (w[36], w[37], offset);
      w[36] = hc_bytealign_S (w[35], w[36], offset);
      w[35] = hc_bytealign_S (w[34], w[35], offset);
      w[34] = hc_bytealign_S (w[33], w[34], offset);
      w[33] = hc_bytealign_S (w[32], w[33], offset);
      w[32] = hc_bytealign_S (w[31], w[32], offset);
      w[31] = hc_bytealign_S (w[30], w[31], offset);
      w[30] = hc_bytealign_S (w[29], w[30], offset);
      w[29] = hc_bytealign_S (w[28], w[29], offset);
      w[28] = hc_bytealign_S (w[27], w[28], offset);
      w[27] = hc_bytealign_S (w[26], w[27], offset);
      w[26] = hc_bytealign_S (w[25], w[26], offset);
      w[25] = hc_bytealign_S (w[24], w[25], offset);
      w[24] = hc_bytealign_S (w[23], w[24], offset);
      w[23] = hc_bytealign_S (w[22], w[23], offset);
      w[22] = hc_bytealign_S (w[21], w[22], offset);
      w[21] = hc_bytealign_S (w[20], w[21], offset);
      w[20] = hc_bytealign_S (w[19], w[20], offset);
      w[19] = hc_bytealign_S (w[18], w[19], offset);
      w[18] = hc_bytealign_S (w[17], w[18], offset);
      w[17] = hc_bytealign_S (w[16], w[17], offset);
      w[16] = hc_bytealign_S (w[15], w[16], offset);
      w[15] = hc_bytealign_S (w[14], w[15], offset);
      w[14] = hc_bytealign_S (w[13], w[14], offset);
      w[13] = hc_bytealign_S (w[12], w[13], offset);
      w[12] = hc_bytealign_S (w[11], w[12], offset);
      w[11] = hc_bytealign_S (w[10], w[11], offset);
      w[10] = hc_bytealign_S (w[ 9], w[10], offset);
      w[ 9] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[ 8] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[ 7] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 6] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 5] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 4] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 3] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 2] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 1] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 0] = hc_bytealign_S (    0, w[ 0], offset);

      break;

    case  1:
      w[63] = hc_bytealign_S (w[61], w[62], offset);
      w[62] = hc_bytealign_S (w[60], w[61], offset);
      w[61] = hc_bytealign_S (w[59], w[60], offset);
      w[60] = hc_bytealign_S (w[58], w[59], offset);
      w[59] = hc_bytealign_S (w[57], w[58], offset);
      w[58] = hc_bytealign_S (w[56], w[57], offset);
      w[57] = hc_bytealign_S (w[55], w[56], offset);
      w[56] = hc_bytealign_S (w[54], w[55], offset);
      w[55] = hc_bytealign_S (w[53], w[54], offset);
      w[54] = hc_bytealign_S (w[52], w[53], offset);
      w[53] = hc_bytealign_S (w[51], w[52], offset);
      w[52] = hc_bytealign_S (w[50], w[51], offset);
      w[51] = hc_bytealign_S (w[49], w[50], offset);
      w[50] = hc_bytealign_S (w[48], w[49], offset);
      w[49] = hc_bytealign_S (w[47], w[48], offset);
      w[48] = hc_bytealign_S (w[46], w[47], offset);
      w[47] = hc_bytealign_S (w[45], w[46], offset);
      w[46] = hc_bytealign_S (w[44], w[45], offset);
      w[45] = hc_bytealign_S (w[43], w[44], offset);
      w[44] = hc_bytealign_S (w[42], w[43], offset);
      w[43] = hc_bytealign_S (w[41], w[42], offset);
      w[42] = hc_bytealign_S (w[40], w[41], offset);
      w[41] = hc_bytealign_S (w[39], w[40], offset);
      w[40] = hc_bytealign_S (w[38], w[39], offset);
      w[39] = hc_bytealign_S (w[37], w[38], offset);
      w[38] = hc_bytealign_S (w[36], w[37], offset);
      w[37] = hc_bytealign_S (w[35], w[36], offset);
      w[36] = hc_bytealign_S (w[34], w[35], offset);
      w[35] = hc_bytealign_S (w[33], w[34], offset);
      w[34] = hc_bytealign_S (w[32], w[33], offset);
      w[33] = hc_bytealign_S (w[31], w[32], offset);
      w[32] = hc_bytealign_S (w[30], w[31], offset);
      w[31] = hc_bytealign_S (w[29], w[30], offset);
      w[30] = hc_bytealign_S (w[28], w[29], offset);
      w[29] = hc_bytealign_S (w[27], w[28], offset);
      w[28] = hc_bytealign_S (w[26], w[27], offset);
      w[27] = hc_bytealign_S (w[25], w[26], offset);
      w[26] = hc_bytealign_S (w[24], w[25], offset);
      w[25] = hc_bytealign_S (w[23], w[24], offset);
      w[24] = hc_bytealign_S (w[22], w[23], offset);
      w[23] = hc_bytealign_S (w[21], w[22], offset);
      w[22] = hc_bytealign_S (w[20], w[21], offset);
      w[21] = hc_bytealign_S (w[19], w[20], offset);
      w[20] = hc_bytealign_S (w[18], w[19], offset);
      w[19] = hc_bytealign_S (w[17], w[18], offset);
      w[18] = hc_bytealign_S (w[16], w[17], offset);
      w[17] = hc_bytealign_S (w[15], w[16], offset);
      w[16] = hc_bytealign_S (w[14], w[15], offset);
      w[15] = hc_bytealign_S (w[13], w[14], offset);
      w[14] = hc_bytealign_S (w[12], w[13], offset);
      w[13] = hc_bytealign_S (w[11], w[12], offset);
      w[12] = hc_bytealign_S (w[10], w[11], offset);
      w[11] = hc_bytealign_S (w[ 9], w[10], offset);
      w[10] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[ 9] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[ 8] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 7] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 6] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 5] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 4] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 3] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 2] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 1] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 0] = 0;

      break;

    case  2:
      w[63] = hc_bytealign_S (w[60], w[61], offset);
      w[62] = hc_bytealign_S (w[59], w[60], offset);
      w[61] = hc_bytealign_S (w[58], w[59], offset);
      w[60] = hc_bytealign_S (w[57], w[58], offset);
      w[59] = hc_bytealign_S (w[56], w[57], offset);
      w[58] = hc_bytealign_S (w[55], w[56], offset);
      w[57] = hc_bytealign_S (w[54], w[55], offset);
      w[56] = hc_bytealign_S (w[53], w[54], offset);
      w[55] = hc_bytealign_S (w[52], w[53], offset);
      w[54] = hc_bytealign_S (w[51], w[52], offset);
      w[53] = hc_bytealign_S (w[50], w[51], offset);
      w[52] = hc_bytealign_S (w[49], w[50], offset);
      w[51] = hc_bytealign_S (w[48], w[49], offset);
      w[50] = hc_bytealign_S (w[47], w[48], offset);
      w[49] = hc_bytealign_S (w[46], w[47], offset);
      w[48] = hc_bytealign_S (w[45], w[46], offset);
      w[47] = hc_bytealign_S (w[44], w[45], offset);
      w[46] = hc_bytealign_S (w[43], w[44], offset);
      w[45] = hc_bytealign_S (w[42], w[43], offset);
      w[44] = hc_bytealign_S (w[41], w[42], offset);
      w[43] = hc_bytealign_S (w[40], w[41], offset);
      w[42] = hc_bytealign_S (w[39], w[40], offset);
      w[41] = hc_bytealign_S (w[38], w[39], offset);
      w[40] = hc_bytealign_S (w[37], w[38], offset);
      w[39] = hc_bytealign_S (w[36], w[37], offset);
      w[38] = hc_bytealign_S (w[35], w[36], offset);
      w[37] = hc_bytealign_S (w[34], w[35], offset);
      w[36] = hc_bytealign_S (w[33], w[34], offset);
      w[35] = hc_bytealign_S (w[32], w[33], offset);
      w[34] = hc_bytealign_S (w[31], w[32], offset);
      w[33] = hc_bytealign_S (w[30], w[31], offset);
      w[32] = hc_bytealign_S (w[29], w[30], offset);
      w[31] = hc_bytealign_S (w[28], w[29], offset);
      w[30] = hc_bytealign_S (w[27], w[28], offset);
      w[29] = hc_bytealign_S (w[26], w[27], offset);
      w[28] = hc_bytealign_S (w[25], w[26], offset);
      w[27] = hc_bytealign_S (w[24], w[25], offset);
      w[26] = hc_bytealign_S (w[23], w[24], offset);
      w[25] = hc_bytealign_S (w[22], w[23], offset);
      w[24] = hc_bytealign_S (w[21], w[22], offset);
      w[23] = hc_bytealign_S (w[20], w[21], offset);
      w[22] = hc_bytealign_S (w[19], w[20], offset);
      w[21] = hc_bytealign_S (w[18], w[19], offset);
      w[20] = hc_bytealign_S (w[17], w[18], offset);
      w[19] = hc_bytealign_S (w[16], w[17], offset);
      w[18] = hc_bytealign_S (w[15], w[16], offset);
      w[17] = hc_bytealign_S (w[14], w[15], offset);
      w[16] = hc_bytealign_S (w[13], w[14], offset);
      w[15] = hc_bytealign_S (w[12], w[13], offset);
      w[14] = hc_bytealign_S (w[11], w[12], offset);
      w[13] = hc_bytealign_S (w[10], w[11], offset);
      w[12] = hc_bytealign_S (w[ 9], w[10], offset);
      w[11] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[10] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[ 9] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 8] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 7] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 6] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 5] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 4] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 3] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 2] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  3:
      w[63] = hc_bytealign_S (w[59], w[60], offset);
      w[62] = hc_bytealign_S (w[58], w[59], offset);
      w[61] = hc_bytealign_S (w[57], w[58], offset);
      w[60] = hc_bytealign_S (w[56], w[57], offset);
      w[59] = hc_bytealign_S (w[55], w[56], offset);
      w[58] = hc_bytealign_S (w[54], w[55], offset);
      w[57] = hc_bytealign_S (w[53], w[54], offset);
      w[56] = hc_bytealign_S (w[52], w[53], offset);
      w[55] = hc_bytealign_S (w[51], w[52], offset);
      w[54] = hc_bytealign_S (w[50], w[51], offset);
      w[53] = hc_bytealign_S (w[49], w[50], offset);
      w[52] = hc_bytealign_S (w[48], w[49], offset);
      w[51] = hc_bytealign_S (w[47], w[48], offset);
      w[50] = hc_bytealign_S (w[46], w[47], offset);
      w[49] = hc_bytealign_S (w[45], w[46], offset);
      w[48] = hc_bytealign_S (w[44], w[45], offset);
      w[47] = hc_bytealign_S (w[43], w[44], offset);
      w[46] = hc_bytealign_S (w[42], w[43], offset);
      w[45] = hc_bytealign_S (w[41], w[42], offset);
      w[44] = hc_bytealign_S (w[40], w[41], offset);
      w[43] = hc_bytealign_S (w[39], w[40], offset);
      w[42] = hc_bytealign_S (w[38], w[39], offset);
      w[41] = hc_bytealign_S (w[37], w[38], offset);
      w[40] = hc_bytealign_S (w[36], w[37], offset);
      w[39] = hc_bytealign_S (w[35], w[36], offset);
      w[38] = hc_bytealign_S (w[34], w[35], offset);
      w[37] = hc_bytealign_S (w[33], w[34], offset);
      w[36] = hc_bytealign_S (w[32], w[33], offset);
      w[35] = hc_bytealign_S (w[31], w[32], offset);
      w[34] = hc_bytealign_S (w[30], w[31], offset);
      w[33] = hc_bytealign_S (w[29], w[30], offset);
      w[32] = hc_bytealign_S (w[28], w[29], offset);
      w[31] = hc_bytealign_S (w[27], w[28], offset);
      w[30] = hc_bytealign_S (w[26], w[27], offset);
      w[29] = hc_bytealign_S (w[25], w[26], offset);
      w[28] = hc_bytealign_S (w[24], w[25], offset);
      w[27] = hc_bytealign_S (w[23], w[24], offset);
      w[26] = hc_bytealign_S (w[22], w[23], offset);
      w[25] = hc_bytealign_S (w[21], w[22], offset);
      w[24] = hc_bytealign_S (w[20], w[21], offset);
      w[23] = hc_bytealign_S (w[19], w[20], offset);
      w[22] = hc_bytealign_S (w[18], w[19], offset);
      w[21] = hc_bytealign_S (w[17], w[18], offset);
      w[20] = hc_bytealign_S (w[16], w[17], offset);
      w[19] = hc_bytealign_S (w[15], w[16], offset);
      w[18] = hc_bytealign_S (w[14], w[15], offset);
      w[17] = hc_bytealign_S (w[13], w[14], offset);
      w[16] = hc_bytealign_S (w[12], w[13], offset);
      w[15] = hc_bytealign_S (w[11], w[12], offset);
      w[14] = hc_bytealign_S (w[10], w[11], offset);
      w[13] = hc_bytealign_S (w[ 9], w[10], offset);
      w[12] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[11] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[10] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[ 9] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 8] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 7] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 6] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 5] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 4] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 3] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  4:
      w[63] = hc_bytealign_S (w[58], w[59], offset);
      w[62] = hc_bytealign_S (w[57], w[58], offset);
      w[61] = hc_bytealign_S (w[56], w[57], offset);
      w[60] = hc_bytealign_S (w[55], w[56], offset);
      w[59] = hc_bytealign_S (w[54], w[55], offset);
      w[58] = hc_bytealign_S (w[53], w[54], offset);
      w[57] = hc_bytealign_S (w[52], w[53], offset);
      w[56] = hc_bytealign_S (w[51], w[52], offset);
      w[55] = hc_bytealign_S (w[50], w[51], offset);
      w[54] = hc_bytealign_S (w[49], w[50], offset);
      w[53] = hc_bytealign_S (w[48], w[49], offset);
      w[52] = hc_bytealign_S (w[47], w[48], offset);
      w[51] = hc_bytealign_S (w[46], w[47], offset);
      w[50] = hc_bytealign_S (w[45], w[46], offset);
      w[49] = hc_bytealign_S (w[44], w[45], offset);
      w[48] = hc_bytealign_S (w[43], w[44], offset);
      w[47] = hc_bytealign_S (w[42], w[43], offset);
      w[46] = hc_bytealign_S (w[41], w[42], offset);
      w[45] = hc_bytealign_S (w[40], w[41], offset);
      w[44] = hc_bytealign_S (w[39], w[40], offset);
      w[43] = hc_bytealign_S (w[38], w[39], offset);
      w[42] = hc_bytealign_S (w[37], w[38], offset);
      w[41] = hc_bytealign_S (w[36], w[37], offset);
      w[40] = hc_bytealign_S (w[35], w[36], offset);
      w[39] = hc_bytealign_S (w[34], w[35], offset);
      w[38] = hc_bytealign_S (w[33], w[34], offset);
      w[37] = hc_bytealign_S (w[32], w[33], offset);
      w[36] = hc_bytealign_S (w[31], w[32], offset);
      w[35] = hc_bytealign_S (w[30], w[31], offset);
      w[34] = hc_bytealign_S (w[29], w[30], offset);
      w[33] = hc_bytealign_S (w[28], w[29], offset);
      w[32] = hc_bytealign_S (w[27], w[28], offset);
      w[31] = hc_bytealign_S (w[26], w[27], offset);
      w[30] = hc_bytealign_S (w[25], w[26], offset);
      w[29] = hc_bytealign_S (w[24], w[25], offset);
      w[28] = hc_bytealign_S (w[23], w[24], offset);
      w[27] = hc_bytealign_S (w[22], w[23], offset);
      w[26] = hc_bytealign_S (w[21], w[22], offset);
      w[25] = hc_bytealign_S (w[20], w[21], offset);
      w[24] = hc_bytealign_S (w[19], w[20], offset);
      w[23] = hc_bytealign_S (w[18], w[19], offset);
      w[22] = hc_bytealign_S (w[17], w[18], offset);
      w[21] = hc_bytealign_S (w[16], w[17], offset);
      w[20] = hc_bytealign_S (w[15], w[16], offset);
      w[19] = hc_bytealign_S (w[14], w[15], offset);
      w[18] = hc_bytealign_S (w[13], w[14], offset);
      w[17] = hc_bytealign_S (w[12], w[13], offset);
      w[16] = hc_bytealign_S (w[11], w[12], offset);
      w[15] = hc_bytealign_S (w[10], w[11], offset);
      w[14] = hc_bytealign_S (w[ 9], w[10], offset);
      w[13] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[12] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[11] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[10] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[ 9] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 8] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 7] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 6] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 5] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 4] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  5:
      w[63] = hc_bytealign_S (w[57], w[58], offset);
      w[62] = hc_bytealign_S (w[56], w[57], offset);
      w[61] = hc_bytealign_S (w[55], w[56], offset);
      w[60] = hc_bytealign_S (w[54], w[55], offset);
      w[59] = hc_bytealign_S (w[53], w[54], offset);
      w[58] = hc_bytealign_S (w[52], w[53], offset);
      w[57] = hc_bytealign_S (w[51], w[52], offset);
      w[56] = hc_bytealign_S (w[50], w[51], offset);
      w[55] = hc_bytealign_S (w[49], w[50], offset);
      w[54] = hc_bytealign_S (w[48], w[49], offset);
      w[53] = hc_bytealign_S (w[47], w[48], offset);
      w[52] = hc_bytealign_S (w[46], w[47], offset);
      w[51] = hc_bytealign_S (w[45], w[46], offset);
      w[50] = hc_bytealign_S (w[44], w[45], offset);
      w[49] = hc_bytealign_S (w[43], w[44], offset);
      w[48] = hc_bytealign_S (w[42], w[43], offset);
      w[47] = hc_bytealign_S (w[41], w[42], offset);
      w[46] = hc_bytealign_S (w[40], w[41], offset);
      w[45] = hc_bytealign_S (w[39], w[40], offset);
      w[44] = hc_bytealign_S (w[38], w[39], offset);
      w[43] = hc_bytealign_S (w[37], w[38], offset);
      w[42] = hc_bytealign_S (w[36], w[37], offset);
      w[41] = hc_bytealign_S (w[35], w[36], offset);
      w[40] = hc_bytealign_S (w[34], w[35], offset);
      w[39] = hc_bytealign_S (w[33], w[34], offset);
      w[38] = hc_bytealign_S (w[32], w[33], offset);
      w[37] = hc_bytealign_S (w[31], w[32], offset);
      w[36] = hc_bytealign_S (w[30], w[31], offset);
      w[35] = hc_bytealign_S (w[29], w[30], offset);
      w[34] = hc_bytealign_S (w[28], w[29], offset);
      w[33] = hc_bytealign_S (w[27], w[28], offset);
      w[32] = hc_bytealign_S (w[26], w[27], offset);
      w[31] = hc_bytealign_S (w[25], w[26], offset);
      w[30] = hc_bytealign_S (w[24], w[25], offset);
      w[29] = hc_bytealign_S (w[23], w[24], offset);
      w[28] = hc_bytealign_S (w[22], w[23], offset);
      w[27] = hc_bytealign_S (w[21], w[22], offset);
      w[26] = hc_bytealign_S (w[20], w[21], offset);
      w[25] = hc_bytealign_S (w[19], w[20], offset);
      w[24] = hc_bytealign_S (w[18], w[19], offset);
      w[23] = hc_bytealign_S (w[17], w[18], offset);
      w[22] = hc_bytealign_S (w[16], w[17], offset);
      w[21] = hc_bytealign_S (w[15], w[16], offset);
      w[20] = hc_bytealign_S (w[14], w[15], offset);
      w[19] = hc_bytealign_S (w[13], w[14], offset);
      w[18] = hc_bytealign_S (w[12], w[13], offset);
      w[17] = hc_bytealign_S (w[11], w[12], offset);
      w[16] = hc_bytealign_S (w[10], w[11], offset);
      w[15] = hc_bytealign_S (w[ 9], w[10], offset);
      w[14] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[13] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[12] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[11] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[10] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[ 9] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 8] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 7] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 6] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 5] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  6:
      w[63] = hc_bytealign_S (w[56], w[57], offset);
      w[62] = hc_bytealign_S (w[55], w[56], offset);
      w[61] = hc_bytealign_S (w[54], w[55], offset);
      w[60] = hc_bytealign_S (w[53], w[54], offset);
      w[59] = hc_bytealign_S (w[52], w[53], offset);
      w[58] = hc_bytealign_S (w[51], w[52], offset);
      w[57] = hc_bytealign_S (w[50], w[51], offset);
      w[56] = hc_bytealign_S (w[49], w[50], offset);
      w[55] = hc_bytealign_S (w[48], w[49], offset);
      w[54] = hc_bytealign_S (w[47], w[48], offset);
      w[53] = hc_bytealign_S (w[46], w[47], offset);
      w[52] = hc_bytealign_S (w[45], w[46], offset);
      w[51] = hc_bytealign_S (w[44], w[45], offset);
      w[50] = hc_bytealign_S (w[43], w[44], offset);
      w[49] = hc_bytealign_S (w[42], w[43], offset);
      w[48] = hc_bytealign_S (w[41], w[42], offset);
      w[47] = hc_bytealign_S (w[40], w[41], offset);
      w[46] = hc_bytealign_S (w[39], w[40], offset);
      w[45] = hc_bytealign_S (w[38], w[39], offset);
      w[44] = hc_bytealign_S (w[37], w[38], offset);
      w[43] = hc_bytealign_S (w[36], w[37], offset);
      w[42] = hc_bytealign_S (w[35], w[36], offset);
      w[41] = hc_bytealign_S (w[34], w[35], offset);
      w[40] = hc_bytealign_S (w[33], w[34], offset);
      w[39] = hc_bytealign_S (w[32], w[33], offset);
      w[38] = hc_bytealign_S (w[31], w[32], offset);
      w[37] = hc_bytealign_S (w[30], w[31], offset);
      w[36] = hc_bytealign_S (w[29], w[30], offset);
      w[35] = hc_bytealign_S (w[28], w[29], offset);
      w[34] = hc_bytealign_S (w[27], w[28], offset);
      w[33] = hc_bytealign_S (w[26], w[27], offset);
      w[32] = hc_bytealign_S (w[25], w[26], offset);
      w[31] = hc_bytealign_S (w[24], w[25], offset);
      w[30] = hc_bytealign_S (w[23], w[24], offset);
      w[29] = hc_bytealign_S (w[22], w[23], offset);
      w[28] = hc_bytealign_S (w[21], w[22], offset);
      w[27] = hc_bytealign_S (w[20], w[21], offset);
      w[26] = hc_bytealign_S (w[19], w[20], offset);
      w[25] = hc_bytealign_S (w[18], w[19], offset);
      w[24] = hc_bytealign_S (w[17], w[18], offset);
      w[23] = hc_bytealign_S (w[16], w[17], offset);
      w[22] = hc_bytealign_S (w[15], w[16], offset);
      w[21] = hc_bytealign_S (w[14], w[15], offset);
      w[20] = hc_bytealign_S (w[13], w[14], offset);
      w[19] = hc_bytealign_S (w[12], w[13], offset);
      w[18] = hc_bytealign_S (w[11], w[12], offset);
      w[17] = hc_bytealign_S (w[10], w[11], offset);
      w[16] = hc_bytealign_S (w[ 9], w[10], offset);
      w[15] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[14] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[13] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[12] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[11] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[10] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[ 9] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 8] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 7] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 6] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  7:
      w[63] = hc_bytealign_S (w[55], w[56], offset);
      w[62] = hc_bytealign_S (w[54], w[55], offset);
      w[61] = hc_bytealign_S (w[53], w[54], offset);
      w[60] = hc_bytealign_S (w[52], w[53], offset);
      w[59] = hc_bytealign_S (w[51], w[52], offset);
      w[58] = hc_bytealign_S (w[50], w[51], offset);
      w[57] = hc_bytealign_S (w[49], w[50], offset);
      w[56] = hc_bytealign_S (w[48], w[49], offset);
      w[55] = hc_bytealign_S (w[47], w[48], offset);
      w[54] = hc_bytealign_S (w[46], w[47], offset);
      w[53] = hc_bytealign_S (w[45], w[46], offset);
      w[52] = hc_bytealign_S (w[44], w[45], offset);
      w[51] = hc_bytealign_S (w[43], w[44], offset);
      w[50] = hc_bytealign_S (w[42], w[43], offset);
      w[49] = hc_bytealign_S (w[41], w[42], offset);
      w[48] = hc_bytealign_S (w[40], w[41], offset);
      w[47] = hc_bytealign_S (w[39], w[40], offset);
      w[46] = hc_bytealign_S (w[38], w[39], offset);
      w[45] = hc_bytealign_S (w[37], w[38], offset);
      w[44] = hc_bytealign_S (w[36], w[37], offset);
      w[43] = hc_bytealign_S (w[35], w[36], offset);
      w[42] = hc_bytealign_S (w[34], w[35], offset);
      w[41] = hc_bytealign_S (w[33], w[34], offset);
      w[40] = hc_bytealign_S (w[32], w[33], offset);
      w[39] = hc_bytealign_S (w[31], w[32], offset);
      w[38] = hc_bytealign_S (w[30], w[31], offset);
      w[37] = hc_bytealign_S (w[29], w[30], offset);
      w[36] = hc_bytealign_S (w[28], w[29], offset);
      w[35] = hc_bytealign_S (w[27], w[28], offset);
      w[34] = hc_bytealign_S (w[26], w[27], offset);
      w[33] = hc_bytealign_S (w[25], w[26], offset);
      w[32] = hc_bytealign_S (w[24], w[25], offset);
      w[31] = hc_bytealign_S (w[23], w[24], offset);
      w[30] = hc_bytealign_S (w[22], w[23], offset);
      w[29] = hc_bytealign_S (w[21], w[22], offset);
      w[28] = hc_bytealign_S (w[20], w[21], offset);
      w[27] = hc_bytealign_S (w[19], w[20], offset);
      w[26] = hc_bytealign_S (w[18], w[19], offset);
      w[25] = hc_bytealign_S (w[17], w[18], offset);
      w[24] = hc_bytealign_S (w[16], w[17], offset);
      w[23] = hc_bytealign_S (w[15], w[16], offset);
      w[22] = hc_bytealign_S (w[14], w[15], offset);
      w[21] = hc_bytealign_S (w[13], w[14], offset);
      w[20] = hc_bytealign_S (w[12], w[13], offset);
      w[19] = hc_bytealign_S (w[11], w[12], offset);
      w[18] = hc_bytealign_S (w[10], w[11], offset);
      w[17] = hc_bytealign_S (w[ 9], w[10], offset);
      w[16] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[15] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[14] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[13] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[12] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[11] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[10] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[ 9] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 8] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 7] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  8:
      w[63] = hc_bytealign_S (w[54], w[55], offset);
      w[62] = hc_bytealign_S (w[53], w[54], offset);
      w[61] = hc_bytealign_S (w[52], w[53], offset);
      w[60] = hc_bytealign_S (w[51], w[52], offset);
      w[59] = hc_bytealign_S (w[50], w[51], offset);
      w[58] = hc_bytealign_S (w[49], w[50], offset);
      w[57] = hc_bytealign_S (w[48], w[49], offset);
      w[56] = hc_bytealign_S (w[47], w[48], offset);
      w[55] = hc_bytealign_S (w[46], w[47], offset);
      w[54] = hc_bytealign_S (w[45], w[46], offset);
      w[53] = hc_bytealign_S (w[44], w[45], offset);
      w[52] = hc_bytealign_S (w[43], w[44], offset);
      w[51] = hc_bytealign_S (w[42], w[43], offset);
      w[50] = hc_bytealign_S (w[41], w[42], offset);
      w[49] = hc_bytealign_S (w[40], w[41], offset);
      w[48] = hc_bytealign_S (w[39], w[40], offset);
      w[47] = hc_bytealign_S (w[38], w[39], offset);
      w[46] = hc_bytealign_S (w[37], w[38], offset);
      w[45] = hc_bytealign_S (w[36], w[37], offset);
      w[44] = hc_bytealign_S (w[35], w[36], offset);
      w[43] = hc_bytealign_S (w[34], w[35], offset);
      w[42] = hc_bytealign_S (w[33], w[34], offset);
      w[41] = hc_bytealign_S (w[32], w[33], offset);
      w[40] = hc_bytealign_S (w[31], w[32], offset);
      w[39] = hc_bytealign_S (w[30], w[31], offset);
      w[38] = hc_bytealign_S (w[29], w[30], offset);
      w[37] = hc_bytealign_S (w[28], w[29], offset);
      w[36] = hc_bytealign_S (w[27], w[28], offset);
      w[35] = hc_bytealign_S (w[26], w[27], offset);
      w[34] = hc_bytealign_S (w[25], w[26], offset);
      w[33] = hc_bytealign_S (w[24], w[25], offset);
      w[32] = hc_bytealign_S (w[23], w[24], offset);
      w[31] = hc_bytealign_S (w[22], w[23], offset);
      w[30] = hc_bytealign_S (w[21], w[22], offset);
      w[29] = hc_bytealign_S (w[20], w[21], offset);
      w[28] = hc_bytealign_S (w[19], w[20], offset);
      w[27] = hc_bytealign_S (w[18], w[19], offset);
      w[26] = hc_bytealign_S (w[17], w[18], offset);
      w[25] = hc_bytealign_S (w[16], w[17], offset);
      w[24] = hc_bytealign_S (w[15], w[16], offset);
      w[23] = hc_bytealign_S (w[14], w[15], offset);
      w[22] = hc_bytealign_S (w[13], w[14], offset);
      w[21] = hc_bytealign_S (w[12], w[13], offset);
      w[20] = hc_bytealign_S (w[11], w[12], offset);
      w[19] = hc_bytealign_S (w[10], w[11], offset);
      w[18] = hc_bytealign_S (w[ 9], w[10], offset);
      w[17] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[16] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[15] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[14] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[13] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[12] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[11] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[10] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[ 9] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 8] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  9:
      w[63] = hc_bytealign_S (w[53], w[54], offset);
      w[62] = hc_bytealign_S (w[52], w[53], offset);
      w[61] = hc_bytealign_S (w[51], w[52], offset);
      w[60] = hc_bytealign_S (w[50], w[51], offset);
      w[59] = hc_bytealign_S (w[49], w[50], offset);
      w[58] = hc_bytealign_S (w[48], w[49], offset);
      w[57] = hc_bytealign_S (w[47], w[48], offset);
      w[56] = hc_bytealign_S (w[46], w[47], offset);
      w[55] = hc_bytealign_S (w[45], w[46], offset);
      w[54] = hc_bytealign_S (w[44], w[45], offset);
      w[53] = hc_bytealign_S (w[43], w[44], offset);
      w[52] = hc_bytealign_S (w[42], w[43], offset);
      w[51] = hc_bytealign_S (w[41], w[42], offset);
      w[50] = hc_bytealign_S (w[40], w[41], offset);
      w[49] = hc_bytealign_S (w[39], w[40], offset);
      w[48] = hc_bytealign_S (w[38], w[39], offset);
      w[47] = hc_bytealign_S (w[37], w[38], offset);
      w[46] = hc_bytealign_S (w[36], w[37], offset);
      w[45] = hc_bytealign_S (w[35], w[36], offset);
      w[44] = hc_bytealign_S (w[34], w[35], offset);
      w[43] = hc_bytealign_S (w[33], w[34], offset);
      w[42] = hc_bytealign_S (w[32], w[33], offset);
      w[41] = hc_bytealign_S (w[31], w[32], offset);
      w[40] = hc_bytealign_S (w[30], w[31], offset);
      w[39] = hc_bytealign_S (w[29], w[30], offset);
      w[38] = hc_bytealign_S (w[28], w[29], offset);
      w[37] = hc_bytealign_S (w[27], w[28], offset);
      w[36] = hc_bytealign_S (w[26], w[27], offset);
      w[35] = hc_bytealign_S (w[25], w[26], offset);
      w[34] = hc_bytealign_S (w[24], w[25], offset);
      w[33] = hc_bytealign_S (w[23], w[24], offset);
      w[32] = hc_bytealign_S (w[22], w[23], offset);
      w[31] = hc_bytealign_S (w[21], w[22], offset);
      w[30] = hc_bytealign_S (w[20], w[21], offset);
      w[29] = hc_bytealign_S (w[19], w[20], offset);
      w[28] = hc_bytealign_S (w[18], w[19], offset);
      w[27] = hc_bytealign_S (w[17], w[18], offset);
      w[26] = hc_bytealign_S (w[16], w[17], offset);
      w[25] = hc_bytealign_S (w[15], w[16], offset);
      w[24] = hc_bytealign_S (w[14], w[15], offset);
      w[23] = hc_bytealign_S (w[13], w[14], offset);
      w[22] = hc_bytealign_S (w[12], w[13], offset);
      w[21] = hc_bytealign_S (w[11], w[12], offset);
      w[20] = hc_bytealign_S (w[10], w[11], offset);
      w[19] = hc_bytealign_S (w[ 9], w[10], offset);
      w[18] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[17] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[16] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[15] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[14] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[13] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[12] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[11] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[10] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[ 9] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 10:
      w[63] = hc_bytealign_S (w[52], w[53], offset);
      w[62] = hc_bytealign_S (w[51], w[52], offset);
      w[61] = hc_bytealign_S (w[50], w[51], offset);
      w[60] = hc_bytealign_S (w[49], w[50], offset);
      w[59] = hc_bytealign_S (w[48], w[49], offset);
      w[58] = hc_bytealign_S (w[47], w[48], offset);
      w[57] = hc_bytealign_S (w[46], w[47], offset);
      w[56] = hc_bytealign_S (w[45], w[46], offset);
      w[55] = hc_bytealign_S (w[44], w[45], offset);
      w[54] = hc_bytealign_S (w[43], w[44], offset);
      w[53] = hc_bytealign_S (w[42], w[43], offset);
      w[52] = hc_bytealign_S (w[41], w[42], offset);
      w[51] = hc_bytealign_S (w[40], w[41], offset);
      w[50] = hc_bytealign_S (w[39], w[40], offset);
      w[49] = hc_bytealign_S (w[38], w[39], offset);
      w[48] = hc_bytealign_S (w[37], w[38], offset);
      w[47] = hc_bytealign_S (w[36], w[37], offset);
      w[46] = hc_bytealign_S (w[35], w[36], offset);
      w[45] = hc_bytealign_S (w[34], w[35], offset);
      w[44] = hc_bytealign_S (w[33], w[34], offset);
      w[43] = hc_bytealign_S (w[32], w[33], offset);
      w[42] = hc_bytealign_S (w[31], w[32], offset);
      w[41] = hc_bytealign_S (w[30], w[31], offset);
      w[40] = hc_bytealign_S (w[29], w[30], offset);
      w[39] = hc_bytealign_S (w[28], w[29], offset);
      w[38] = hc_bytealign_S (w[27], w[28], offset);
      w[37] = hc_bytealign_S (w[26], w[27], offset);
      w[36] = hc_bytealign_S (w[25], w[26], offset);
      w[35] = hc_bytealign_S (w[24], w[25], offset);
      w[34] = hc_bytealign_S (w[23], w[24], offset);
      w[33] = hc_bytealign_S (w[22], w[23], offset);
      w[32] = hc_bytealign_S (w[21], w[22], offset);
      w[31] = hc_bytealign_S (w[20], w[21], offset);
      w[30] = hc_bytealign_S (w[19], w[20], offset);
      w[29] = hc_bytealign_S (w[18], w[19], offset);
      w[28] = hc_bytealign_S (w[17], w[18], offset);
      w[27] = hc_bytealign_S (w[16], w[17], offset);
      w[26] = hc_bytealign_S (w[15], w[16], offset);
      w[25] = hc_bytealign_S (w[14], w[15], offset);
      w[24] = hc_bytealign_S (w[13], w[14], offset);
      w[23] = hc_bytealign_S (w[12], w[13], offset);
      w[22] = hc_bytealign_S (w[11], w[12], offset);
      w[21] = hc_bytealign_S (w[10], w[11], offset);
      w[20] = hc_bytealign_S (w[ 9], w[10], offset);
      w[19] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[18] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[17] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[16] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[15] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[14] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[13] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[12] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[11] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[10] = hc_bytealign_S (    0, w[ 0], offset);
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 11:
      w[63] = hc_bytealign_S (w[51], w[52], offset);
      w[62] = hc_bytealign_S (w[50], w[51], offset);
      w[61] = hc_bytealign_S (w[49], w[50], offset);
      w[60] = hc_bytealign_S (w[48], w[49], offset);
      w[59] = hc_bytealign_S (w[47], w[48], offset);
      w[58] = hc_bytealign_S (w[46], w[47], offset);
      w[57] = hc_bytealign_S (w[45], w[46], offset);
      w[56] = hc_bytealign_S (w[44], w[45], offset);
      w[55] = hc_bytealign_S (w[43], w[44], offset);
      w[54] = hc_bytealign_S (w[42], w[43], offset);
      w[53] = hc_bytealign_S (w[41], w[42], offset);
      w[52] = hc_bytealign_S (w[40], w[41], offset);
      w[51] = hc_bytealign_S (w[39], w[40], offset);
      w[50] = hc_bytealign_S (w[38], w[39], offset);
      w[49] = hc_bytealign_S (w[37], w[38], offset);
      w[48] = hc_bytealign_S (w[36], w[37], offset);
      w[47] = hc_bytealign_S (w[35], w[36], offset);
      w[46] = hc_bytealign_S (w[34], w[35], offset);
      w[45] = hc_bytealign_S (w[33], w[34], offset);
      w[44] = hc_bytealign_S (w[32], w[33], offset);
      w[43] = hc_bytealign_S (w[31], w[32], offset);
      w[42] = hc_bytealign_S (w[30], w[31], offset);
      w[41] = hc_bytealign_S (w[29], w[30], offset);
      w[40] = hc_bytealign_S (w[28], w[29], offset);
      w[39] = hc_bytealign_S (w[27], w[28], offset);
      w[38] = hc_bytealign_S (w[26], w[27], offset);
      w[37] = hc_bytealign_S (w[25], w[26], offset);
      w[36] = hc_bytealign_S (w[24], w[25], offset);
      w[35] = hc_bytealign_S (w[23], w[24], offset);
      w[34] = hc_bytealign_S (w[22], w[23], offset);
      w[33] = hc_bytealign_S (w[21], w[22], offset);
      w[32] = hc_bytealign_S (w[20], w[21], offset);
      w[31] = hc_bytealign_S (w[19], w[20], offset);
      w[30] = hc_bytealign_S (w[18], w[19], offset);
      w[29] = hc_bytealign_S (w[17], w[18], offset);
      w[28] = hc_bytealign_S (w[16], w[17], offset);
      w[27] = hc_bytealign_S (w[15], w[16], offset);
      w[26] = hc_bytealign_S (w[14], w[15], offset);
      w[25] = hc_bytealign_S (w[13], w[14], offset);
      w[24] = hc_bytealign_S (w[12], w[13], offset);
      w[23] = hc_bytealign_S (w[11], w[12], offset);
      w[22] = hc_bytealign_S (w[10], w[11], offset);
      w[21] = hc_bytealign_S (w[ 9], w[10], offset);
      w[20] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[19] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[18] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[17] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[16] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[15] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[14] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[13] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[12] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[11] = hc_bytealign_S (    0, w[ 0], offset);
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 12:
      w[63] = hc_bytealign_S (w[50], w[51], offset);
      w[62] = hc_bytealign_S (w[49], w[50], offset);
      w[61] = hc_bytealign_S (w[48], w[49], offset);
      w[60] = hc_bytealign_S (w[47], w[48], offset);
      w[59] = hc_bytealign_S (w[46], w[47], offset);
      w[58] = hc_bytealign_S (w[45], w[46], offset);
      w[57] = hc_bytealign_S (w[44], w[45], offset);
      w[56] = hc_bytealign_S (w[43], w[44], offset);
      w[55] = hc_bytealign_S (w[42], w[43], offset);
      w[54] = hc_bytealign_S (w[41], w[42], offset);
      w[53] = hc_bytealign_S (w[40], w[41], offset);
      w[52] = hc_bytealign_S (w[39], w[40], offset);
      w[51] = hc_bytealign_S (w[38], w[39], offset);
      w[50] = hc_bytealign_S (w[37], w[38], offset);
      w[49] = hc_bytealign_S (w[36], w[37], offset);
      w[48] = hc_bytealign_S (w[35], w[36], offset);
      w[47] = hc_bytealign_S (w[34], w[35], offset);
      w[46] = hc_bytealign_S (w[33], w[34], offset);
      w[45] = hc_bytealign_S (w[32], w[33], offset);
      w[44] = hc_bytealign_S (w[31], w[32], offset);
      w[43] = hc_bytealign_S (w[30], w[31], offset);
      w[42] = hc_bytealign_S (w[29], w[30], offset);
      w[41] = hc_bytealign_S (w[28], w[29], offset);
      w[40] = hc_bytealign_S (w[27], w[28], offset);
      w[39] = hc_bytealign_S (w[26], w[27], offset);
      w[38] = hc_bytealign_S (w[25], w[26], offset);
      w[37] = hc_bytealign_S (w[24], w[25], offset);
      w[36] = hc_bytealign_S (w[23], w[24], offset);
      w[35] = hc_bytealign_S (w[22], w[23], offset);
      w[34] = hc_bytealign_S (w[21], w[22], offset);
      w[33] = hc_bytealign_S (w[20], w[21], offset);
      w[32] = hc_bytealign_S (w[19], w[20], offset);
      w[31] = hc_bytealign_S (w[18], w[19], offset);
      w[30] = hc_bytealign_S (w[17], w[18], offset);
      w[29] = hc_bytealign_S (w[16], w[17], offset);
      w[28] = hc_bytealign_S (w[15], w[16], offset);
      w[27] = hc_bytealign_S (w[14], w[15], offset);
      w[26] = hc_bytealign_S (w[13], w[14], offset);
      w[25] = hc_bytealign_S (w[12], w[13], offset);
      w[24] = hc_bytealign_S (w[11], w[12], offset);
      w[23] = hc_bytealign_S (w[10], w[11], offset);
      w[22] = hc_bytealign_S (w[ 9], w[10], offset);
      w[21] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[20] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[19] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[18] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[17] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[16] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[15] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[14] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[13] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[12] = hc_bytealign_S (    0, w[ 0], offset);
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 13:
      w[63] = hc_bytealign_S (w[49], w[50], offset);
      w[62] = hc_bytealign_S (w[48], w[49], offset);
      w[61] = hc_bytealign_S (w[47], w[48], offset);
      w[60] = hc_bytealign_S (w[46], w[47], offset);
      w[59] = hc_bytealign_S (w[45], w[46], offset);
      w[58] = hc_bytealign_S (w[44], w[45], offset);
      w[57] = hc_bytealign_S (w[43], w[44], offset);
      w[56] = hc_bytealign_S (w[42], w[43], offset);
      w[55] = hc_bytealign_S (w[41], w[42], offset);
      w[54] = hc_bytealign_S (w[40], w[41], offset);
      w[53] = hc_bytealign_S (w[39], w[40], offset);
      w[52] = hc_bytealign_S (w[38], w[39], offset);
      w[51] = hc_bytealign_S (w[37], w[38], offset);
      w[50] = hc_bytealign_S (w[36], w[37], offset);
      w[49] = hc_bytealign_S (w[35], w[36], offset);
      w[48] = hc_bytealign_S (w[34], w[35], offset);
      w[47] = hc_bytealign_S (w[33], w[34], offset);
      w[46] = hc_bytealign_S (w[32], w[33], offset);
      w[45] = hc_bytealign_S (w[31], w[32], offset);
      w[44] = hc_bytealign_S (w[30], w[31], offset);
      w[43] = hc_bytealign_S (w[29], w[30], offset);
      w[42] = hc_bytealign_S (w[28], w[29], offset);
      w[41] = hc_bytealign_S (w[27], w[28], offset);
      w[40] = hc_bytealign_S (w[26], w[27], offset);
      w[39] = hc_bytealign_S (w[25], w[26], offset);
      w[38] = hc_bytealign_S (w[24], w[25], offset);
      w[37] = hc_bytealign_S (w[23], w[24], offset);
      w[36] = hc_bytealign_S (w[22], w[23], offset);
      w[35] = hc_bytealign_S (w[21], w[22], offset);
      w[34] = hc_bytealign_S (w[20], w[21], offset);
      w[33] = hc_bytealign_S (w[19], w[20], offset);
      w[32] = hc_bytealign_S (w[18], w[19], offset);
      w[31] = hc_bytealign_S (w[17], w[18], offset);
      w[30] = hc_bytealign_S (w[16], w[17], offset);
      w[29] = hc_bytealign_S (w[15], w[16], offset);
      w[28] = hc_bytealign_S (w[14], w[15], offset);
      w[27] = hc_bytealign_S (w[13], w[14], offset);
      w[26] = hc_bytealign_S (w[12], w[13], offset);
      w[25] = hc_bytealign_S (w[11], w[12], offset);
      w[24] = hc_bytealign_S (w[10], w[11], offset);
      w[23] = hc_bytealign_S (w[ 9], w[10], offset);
      w[22] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[21] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[20] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[19] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[18] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[17] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[16] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[15] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[14] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[13] = hc_bytealign_S (    0, w[ 0], offset);
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 14:
      w[63] = hc_bytealign_S (w[48], w[49], offset);
      w[62] = hc_bytealign_S (w[47], w[48], offset);
      w[61] = hc_bytealign_S (w[46], w[47], offset);
      w[60] = hc_bytealign_S (w[45], w[46], offset);
      w[59] = hc_bytealign_S (w[44], w[45], offset);
      w[58] = hc_bytealign_S (w[43], w[44], offset);
      w[57] = hc_bytealign_S (w[42], w[43], offset);
      w[56] = hc_bytealign_S (w[41], w[42], offset);
      w[55] = hc_bytealign_S (w[40], w[41], offset);
      w[54] = hc_bytealign_S (w[39], w[40], offset);
      w[53] = hc_bytealign_S (w[38], w[39], offset);
      w[52] = hc_bytealign_S (w[37], w[38], offset);
      w[51] = hc_bytealign_S (w[36], w[37], offset);
      w[50] = hc_bytealign_S (w[35], w[36], offset);
      w[49] = hc_bytealign_S (w[34], w[35], offset);
      w[48] = hc_bytealign_S (w[33], w[34], offset);
      w[47] = hc_bytealign_S (w[32], w[33], offset);
      w[46] = hc_bytealign_S (w[31], w[32], offset);
      w[45] = hc_bytealign_S (w[30], w[31], offset);
      w[44] = hc_bytealign_S (w[29], w[30], offset);
      w[43] = hc_bytealign_S (w[28], w[29], offset);
      w[42] = hc_bytealign_S (w[27], w[28], offset);
      w[41] = hc_bytealign_S (w[26], w[27], offset);
      w[40] = hc_bytealign_S (w[25], w[26], offset);
      w[39] = hc_bytealign_S (w[24], w[25], offset);
      w[38] = hc_bytealign_S (w[23], w[24], offset);
      w[37] = hc_bytealign_S (w[22], w[23], offset);
      w[36] = hc_bytealign_S (w[21], w[22], offset);
      w[35] = hc_bytealign_S (w[20], w[21], offset);
      w[34] = hc_bytealign_S (w[19], w[20], offset);
      w[33] = hc_bytealign_S (w[18], w[19], offset);
      w[32] = hc_bytealign_S (w[17], w[18], offset);
      w[31] = hc_bytealign_S (w[16], w[17], offset);
      w[30] = hc_bytealign_S (w[15], w[16], offset);
      w[29] = hc_bytealign_S (w[14], w[15], offset);
      w[28] = hc_bytealign_S (w[13], w[14], offset);
      w[27] = hc_bytealign_S (w[12], w[13], offset);
      w[26] = hc_bytealign_S (w[11], w[12], offset);
      w[25] = hc_bytealign_S (w[10], w[11], offset);
      w[24] = hc_bytealign_S (w[ 9], w[10], offset);
      w[23] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[22] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[21] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[20] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[19] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[18] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[17] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[16] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[15] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[14] = hc_bytealign_S (    0, w[ 0], offset);
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 15:
      w[63] = hc_bytealign_S (w[47], w[48], offset);
      w[62] = hc_bytealign_S (w[46], w[47], offset);
      w[61] = hc_bytealign_S (w[45], w[46], offset);
      w[60] = hc_bytealign_S (w[44], w[45], offset);
      w[59] = hc_bytealign_S (w[43], w[44], offset);
      w[58] = hc_bytealign_S (w[42], w[43], offset);
      w[57] = hc_bytealign_S (w[41], w[42], offset);
      w[56] = hc_bytealign_S (w[40], w[41], offset);
      w[55] = hc_bytealign_S (w[39], w[40], offset);
      w[54] = hc_bytealign_S (w[38], w[39], offset);
      w[53] = hc_bytealign_S (w[37], w[38], offset);
      w[52] = hc_bytealign_S (w[36], w[37], offset);
      w[51] = hc_bytealign_S (w[35], w[36], offset);
      w[50] = hc_bytealign_S (w[34], w[35], offset);
      w[49] = hc_bytealign_S (w[33], w[34], offset);
      w[48] = hc_bytealign_S (w[32], w[33], offset);
      w[47] = hc_bytealign_S (w[31], w[32], offset);
      w[46] = hc_bytealign_S (w[30], w[31], offset);
      w[45] = hc_bytealign_S (w[29], w[30], offset);
      w[44] = hc_bytealign_S (w[28], w[29], offset);
      w[43] = hc_bytealign_S (w[27], w[28], offset);
      w[42] = hc_bytealign_S (w[26], w[27], offset);
      w[41] = hc_bytealign_S (w[25], w[26], offset);
      w[40] = hc_bytealign_S (w[24], w[25], offset);
      w[39] = hc_bytealign_S (w[23], w[24], offset);
      w[38] = hc_bytealign_S (w[22], w[23], offset);
      w[37] = hc_bytealign_S (w[21], w[22], offset);
      w[36] = hc_bytealign_S (w[20], w[21], offset);
      w[35] = hc_bytealign_S (w[19], w[20], offset);
      w[34] = hc_bytealign_S (w[18], w[19], offset);
      w[33] = hc_bytealign_S (w[17], w[18], offset);
      w[32] = hc_bytealign_S (w[16], w[17], offset);
      w[31] = hc_bytealign_S (w[15], w[16], offset);
      w[30] = hc_bytealign_S (w[14], w[15], offset);
      w[29] = hc_bytealign_S (w[13], w[14], offset);
      w[28] = hc_bytealign_S (w[12], w[13], offset);
      w[27] = hc_bytealign_S (w[11], w[12], offset);
      w[26] = hc_bytealign_S (w[10], w[11], offset);
      w[25] = hc_bytealign_S (w[ 9], w[10], offset);
      w[24] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[23] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[22] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[21] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[20] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[19] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[18] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[17] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[16] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[15] = hc_bytealign_S (    0, w[ 0], offset);
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 16:
      w[63] = hc_bytealign_S (w[46], w[47], offset);
      w[62] = hc_bytealign_S (w[45], w[46], offset);
      w[61] = hc_bytealign_S (w[44], w[45], offset);
      w[60] = hc_bytealign_S (w[43], w[44], offset);
      w[59] = hc_bytealign_S (w[42], w[43], offset);
      w[58] = hc_bytealign_S (w[41], w[42], offset);
      w[57] = hc_bytealign_S (w[40], w[41], offset);
      w[56] = hc_bytealign_S (w[39], w[40], offset);
      w[55] = hc_bytealign_S (w[38], w[39], offset);
      w[54] = hc_bytealign_S (w[37], w[38], offset);
      w[53] = hc_bytealign_S (w[36], w[37], offset);
      w[52] = hc_bytealign_S (w[35], w[36], offset);
      w[51] = hc_bytealign_S (w[34], w[35], offset);
      w[50] = hc_bytealign_S (w[33], w[34], offset);
      w[49] = hc_bytealign_S (w[32], w[33], offset);
      w[48] = hc_bytealign_S (w[31], w[32], offset);
      w[47] = hc_bytealign_S (w[30], w[31], offset);
      w[46] = hc_bytealign_S (w[29], w[30], offset);
      w[45] = hc_bytealign_S (w[28], w[29], offset);
      w[44] = hc_bytealign_S (w[27], w[28], offset);
      w[43] = hc_bytealign_S (w[26], w[27], offset);
      w[42] = hc_bytealign_S (w[25], w[26], offset);
      w[41] = hc_bytealign_S (w[24], w[25], offset);
      w[40] = hc_bytealign_S (w[23], w[24], offset);
      w[39] = hc_bytealign_S (w[22], w[23], offset);
      w[38] = hc_bytealign_S (w[21], w[22], offset);
      w[37] = hc_bytealign_S (w[20], w[21], offset);
      w[36] = hc_bytealign_S (w[19], w[20], offset);
      w[35] = hc_bytealign_S (w[18], w[19], offset);
      w[34] = hc_bytealign_S (w[17], w[18], offset);
      w[33] = hc_bytealign_S (w[16], w[17], offset);
      w[32] = hc_bytealign_S (w[15], w[16], offset);
      w[31] = hc_bytealign_S (w[14], w[15], offset);
      w[30] = hc_bytealign_S (w[13], w[14], offset);
      w[29] = hc_bytealign_S (w[12], w[13], offset);
      w[28] = hc_bytealign_S (w[11], w[12], offset);
      w[27] = hc_bytealign_S (w[10], w[11], offset);
      w[26] = hc_bytealign_S (w[ 9], w[10], offset);
      w[25] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[24] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[23] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[22] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[21] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[20] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[19] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[18] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[17] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[16] = hc_bytealign_S (    0, w[ 0], offset);
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 17:
      w[63] = hc_bytealign_S (w[45], w[46], offset);
      w[62] = hc_bytealign_S (w[44], w[45], offset);
      w[61] = hc_bytealign_S (w[43], w[44], offset);
      w[60] = hc_bytealign_S (w[42], w[43], offset);
      w[59] = hc_bytealign_S (w[41], w[42], offset);
      w[58] = hc_bytealign_S (w[40], w[41], offset);
      w[57] = hc_bytealign_S (w[39], w[40], offset);
      w[56] = hc_bytealign_S (w[38], w[39], offset);
      w[55] = hc_bytealign_S (w[37], w[38], offset);
      w[54] = hc_bytealign_S (w[36], w[37], offset);
      w[53] = hc_bytealign_S (w[35], w[36], offset);
      w[52] = hc_bytealign_S (w[34], w[35], offset);
      w[51] = hc_bytealign_S (w[33], w[34], offset);
      w[50] = hc_bytealign_S (w[32], w[33], offset);
      w[49] = hc_bytealign_S (w[31], w[32], offset);
      w[48] = hc_bytealign_S (w[30], w[31], offset);
      w[47] = hc_bytealign_S (w[29], w[30], offset);
      w[46] = hc_bytealign_S (w[28], w[29], offset);
      w[45] = hc_bytealign_S (w[27], w[28], offset);
      w[44] = hc_bytealign_S (w[26], w[27], offset);
      w[43] = hc_bytealign_S (w[25], w[26], offset);
      w[42] = hc_bytealign_S (w[24], w[25], offset);
      w[41] = hc_bytealign_S (w[23], w[24], offset);
      w[40] = hc_bytealign_S (w[22], w[23], offset);
      w[39] = hc_bytealign_S (w[21], w[22], offset);
      w[38] = hc_bytealign_S (w[20], w[21], offset);
      w[37] = hc_bytealign_S (w[19], w[20], offset);
      w[36] = hc_bytealign_S (w[18], w[19], offset);
      w[35] = hc_bytealign_S (w[17], w[18], offset);
      w[34] = hc_bytealign_S (w[16], w[17], offset);
      w[33] = hc_bytealign_S (w[15], w[16], offset);
      w[32] = hc_bytealign_S (w[14], w[15], offset);
      w[31] = hc_bytealign_S (w[13], w[14], offset);
      w[30] = hc_bytealign_S (w[12], w[13], offset);
      w[29] = hc_bytealign_S (w[11], w[12], offset);
      w[28] = hc_bytealign_S (w[10], w[11], offset);
      w[27] = hc_bytealign_S (w[ 9], w[10], offset);
      w[26] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[25] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[24] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[23] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[22] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[21] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[20] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[19] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[18] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[17] = hc_bytealign_S (    0, w[ 0], offset);
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 18:
      w[63] = hc_bytealign_S (w[44], w[45], offset);
      w[62] = hc_bytealign_S (w[43], w[44], offset);
      w[61] = hc_bytealign_S (w[42], w[43], offset);
      w[60] = hc_bytealign_S (w[41], w[42], offset);
      w[59] = hc_bytealign_S (w[40], w[41], offset);
      w[58] = hc_bytealign_S (w[39], w[40], offset);
      w[57] = hc_bytealign_S (w[38], w[39], offset);
      w[56] = hc_bytealign_S (w[37], w[38], offset);
      w[55] = hc_bytealign_S (w[36], w[37], offset);
      w[54] = hc_bytealign_S (w[35], w[36], offset);
      w[53] = hc_bytealign_S (w[34], w[35], offset);
      w[52] = hc_bytealign_S (w[33], w[34], offset);
      w[51] = hc_bytealign_S (w[32], w[33], offset);
      w[50] = hc_bytealign_S (w[31], w[32], offset);
      w[49] = hc_bytealign_S (w[30], w[31], offset);
      w[48] = hc_bytealign_S (w[29], w[30], offset);
      w[47] = hc_bytealign_S (w[28], w[29], offset);
      w[46] = hc_bytealign_S (w[27], w[28], offset);
      w[45] = hc_bytealign_S (w[26], w[27], offset);
      w[44] = hc_bytealign_S (w[25], w[26], offset);
      w[43] = hc_bytealign_S (w[24], w[25], offset);
      w[42] = hc_bytealign_S (w[23], w[24], offset);
      w[41] = hc_bytealign_S (w[22], w[23], offset);
      w[40] = hc_bytealign_S (w[21], w[22], offset);
      w[39] = hc_bytealign_S (w[20], w[21], offset);
      w[38] = hc_bytealign_S (w[19], w[20], offset);
      w[37] = hc_bytealign_S (w[18], w[19], offset);
      w[36] = hc_bytealign_S (w[17], w[18], offset);
      w[35] = hc_bytealign_S (w[16], w[17], offset);
      w[34] = hc_bytealign_S (w[15], w[16], offset);
      w[33] = hc_bytealign_S (w[14], w[15], offset);
      w[32] = hc_bytealign_S (w[13], w[14], offset);
      w[31] = hc_bytealign_S (w[12], w[13], offset);
      w[30] = hc_bytealign_S (w[11], w[12], offset);
      w[29] = hc_bytealign_S (w[10], w[11], offset);
      w[28] = hc_bytealign_S (w[ 9], w[10], offset);
      w[27] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[26] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[25] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[24] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[23] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[22] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[21] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[20] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[19] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[18] = hc_bytealign_S (    0, w[ 0], offset);
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 19:
      w[63] = hc_bytealign_S (w[43], w[44], offset);
      w[62] = hc_bytealign_S (w[42], w[43], offset);
      w[61] = hc_bytealign_S (w[41], w[42], offset);
      w[60] = hc_bytealign_S (w[40], w[41], offset);
      w[59] = hc_bytealign_S (w[39], w[40], offset);
      w[58] = hc_bytealign_S (w[38], w[39], offset);
      w[57] = hc_bytealign_S (w[37], w[38], offset);
      w[56] = hc_bytealign_S (w[36], w[37], offset);
      w[55] = hc_bytealign_S (w[35], w[36], offset);
      w[54] = hc_bytealign_S (w[34], w[35], offset);
      w[53] = hc_bytealign_S (w[33], w[34], offset);
      w[52] = hc_bytealign_S (w[32], w[33], offset);
      w[51] = hc_bytealign_S (w[31], w[32], offset);
      w[50] = hc_bytealign_S (w[30], w[31], offset);
      w[49] = hc_bytealign_S (w[29], w[30], offset);
      w[48] = hc_bytealign_S (w[28], w[29], offset);
      w[47] = hc_bytealign_S (w[27], w[28], offset);
      w[46] = hc_bytealign_S (w[26], w[27], offset);
      w[45] = hc_bytealign_S (w[25], w[26], offset);
      w[44] = hc_bytealign_S (w[24], w[25], offset);
      w[43] = hc_bytealign_S (w[23], w[24], offset);
      w[42] = hc_bytealign_S (w[22], w[23], offset);
      w[41] = hc_bytealign_S (w[21], w[22], offset);
      w[40] = hc_bytealign_S (w[20], w[21], offset);
      w[39] = hc_bytealign_S (w[19], w[20], offset);
      w[38] = hc_bytealign_S (w[18], w[19], offset);
      w[37] = hc_bytealign_S (w[17], w[18], offset);
      w[36] = hc_bytealign_S (w[16], w[17], offset);
      w[35] = hc_bytealign_S (w[15], w[16], offset);
      w[34] = hc_bytealign_S (w[14], w[15], offset);
      w[33] = hc_bytealign_S (w[13], w[14], offset);
      w[32] = hc_bytealign_S (w[12], w[13], offset);
      w[31] = hc_bytealign_S (w[11], w[12], offset);
      w[30] = hc_bytealign_S (w[10], w[11], offset);
      w[29] = hc_bytealign_S (w[ 9], w[10], offset);
      w[28] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[27] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[26] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[25] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[24] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[23] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[22] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[21] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[20] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[19] = hc_bytealign_S (    0, w[ 0], offset);
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 20:
      w[63] = hc_bytealign_S (w[42], w[43], offset);
      w[62] = hc_bytealign_S (w[41], w[42], offset);
      w[61] = hc_bytealign_S (w[40], w[41], offset);
      w[60] = hc_bytealign_S (w[39], w[40], offset);
      w[59] = hc_bytealign_S (w[38], w[39], offset);
      w[58] = hc_bytealign_S (w[37], w[38], offset);
      w[57] = hc_bytealign_S (w[36], w[37], offset);
      w[56] = hc_bytealign_S (w[35], w[36], offset);
      w[55] = hc_bytealign_S (w[34], w[35], offset);
      w[54] = hc_bytealign_S (w[33], w[34], offset);
      w[53] = hc_bytealign_S (w[32], w[33], offset);
      w[52] = hc_bytealign_S (w[31], w[32], offset);
      w[51] = hc_bytealign_S (w[30], w[31], offset);
      w[50] = hc_bytealign_S (w[29], w[30], offset);
      w[49] = hc_bytealign_S (w[28], w[29], offset);
      w[48] = hc_bytealign_S (w[27], w[28], offset);
      w[47] = hc_bytealign_S (w[26], w[27], offset);
      w[46] = hc_bytealign_S (w[25], w[26], offset);
      w[45] = hc_bytealign_S (w[24], w[25], offset);
      w[44] = hc_bytealign_S (w[23], w[24], offset);
      w[43] = hc_bytealign_S (w[22], w[23], offset);
      w[42] = hc_bytealign_S (w[21], w[22], offset);
      w[41] = hc_bytealign_S (w[20], w[21], offset);
      w[40] = hc_bytealign_S (w[19], w[20], offset);
      w[39] = hc_bytealign_S (w[18], w[19], offset);
      w[38] = hc_bytealign_S (w[17], w[18], offset);
      w[37] = hc_bytealign_S (w[16], w[17], offset);
      w[36] = hc_bytealign_S (w[15], w[16], offset);
      w[35] = hc_bytealign_S (w[14], w[15], offset);
      w[34] = hc_bytealign_S (w[13], w[14], offset);
      w[33] = hc_bytealign_S (w[12], w[13], offset);
      w[32] = hc_bytealign_S (w[11], w[12], offset);
      w[31] = hc_bytealign_S (w[10], w[11], offset);
      w[30] = hc_bytealign_S (w[ 9], w[10], offset);
      w[29] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[28] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[27] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[26] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[25] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[24] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[23] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[22] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[21] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[20] = hc_bytealign_S (    0, w[ 0], offset);
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 21:
      w[63] = hc_bytealign_S (w[41], w[42], offset);
      w[62] = hc_bytealign_S (w[40], w[41], offset);
      w[61] = hc_bytealign_S (w[39], w[40], offset);
      w[60] = hc_bytealign_S (w[38], w[39], offset);
      w[59] = hc_bytealign_S (w[37], w[38], offset);
      w[58] = hc_bytealign_S (w[36], w[37], offset);
      w[57] = hc_bytealign_S (w[35], w[36], offset);
      w[56] = hc_bytealign_S (w[34], w[35], offset);
      w[55] = hc_bytealign_S (w[33], w[34], offset);
      w[54] = hc_bytealign_S (w[32], w[33], offset);
      w[53] = hc_bytealign_S (w[31], w[32], offset);
      w[52] = hc_bytealign_S (w[30], w[31], offset);
      w[51] = hc_bytealign_S (w[29], w[30], offset);
      w[50] = hc_bytealign_S (w[28], w[29], offset);
      w[49] = hc_bytealign_S (w[27], w[28], offset);
      w[48] = hc_bytealign_S (w[26], w[27], offset);
      w[47] = hc_bytealign_S (w[25], w[26], offset);
      w[46] = hc_bytealign_S (w[24], w[25], offset);
      w[45] = hc_bytealign_S (w[23], w[24], offset);
      w[44] = hc_bytealign_S (w[22], w[23], offset);
      w[43] = hc_bytealign_S (w[21], w[22], offset);
      w[42] = hc_bytealign_S (w[20], w[21], offset);
      w[41] = hc_bytealign_S (w[19], w[20], offset);
      w[40] = hc_bytealign_S (w[18], w[19], offset);
      w[39] = hc_bytealign_S (w[17], w[18], offset);
      w[38] = hc_bytealign_S (w[16], w[17], offset);
      w[37] = hc_bytealign_S (w[15], w[16], offset);
      w[36] = hc_bytealign_S (w[14], w[15], offset);
      w[35] = hc_bytealign_S (w[13], w[14], offset);
      w[34] = hc_bytealign_S (w[12], w[13], offset);
      w[33] = hc_bytealign_S (w[11], w[12], offset);
      w[32] = hc_bytealign_S (w[10], w[11], offset);
      w[31] = hc_bytealign_S (w[ 9], w[10], offset);
      w[30] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[29] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[28] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[27] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[26] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[25] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[24] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[23] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[22] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[21] = hc_bytealign_S (    0, w[ 0], offset);
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 22:
      w[63] = hc_bytealign_S (w[40], w[41], offset);
      w[62] = hc_bytealign_S (w[39], w[40], offset);
      w[61] = hc_bytealign_S (w[38], w[39], offset);
      w[60] = hc_bytealign_S (w[37], w[38], offset);
      w[59] = hc_bytealign_S (w[36], w[37], offset);
      w[58] = hc_bytealign_S (w[35], w[36], offset);
      w[57] = hc_bytealign_S (w[34], w[35], offset);
      w[56] = hc_bytealign_S (w[33], w[34], offset);
      w[55] = hc_bytealign_S (w[32], w[33], offset);
      w[54] = hc_bytealign_S (w[31], w[32], offset);
      w[53] = hc_bytealign_S (w[30], w[31], offset);
      w[52] = hc_bytealign_S (w[29], w[30], offset);
      w[51] = hc_bytealign_S (w[28], w[29], offset);
      w[50] = hc_bytealign_S (w[27], w[28], offset);
      w[49] = hc_bytealign_S (w[26], w[27], offset);
      w[48] = hc_bytealign_S (w[25], w[26], offset);
      w[47] = hc_bytealign_S (w[24], w[25], offset);
      w[46] = hc_bytealign_S (w[23], w[24], offset);
      w[45] = hc_bytealign_S (w[22], w[23], offset);
      w[44] = hc_bytealign_S (w[21], w[22], offset);
      w[43] = hc_bytealign_S (w[20], w[21], offset);
      w[42] = hc_bytealign_S (w[19], w[20], offset);
      w[41] = hc_bytealign_S (w[18], w[19], offset);
      w[40] = hc_bytealign_S (w[17], w[18], offset);
      w[39] = hc_bytealign_S (w[16], w[17], offset);
      w[38] = hc_bytealign_S (w[15], w[16], offset);
      w[37] = hc_bytealign_S (w[14], w[15], offset);
      w[36] = hc_bytealign_S (w[13], w[14], offset);
      w[35] = hc_bytealign_S (w[12], w[13], offset);
      w[34] = hc_bytealign_S (w[11], w[12], offset);
      w[33] = hc_bytealign_S (w[10], w[11], offset);
      w[32] = hc_bytealign_S (w[ 9], w[10], offset);
      w[31] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[30] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[29] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[28] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[27] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[26] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[25] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[24] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[23] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[22] = hc_bytealign_S (    0, w[ 0], offset);
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 23:
      w[63] = hc_bytealign_S (w[39], w[40], offset);
      w[62] = hc_bytealign_S (w[38], w[39], offset);
      w[61] = hc_bytealign_S (w[37], w[38], offset);
      w[60] = hc_bytealign_S (w[36], w[37], offset);
      w[59] = hc_bytealign_S (w[35], w[36], offset);
      w[58] = hc_bytealign_S (w[34], w[35], offset);
      w[57] = hc_bytealign_S (w[33], w[34], offset);
      w[56] = hc_bytealign_S (w[32], w[33], offset);
      w[55] = hc_bytealign_S (w[31], w[32], offset);
      w[54] = hc_bytealign_S (w[30], w[31], offset);
      w[53] = hc_bytealign_S (w[29], w[30], offset);
      w[52] = hc_bytealign_S (w[28], w[29], offset);
      w[51] = hc_bytealign_S (w[27], w[28], offset);
      w[50] = hc_bytealign_S (w[26], w[27], offset);
      w[49] = hc_bytealign_S (w[25], w[26], offset);
      w[48] = hc_bytealign_S (w[24], w[25], offset);
      w[47] = hc_bytealign_S (w[23], w[24], offset);
      w[46] = hc_bytealign_S (w[22], w[23], offset);
      w[45] = hc_bytealign_S (w[21], w[22], offset);
      w[44] = hc_bytealign_S (w[20], w[21], offset);
      w[43] = hc_bytealign_S (w[19], w[20], offset);
      w[42] = hc_bytealign_S (w[18], w[19], offset);
      w[41] = hc_bytealign_S (w[17], w[18], offset);
      w[40] = hc_bytealign_S (w[16], w[17], offset);
      w[39] = hc_bytealign_S (w[15], w[16], offset);
      w[38] = hc_bytealign_S (w[14], w[15], offset);
      w[37] = hc_bytealign_S (w[13], w[14], offset);
      w[36] = hc_bytealign_S (w[12], w[13], offset);
      w[35] = hc_bytealign_S (w[11], w[12], offset);
      w[34] = hc_bytealign_S (w[10], w[11], offset);
      w[33] = hc_bytealign_S (w[ 9], w[10], offset);
      w[32] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[31] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[30] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[29] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[28] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[27] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[26] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[25] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[24] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[23] = hc_bytealign_S (    0, w[ 0], offset);
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 24:
      w[63] = hc_bytealign_S (w[38], w[39], offset);
      w[62] = hc_bytealign_S (w[37], w[38], offset);
      w[61] = hc_bytealign_S (w[36], w[37], offset);
      w[60] = hc_bytealign_S (w[35], w[36], offset);
      w[59] = hc_bytealign_S (w[34], w[35], offset);
      w[58] = hc_bytealign_S (w[33], w[34], offset);
      w[57] = hc_bytealign_S (w[32], w[33], offset);
      w[56] = hc_bytealign_S (w[31], w[32], offset);
      w[55] = hc_bytealign_S (w[30], w[31], offset);
      w[54] = hc_bytealign_S (w[29], w[30], offset);
      w[53] = hc_bytealign_S (w[28], w[29], offset);
      w[52] = hc_bytealign_S (w[27], w[28], offset);
      w[51] = hc_bytealign_S (w[26], w[27], offset);
      w[50] = hc_bytealign_S (w[25], w[26], offset);
      w[49] = hc_bytealign_S (w[24], w[25], offset);
      w[48] = hc_bytealign_S (w[23], w[24], offset);
      w[47] = hc_bytealign_S (w[22], w[23], offset);
      w[46] = hc_bytealign_S (w[21], w[22], offset);
      w[45] = hc_bytealign_S (w[20], w[21], offset);
      w[44] = hc_bytealign_S (w[19], w[20], offset);
      w[43] = hc_bytealign_S (w[18], w[19], offset);
      w[42] = hc_bytealign_S (w[17], w[18], offset);
      w[41] = hc_bytealign_S (w[16], w[17], offset);
      w[40] = hc_bytealign_S (w[15], w[16], offset);
      w[39] = hc_bytealign_S (w[14], w[15], offset);
      w[38] = hc_bytealign_S (w[13], w[14], offset);
      w[37] = hc_bytealign_S (w[12], w[13], offset);
      w[36] = hc_bytealign_S (w[11], w[12], offset);
      w[35] = hc_bytealign_S (w[10], w[11], offset);
      w[34] = hc_bytealign_S (w[ 9], w[10], offset);
      w[33] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[32] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[31] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[30] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[29] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[28] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[27] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[26] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[25] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[24] = hc_bytealign_S (    0, w[ 0], offset);
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 25:
      w[63] = hc_bytealign_S (w[37], w[38], offset);
      w[62] = hc_bytealign_S (w[36], w[37], offset);
      w[61] = hc_bytealign_S (w[35], w[36], offset);
      w[60] = hc_bytealign_S (w[34], w[35], offset);
      w[59] = hc_bytealign_S (w[33], w[34], offset);
      w[58] = hc_bytealign_S (w[32], w[33], offset);
      w[57] = hc_bytealign_S (w[31], w[32], offset);
      w[56] = hc_bytealign_S (w[30], w[31], offset);
      w[55] = hc_bytealign_S (w[29], w[30], offset);
      w[54] = hc_bytealign_S (w[28], w[29], offset);
      w[53] = hc_bytealign_S (w[27], w[28], offset);
      w[52] = hc_bytealign_S (w[26], w[27], offset);
      w[51] = hc_bytealign_S (w[25], w[26], offset);
      w[50] = hc_bytealign_S (w[24], w[25], offset);
      w[49] = hc_bytealign_S (w[23], w[24], offset);
      w[48] = hc_bytealign_S (w[22], w[23], offset);
      w[47] = hc_bytealign_S (w[21], w[22], offset);
      w[46] = hc_bytealign_S (w[20], w[21], offset);
      w[45] = hc_bytealign_S (w[19], w[20], offset);
      w[44] = hc_bytealign_S (w[18], w[19], offset);
      w[43] = hc_bytealign_S (w[17], w[18], offset);
      w[42] = hc_bytealign_S (w[16], w[17], offset);
      w[41] = hc_bytealign_S (w[15], w[16], offset);
      w[40] = hc_bytealign_S (w[14], w[15], offset);
      w[39] = hc_bytealign_S (w[13], w[14], offset);
      w[38] = hc_bytealign_S (w[12], w[13], offset);
      w[37] = hc_bytealign_S (w[11], w[12], offset);
      w[36] = hc_bytealign_S (w[10], w[11], offset);
      w[35] = hc_bytealign_S (w[ 9], w[10], offset);
      w[34] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[33] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[32] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[31] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[30] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[29] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[28] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[27] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[26] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[25] = hc_bytealign_S (    0, w[ 0], offset);
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 26:
      w[63] = hc_bytealign_S (w[36], w[37], offset);
      w[62] = hc_bytealign_S (w[35], w[36], offset);
      w[61] = hc_bytealign_S (w[34], w[35], offset);
      w[60] = hc_bytealign_S (w[33], w[34], offset);
      w[59] = hc_bytealign_S (w[32], w[33], offset);
      w[58] = hc_bytealign_S (w[31], w[32], offset);
      w[57] = hc_bytealign_S (w[30], w[31], offset);
      w[56] = hc_bytealign_S (w[29], w[30], offset);
      w[55] = hc_bytealign_S (w[28], w[29], offset);
      w[54] = hc_bytealign_S (w[27], w[28], offset);
      w[53] = hc_bytealign_S (w[26], w[27], offset);
      w[52] = hc_bytealign_S (w[25], w[26], offset);
      w[51] = hc_bytealign_S (w[24], w[25], offset);
      w[50] = hc_bytealign_S (w[23], w[24], offset);
      w[49] = hc_bytealign_S (w[22], w[23], offset);
      w[48] = hc_bytealign_S (w[21], w[22], offset);
      w[47] = hc_bytealign_S (w[20], w[21], offset);
      w[46] = hc_bytealign_S (w[19], w[20], offset);
      w[45] = hc_bytealign_S (w[18], w[19], offset);
      w[44] = hc_bytealign_S (w[17], w[18], offset);
      w[43] = hc_bytealign_S (w[16], w[17], offset);
      w[42] = hc_bytealign_S (w[15], w[16], offset);
      w[41] = hc_bytealign_S (w[14], w[15], offset);
      w[40] = hc_bytealign_S (w[13], w[14], offset);
      w[39] = hc_bytealign_S (w[12], w[13], offset);
      w[38] = hc_bytealign_S (w[11], w[12], offset);
      w[37] = hc_bytealign_S (w[10], w[11], offset);
      w[36] = hc_bytealign_S (w[ 9], w[10], offset);
      w[35] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[34] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[33] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[32] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[31] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[30] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[29] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[28] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[27] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[26] = hc_bytealign_S (    0, w[ 0], offset);
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 27:
      w[63] = hc_bytealign_S (w[35], w[36], offset);
      w[62] = hc_bytealign_S (w[34], w[35], offset);
      w[61] = hc_bytealign_S (w[33], w[34], offset);
      w[60] = hc_bytealign_S (w[32], w[33], offset);
      w[59] = hc_bytealign_S (w[31], w[32], offset);
      w[58] = hc_bytealign_S (w[30], w[31], offset);
      w[57] = hc_bytealign_S (w[29], w[30], offset);
      w[56] = hc_bytealign_S (w[28], w[29], offset);
      w[55] = hc_bytealign_S (w[27], w[28], offset);
      w[54] = hc_bytealign_S (w[26], w[27], offset);
      w[53] = hc_bytealign_S (w[25], w[26], offset);
      w[52] = hc_bytealign_S (w[24], w[25], offset);
      w[51] = hc_bytealign_S (w[23], w[24], offset);
      w[50] = hc_bytealign_S (w[22], w[23], offset);
      w[49] = hc_bytealign_S (w[21], w[22], offset);
      w[48] = hc_bytealign_S (w[20], w[21], offset);
      w[47] = hc_bytealign_S (w[19], w[20], offset);
      w[46] = hc_bytealign_S (w[18], w[19], offset);
      w[45] = hc_bytealign_S (w[17], w[18], offset);
      w[44] = hc_bytealign_S (w[16], w[17], offset);
      w[43] = hc_bytealign_S (w[15], w[16], offset);
      w[42] = hc_bytealign_S (w[14], w[15], offset);
      w[41] = hc_bytealign_S (w[13], w[14], offset);
      w[40] = hc_bytealign_S (w[12], w[13], offset);
      w[39] = hc_bytealign_S (w[11], w[12], offset);
      w[38] = hc_bytealign_S (w[10], w[11], offset);
      w[37] = hc_bytealign_S (w[ 9], w[10], offset);
      w[36] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[35] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[34] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[33] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[32] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[31] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[30] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[29] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[28] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[27] = hc_bytealign_S (    0, w[ 0], offset);
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 28:
      w[63] = hc_bytealign_S (w[34], w[35], offset);
      w[62] = hc_bytealign_S (w[33], w[34], offset);
      w[61] = hc_bytealign_S (w[32], w[33], offset);
      w[60] = hc_bytealign_S (w[31], w[32], offset);
      w[59] = hc_bytealign_S (w[30], w[31], offset);
      w[58] = hc_bytealign_S (w[29], w[30], offset);
      w[57] = hc_bytealign_S (w[28], w[29], offset);
      w[56] = hc_bytealign_S (w[27], w[28], offset);
      w[55] = hc_bytealign_S (w[26], w[27], offset);
      w[54] = hc_bytealign_S (w[25], w[26], offset);
      w[53] = hc_bytealign_S (w[24], w[25], offset);
      w[52] = hc_bytealign_S (w[23], w[24], offset);
      w[51] = hc_bytealign_S (w[22], w[23], offset);
      w[50] = hc_bytealign_S (w[21], w[22], offset);
      w[49] = hc_bytealign_S (w[20], w[21], offset);
      w[48] = hc_bytealign_S (w[19], w[20], offset);
      w[47] = hc_bytealign_S (w[18], w[19], offset);
      w[46] = hc_bytealign_S (w[17], w[18], offset);
      w[45] = hc_bytealign_S (w[16], w[17], offset);
      w[44] = hc_bytealign_S (w[15], w[16], offset);
      w[43] = hc_bytealign_S (w[14], w[15], offset);
      w[42] = hc_bytealign_S (w[13], w[14], offset);
      w[41] = hc_bytealign_S (w[12], w[13], offset);
      w[40] = hc_bytealign_S (w[11], w[12], offset);
      w[39] = hc_bytealign_S (w[10], w[11], offset);
      w[38] = hc_bytealign_S (w[ 9], w[10], offset);
      w[37] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[36] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[35] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[34] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[33] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[32] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[31] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[30] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[29] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[28] = hc_bytealign_S (    0, w[ 0], offset);
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 29:
      w[63] = hc_bytealign_S (w[33], w[34], offset);
      w[62] = hc_bytealign_S (w[32], w[33], offset);
      w[61] = hc_bytealign_S (w[31], w[32], offset);
      w[60] = hc_bytealign_S (w[30], w[31], offset);
      w[59] = hc_bytealign_S (w[29], w[30], offset);
      w[58] = hc_bytealign_S (w[28], w[29], offset);
      w[57] = hc_bytealign_S (w[27], w[28], offset);
      w[56] = hc_bytealign_S (w[26], w[27], offset);
      w[55] = hc_bytealign_S (w[25], w[26], offset);
      w[54] = hc_bytealign_S (w[24], w[25], offset);
      w[53] = hc_bytealign_S (w[23], w[24], offset);
      w[52] = hc_bytealign_S (w[22], w[23], offset);
      w[51] = hc_bytealign_S (w[21], w[22], offset);
      w[50] = hc_bytealign_S (w[20], w[21], offset);
      w[49] = hc_bytealign_S (w[19], w[20], offset);
      w[48] = hc_bytealign_S (w[18], w[19], offset);
      w[47] = hc_bytealign_S (w[17], w[18], offset);
      w[46] = hc_bytealign_S (w[16], w[17], offset);
      w[45] = hc_bytealign_S (w[15], w[16], offset);
      w[44] = hc_bytealign_S (w[14], w[15], offset);
      w[43] = hc_bytealign_S (w[13], w[14], offset);
      w[42] = hc_bytealign_S (w[12], w[13], offset);
      w[41] = hc_bytealign_S (w[11], w[12], offset);
      w[40] = hc_bytealign_S (w[10], w[11], offset);
      w[39] = hc_bytealign_S (w[ 9], w[10], offset);
      w[38] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[37] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[36] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[35] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[34] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[33] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[32] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[31] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[30] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[29] = hc_bytealign_S (    0, w[ 0], offset);
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 30:
      w[63] = hc_bytealign_S (w[32], w[33], offset);
      w[62] = hc_bytealign_S (w[31], w[32], offset);
      w[61] = hc_bytealign_S (w[30], w[31], offset);
      w[60] = hc_bytealign_S (w[29], w[30], offset);
      w[59] = hc_bytealign_S (w[28], w[29], offset);
      w[58] = hc_bytealign_S (w[27], w[28], offset);
      w[57] = hc_bytealign_S (w[26], w[27], offset);
      w[56] = hc_bytealign_S (w[25], w[26], offset);
      w[55] = hc_bytealign_S (w[24], w[25], offset);
      w[54] = hc_bytealign_S (w[23], w[24], offset);
      w[53] = hc_bytealign_S (w[22], w[23], offset);
      w[52] = hc_bytealign_S (w[21], w[22], offset);
      w[51] = hc_bytealign_S (w[20], w[21], offset);
      w[50] = hc_bytealign_S (w[19], w[20], offset);
      w[49] = hc_bytealign_S (w[18], w[19], offset);
      w[48] = hc_bytealign_S (w[17], w[18], offset);
      w[47] = hc_bytealign_S (w[16], w[17], offset);
      w[46] = hc_bytealign_S (w[15], w[16], offset);
      w[45] = hc_bytealign_S (w[14], w[15], offset);
      w[44] = hc_bytealign_S (w[13], w[14], offset);
      w[43] = hc_bytealign_S (w[12], w[13], offset);
      w[42] = hc_bytealign_S (w[11], w[12], offset);
      w[41] = hc_bytealign_S (w[10], w[11], offset);
      w[40] = hc_bytealign_S (w[ 9], w[10], offset);
      w[39] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[38] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[37] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[36] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[35] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[34] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[33] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[32] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[31] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[30] = hc_bytealign_S (    0, w[ 0], offset);
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 31:
      w[63] = hc_bytealign_S (w[31], w[32], offset);
      w[62] = hc_bytealign_S (w[30], w[31], offset);
      w[61] = hc_bytealign_S (w[29], w[30], offset);
      w[60] = hc_bytealign_S (w[28], w[29], offset);
      w[59] = hc_bytealign_S (w[27], w[28], offset);
      w[58] = hc_bytealign_S (w[26], w[27], offset);
      w[57] = hc_bytealign_S (w[25], w[26], offset);
      w[56] = hc_bytealign_S (w[24], w[25], offset);
      w[55] = hc_bytealign_S (w[23], w[24], offset);
      w[54] = hc_bytealign_S (w[22], w[23], offset);
      w[53] = hc_bytealign_S (w[21], w[22], offset);
      w[52] = hc_bytealign_S (w[20], w[21], offset);
      w[51] = hc_bytealign_S (w[19], w[20], offset);
      w[50] = hc_bytealign_S (w[18], w[19], offset);
      w[49] = hc_bytealign_S (w[17], w[18], offset);
      w[48] = hc_bytealign_S (w[16], w[17], offset);
      w[47] = hc_bytealign_S (w[15], w[16], offset);
      w[46] = hc_bytealign_S (w[14], w[15], offset);
      w[45] = hc_bytealign_S (w[13], w[14], offset);
      w[44] = hc_bytealign_S (w[12], w[13], offset);
      w[43] = hc_bytealign_S (w[11], w[12], offset);
      w[42] = hc_bytealign_S (w[10], w[11], offset);
      w[41] = hc_bytealign_S (w[ 9], w[10], offset);
      w[40] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[39] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[38] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[37] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[36] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[35] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[34] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[33] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[32] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[31] = hc_bytealign_S (    0, w[ 0], offset);
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 32:
      w[63] = hc_bytealign_S (w[30], w[31], offset);
      w[62] = hc_bytealign_S (w[29], w[30], offset);
      w[61] = hc_bytealign_S (w[28], w[29], offset);
      w[60] = hc_bytealign_S (w[27], w[28], offset);
      w[59] = hc_bytealign_S (w[26], w[27], offset);
      w[58] = hc_bytealign_S (w[25], w[26], offset);
      w[57] = hc_bytealign_S (w[24], w[25], offset);
      w[56] = hc_bytealign_S (w[23], w[24], offset);
      w[55] = hc_bytealign_S (w[22], w[23], offset);
      w[54] = hc_bytealign_S (w[21], w[22], offset);
      w[53] = hc_bytealign_S (w[20], w[21], offset);
      w[52] = hc_bytealign_S (w[19], w[20], offset);
      w[51] = hc_bytealign_S (w[18], w[19], offset);
      w[50] = hc_bytealign_S (w[17], w[18], offset);
      w[49] = hc_bytealign_S (w[16], w[17], offset);
      w[48] = hc_bytealign_S (w[15], w[16], offset);
      w[47] = hc_bytealign_S (w[14], w[15], offset);
      w[46] = hc_bytealign_S (w[13], w[14], offset);
      w[45] = hc_bytealign_S (w[12], w[13], offset);
      w[44] = hc_bytealign_S (w[11], w[12], offset);
      w[43] = hc_bytealign_S (w[10], w[11], offset);
      w[42] = hc_bytealign_S (w[ 9], w[10], offset);
      w[41] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[40] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[39] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[38] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[37] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[36] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[35] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[34] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[33] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[32] = hc_bytealign_S (    0, w[ 0], offset);
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 33:
      w[63] = hc_bytealign_S (w[29], w[30], offset);
      w[62] = hc_bytealign_S (w[28], w[29], offset);
      w[61] = hc_bytealign_S (w[27], w[28], offset);
      w[60] = hc_bytealign_S (w[26], w[27], offset);
      w[59] = hc_bytealign_S (w[25], w[26], offset);
      w[58] = hc_bytealign_S (w[24], w[25], offset);
      w[57] = hc_bytealign_S (w[23], w[24], offset);
      w[56] = hc_bytealign_S (w[22], w[23], offset);
      w[55] = hc_bytealign_S (w[21], w[22], offset);
      w[54] = hc_bytealign_S (w[20], w[21], offset);
      w[53] = hc_bytealign_S (w[19], w[20], offset);
      w[52] = hc_bytealign_S (w[18], w[19], offset);
      w[51] = hc_bytealign_S (w[17], w[18], offset);
      w[50] = hc_bytealign_S (w[16], w[17], offset);
      w[49] = hc_bytealign_S (w[15], w[16], offset);
      w[48] = hc_bytealign_S (w[14], w[15], offset);
      w[47] = hc_bytealign_S (w[13], w[14], offset);
      w[46] = hc_bytealign_S (w[12], w[13], offset);
      w[45] = hc_bytealign_S (w[11], w[12], offset);
      w[44] = hc_bytealign_S (w[10], w[11], offset);
      w[43] = hc_bytealign_S (w[ 9], w[10], offset);
      w[42] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[41] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[40] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[39] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[38] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[37] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[36] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[35] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[34] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[33] = hc_bytealign_S (    0, w[ 0], offset);
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 34:
      w[63] = hc_bytealign_S (w[28], w[29], offset);
      w[62] = hc_bytealign_S (w[27], w[28], offset);
      w[61] = hc_bytealign_S (w[26], w[27], offset);
      w[60] = hc_bytealign_S (w[25], w[26], offset);
      w[59] = hc_bytealign_S (w[24], w[25], offset);
      w[58] = hc_bytealign_S (w[23], w[24], offset);
      w[57] = hc_bytealign_S (w[22], w[23], offset);
      w[56] = hc_bytealign_S (w[21], w[22], offset);
      w[55] = hc_bytealign_S (w[20], w[21], offset);
      w[54] = hc_bytealign_S (w[19], w[20], offset);
      w[53] = hc_bytealign_S (w[18], w[19], offset);
      w[52] = hc_bytealign_S (w[17], w[18], offset);
      w[51] = hc_bytealign_S (w[16], w[17], offset);
      w[50] = hc_bytealign_S (w[15], w[16], offset);
      w[49] = hc_bytealign_S (w[14], w[15], offset);
      w[48] = hc_bytealign_S (w[13], w[14], offset);
      w[47] = hc_bytealign_S (w[12], w[13], offset);
      w[46] = hc_bytealign_S (w[11], w[12], offset);
      w[45] = hc_bytealign_S (w[10], w[11], offset);
      w[44] = hc_bytealign_S (w[ 9], w[10], offset);
      w[43] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[42] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[41] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[40] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[39] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[38] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[37] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[36] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[35] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[34] = hc_bytealign_S (    0, w[ 0], offset);
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 35:
      w[63] = hc_bytealign_S (w[27], w[28], offset);
      w[62] = hc_bytealign_S (w[26], w[27], offset);
      w[61] = hc_bytealign_S (w[25], w[26], offset);
      w[60] = hc_bytealign_S (w[24], w[25], offset);
      w[59] = hc_bytealign_S (w[23], w[24], offset);
      w[58] = hc_bytealign_S (w[22], w[23], offset);
      w[57] = hc_bytealign_S (w[21], w[22], offset);
      w[56] = hc_bytealign_S (w[20], w[21], offset);
      w[55] = hc_bytealign_S (w[19], w[20], offset);
      w[54] = hc_bytealign_S (w[18], w[19], offset);
      w[53] = hc_bytealign_S (w[17], w[18], offset);
      w[52] = hc_bytealign_S (w[16], w[17], offset);
      w[51] = hc_bytealign_S (w[15], w[16], offset);
      w[50] = hc_bytealign_S (w[14], w[15], offset);
      w[49] = hc_bytealign_S (w[13], w[14], offset);
      w[48] = hc_bytealign_S (w[12], w[13], offset);
      w[47] = hc_bytealign_S (w[11], w[12], offset);
      w[46] = hc_bytealign_S (w[10], w[11], offset);
      w[45] = hc_bytealign_S (w[ 9], w[10], offset);
      w[44] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[43] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[42] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[41] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[40] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[39] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[38] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[37] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[36] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[35] = hc_bytealign_S (    0, w[ 0], offset);
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 36:
      w[63] = hc_bytealign_S (w[26], w[27], offset);
      w[62] = hc_bytealign_S (w[25], w[26], offset);
      w[61] = hc_bytealign_S (w[24], w[25], offset);
      w[60] = hc_bytealign_S (w[23], w[24], offset);
      w[59] = hc_bytealign_S (w[22], w[23], offset);
      w[58] = hc_bytealign_S (w[21], w[22], offset);
      w[57] = hc_bytealign_S (w[20], w[21], offset);
      w[56] = hc_bytealign_S (w[19], w[20], offset);
      w[55] = hc_bytealign_S (w[18], w[19], offset);
      w[54] = hc_bytealign_S (w[17], w[18], offset);
      w[53] = hc_bytealign_S (w[16], w[17], offset);
      w[52] = hc_bytealign_S (w[15], w[16], offset);
      w[51] = hc_bytealign_S (w[14], w[15], offset);
      w[50] = hc_bytealign_S (w[13], w[14], offset);
      w[49] = hc_bytealign_S (w[12], w[13], offset);
      w[48] = hc_bytealign_S (w[11], w[12], offset);
      w[47] = hc_bytealign_S (w[10], w[11], offset);
      w[46] = hc_bytealign_S (w[ 9], w[10], offset);
      w[45] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[44] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[43] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[42] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[41] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[40] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[39] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[38] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[37] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[36] = hc_bytealign_S (    0, w[ 0], offset);
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 37:
      w[63] = hc_bytealign_S (w[25], w[26], offset);
      w[62] = hc_bytealign_S (w[24], w[25], offset);
      w[61] = hc_bytealign_S (w[23], w[24], offset);
      w[60] = hc_bytealign_S (w[22], w[23], offset);
      w[59] = hc_bytealign_S (w[21], w[22], offset);
      w[58] = hc_bytealign_S (w[20], w[21], offset);
      w[57] = hc_bytealign_S (w[19], w[20], offset);
      w[56] = hc_bytealign_S (w[18], w[19], offset);
      w[55] = hc_bytealign_S (w[17], w[18], offset);
      w[54] = hc_bytealign_S (w[16], w[17], offset);
      w[53] = hc_bytealign_S (w[15], w[16], offset);
      w[52] = hc_bytealign_S (w[14], w[15], offset);
      w[51] = hc_bytealign_S (w[13], w[14], offset);
      w[50] = hc_bytealign_S (w[12], w[13], offset);
      w[49] = hc_bytealign_S (w[11], w[12], offset);
      w[48] = hc_bytealign_S (w[10], w[11], offset);
      w[47] = hc_bytealign_S (w[ 9], w[10], offset);
      w[46] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[45] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[44] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[43] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[42] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[41] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[40] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[39] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[38] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[37] = hc_bytealign_S (    0, w[ 0], offset);
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 38:
      w[63] = hc_bytealign_S (w[24], w[25], offset);
      w[62] = hc_bytealign_S (w[23], w[24], offset);
      w[61] = hc_bytealign_S (w[22], w[23], offset);
      w[60] = hc_bytealign_S (w[21], w[22], offset);
      w[59] = hc_bytealign_S (w[20], w[21], offset);
      w[58] = hc_bytealign_S (w[19], w[20], offset);
      w[57] = hc_bytealign_S (w[18], w[19], offset);
      w[56] = hc_bytealign_S (w[17], w[18], offset);
      w[55] = hc_bytealign_S (w[16], w[17], offset);
      w[54] = hc_bytealign_S (w[15], w[16], offset);
      w[53] = hc_bytealign_S (w[14], w[15], offset);
      w[52] = hc_bytealign_S (w[13], w[14], offset);
      w[51] = hc_bytealign_S (w[12], w[13], offset);
      w[50] = hc_bytealign_S (w[11], w[12], offset);
      w[49] = hc_bytealign_S (w[10], w[11], offset);
      w[48] = hc_bytealign_S (w[ 9], w[10], offset);
      w[47] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[46] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[45] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[44] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[43] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[42] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[41] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[40] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[39] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[38] = hc_bytealign_S (    0, w[ 0], offset);
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 39:
      w[63] = hc_bytealign_S (w[23], w[24], offset);
      w[62] = hc_bytealign_S (w[22], w[23], offset);
      w[61] = hc_bytealign_S (w[21], w[22], offset);
      w[60] = hc_bytealign_S (w[20], w[21], offset);
      w[59] = hc_bytealign_S (w[19], w[20], offset);
      w[58] = hc_bytealign_S (w[18], w[19], offset);
      w[57] = hc_bytealign_S (w[17], w[18], offset);
      w[56] = hc_bytealign_S (w[16], w[17], offset);
      w[55] = hc_bytealign_S (w[15], w[16], offset);
      w[54] = hc_bytealign_S (w[14], w[15], offset);
      w[53] = hc_bytealign_S (w[13], w[14], offset);
      w[52] = hc_bytealign_S (w[12], w[13], offset);
      w[51] = hc_bytealign_S (w[11], w[12], offset);
      w[50] = hc_bytealign_S (w[10], w[11], offset);
      w[49] = hc_bytealign_S (w[ 9], w[10], offset);
      w[48] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[47] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[46] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[45] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[44] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[43] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[42] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[41] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[40] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[39] = hc_bytealign_S (    0, w[ 0], offset);
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 40:
      w[63] = hc_bytealign_S (w[22], w[23], offset);
      w[62] = hc_bytealign_S (w[21], w[22], offset);
      w[61] = hc_bytealign_S (w[20], w[21], offset);
      w[60] = hc_bytealign_S (w[19], w[20], offset);
      w[59] = hc_bytealign_S (w[18], w[19], offset);
      w[58] = hc_bytealign_S (w[17], w[18], offset);
      w[57] = hc_bytealign_S (w[16], w[17], offset);
      w[56] = hc_bytealign_S (w[15], w[16], offset);
      w[55] = hc_bytealign_S (w[14], w[15], offset);
      w[54] = hc_bytealign_S (w[13], w[14], offset);
      w[53] = hc_bytealign_S (w[12], w[13], offset);
      w[52] = hc_bytealign_S (w[11], w[12], offset);
      w[51] = hc_bytealign_S (w[10], w[11], offset);
      w[50] = hc_bytealign_S (w[ 9], w[10], offset);
      w[49] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[48] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[47] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[46] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[45] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[44] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[43] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[42] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[41] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[40] = hc_bytealign_S (    0, w[ 0], offset);
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 41:
      w[63] = hc_bytealign_S (w[21], w[22], offset);
      w[62] = hc_bytealign_S (w[20], w[21], offset);
      w[61] = hc_bytealign_S (w[19], w[20], offset);
      w[60] = hc_bytealign_S (w[18], w[19], offset);
      w[59] = hc_bytealign_S (w[17], w[18], offset);
      w[58] = hc_bytealign_S (w[16], w[17], offset);
      w[57] = hc_bytealign_S (w[15], w[16], offset);
      w[56] = hc_bytealign_S (w[14], w[15], offset);
      w[55] = hc_bytealign_S (w[13], w[14], offset);
      w[54] = hc_bytealign_S (w[12], w[13], offset);
      w[53] = hc_bytealign_S (w[11], w[12], offset);
      w[52] = hc_bytealign_S (w[10], w[11], offset);
      w[51] = hc_bytealign_S (w[ 9], w[10], offset);
      w[50] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[49] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[48] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[47] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[46] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[45] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[44] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[43] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[42] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[41] = hc_bytealign_S (    0, w[ 0], offset);
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 42:
      w[63] = hc_bytealign_S (w[20], w[21], offset);
      w[62] = hc_bytealign_S (w[19], w[20], offset);
      w[61] = hc_bytealign_S (w[18], w[19], offset);
      w[60] = hc_bytealign_S (w[17], w[18], offset);
      w[59] = hc_bytealign_S (w[16], w[17], offset);
      w[58] = hc_bytealign_S (w[15], w[16], offset);
      w[57] = hc_bytealign_S (w[14], w[15], offset);
      w[56] = hc_bytealign_S (w[13], w[14], offset);
      w[55] = hc_bytealign_S (w[12], w[13], offset);
      w[54] = hc_bytealign_S (w[11], w[12], offset);
      w[53] = hc_bytealign_S (w[10], w[11], offset);
      w[52] = hc_bytealign_S (w[ 9], w[10], offset);
      w[51] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[50] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[49] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[48] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[47] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[46] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[45] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[44] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[43] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[42] = hc_bytealign_S (    0, w[ 0], offset);
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 43:
      w[63] = hc_bytealign_S (w[19], w[20], offset);
      w[62] = hc_bytealign_S (w[18], w[19], offset);
      w[61] = hc_bytealign_S (w[17], w[18], offset);
      w[60] = hc_bytealign_S (w[16], w[17], offset);
      w[59] = hc_bytealign_S (w[15], w[16], offset);
      w[58] = hc_bytealign_S (w[14], w[15], offset);
      w[57] = hc_bytealign_S (w[13], w[14], offset);
      w[56] = hc_bytealign_S (w[12], w[13], offset);
      w[55] = hc_bytealign_S (w[11], w[12], offset);
      w[54] = hc_bytealign_S (w[10], w[11], offset);
      w[53] = hc_bytealign_S (w[ 9], w[10], offset);
      w[52] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[51] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[50] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[49] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[48] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[47] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[46] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[45] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[44] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[43] = hc_bytealign_S (    0, w[ 0], offset);
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 44:
      w[63] = hc_bytealign_S (w[18], w[19], offset);
      w[62] = hc_bytealign_S (w[17], w[18], offset);
      w[61] = hc_bytealign_S (w[16], w[17], offset);
      w[60] = hc_bytealign_S (w[15], w[16], offset);
      w[59] = hc_bytealign_S (w[14], w[15], offset);
      w[58] = hc_bytealign_S (w[13], w[14], offset);
      w[57] = hc_bytealign_S (w[12], w[13], offset);
      w[56] = hc_bytealign_S (w[11], w[12], offset);
      w[55] = hc_bytealign_S (w[10], w[11], offset);
      w[54] = hc_bytealign_S (w[ 9], w[10], offset);
      w[53] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[52] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[51] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[50] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[49] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[48] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[47] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[46] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[45] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[44] = hc_bytealign_S (    0, w[ 0], offset);
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 45:
      w[63] = hc_bytealign_S (w[17], w[18], offset);
      w[62] = hc_bytealign_S (w[16], w[17], offset);
      w[61] = hc_bytealign_S (w[15], w[16], offset);
      w[60] = hc_bytealign_S (w[14], w[15], offset);
      w[59] = hc_bytealign_S (w[13], w[14], offset);
      w[58] = hc_bytealign_S (w[12], w[13], offset);
      w[57] = hc_bytealign_S (w[11], w[12], offset);
      w[56] = hc_bytealign_S (w[10], w[11], offset);
      w[55] = hc_bytealign_S (w[ 9], w[10], offset);
      w[54] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[53] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[52] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[51] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[50] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[49] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[48] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[47] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[46] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[45] = hc_bytealign_S (    0, w[ 0], offset);
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 46:
      w[63] = hc_bytealign_S (w[16], w[17], offset);
      w[62] = hc_bytealign_S (w[15], w[16], offset);
      w[61] = hc_bytealign_S (w[14], w[15], offset);
      w[60] = hc_bytealign_S (w[13], w[14], offset);
      w[59] = hc_bytealign_S (w[12], w[13], offset);
      w[58] = hc_bytealign_S (w[11], w[12], offset);
      w[57] = hc_bytealign_S (w[10], w[11], offset);
      w[56] = hc_bytealign_S (w[ 9], w[10], offset);
      w[55] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[54] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[53] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[52] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[51] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[50] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[49] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[48] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[47] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[46] = hc_bytealign_S (    0, w[ 0], offset);
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 47:
      w[63] = hc_bytealign_S (w[15], w[16], offset);
      w[62] = hc_bytealign_S (w[14], w[15], offset);
      w[61] = hc_bytealign_S (w[13], w[14], offset);
      w[60] = hc_bytealign_S (w[12], w[13], offset);
      w[59] = hc_bytealign_S (w[11], w[12], offset);
      w[58] = hc_bytealign_S (w[10], w[11], offset);
      w[57] = hc_bytealign_S (w[ 9], w[10], offset);
      w[56] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[55] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[54] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[53] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[52] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[51] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[50] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[49] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[48] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[47] = hc_bytealign_S (    0, w[ 0], offset);
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 48:
      w[63] = hc_bytealign_S (w[14], w[15], offset);
      w[62] = hc_bytealign_S (w[13], w[14], offset);
      w[61] = hc_bytealign_S (w[12], w[13], offset);
      w[60] = hc_bytealign_S (w[11], w[12], offset);
      w[59] = hc_bytealign_S (w[10], w[11], offset);
      w[58] = hc_bytealign_S (w[ 9], w[10], offset);
      w[57] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[56] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[55] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[54] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[53] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[52] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[51] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[50] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[49] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[48] = hc_bytealign_S (    0, w[ 0], offset);
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 49:
      w[63] = hc_bytealign_S (w[13], w[14], offset);
      w[62] = hc_bytealign_S (w[12], w[13], offset);
      w[61] = hc_bytealign_S (w[11], w[12], offset);
      w[60] = hc_bytealign_S (w[10], w[11], offset);
      w[59] = hc_bytealign_S (w[ 9], w[10], offset);
      w[58] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[57] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[56] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[55] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[54] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[53] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[52] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[51] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[50] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[49] = hc_bytealign_S (    0, w[ 0], offset);
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 50:
      w[63] = hc_bytealign_S (w[12], w[13], offset);
      w[62] = hc_bytealign_S (w[11], w[12], offset);
      w[61] = hc_bytealign_S (w[10], w[11], offset);
      w[60] = hc_bytealign_S (w[ 9], w[10], offset);
      w[59] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[58] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[57] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[56] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[55] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[54] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[53] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[52] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[51] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[50] = hc_bytealign_S (    0, w[ 0], offset);
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 51:
      w[63] = hc_bytealign_S (w[11], w[12], offset);
      w[62] = hc_bytealign_S (w[10], w[11], offset);
      w[61] = hc_bytealign_S (w[ 9], w[10], offset);
      w[60] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[59] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[58] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[57] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[56] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[55] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[54] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[53] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[52] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[51] = hc_bytealign_S (    0, w[ 0], offset);
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 52:
      w[63] = hc_bytealign_S (w[10], w[11], offset);
      w[62] = hc_bytealign_S (w[ 9], w[10], offset);
      w[61] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[60] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[59] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[58] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[57] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[56] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[55] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[54] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[53] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[52] = hc_bytealign_S (    0, w[ 0], offset);
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 53:
      w[63] = hc_bytealign_S (w[ 9], w[10], offset);
      w[62] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[61] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[60] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[59] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[58] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[57] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[56] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[55] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[54] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[53] = hc_bytealign_S (    0, w[ 0], offset);
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 54:
      w[63] = hc_bytealign_S (w[ 8], w[ 9], offset);
      w[62] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[61] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[60] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[59] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[58] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[57] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[56] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[55] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[54] = hc_bytealign_S (    0, w[ 0], offset);
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 55:
      w[63] = hc_bytealign_S (w[ 7], w[ 8], offset);
      w[62] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[61] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[60] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[59] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[58] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[57] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[56] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[55] = hc_bytealign_S (    0, w[ 0], offset);
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 56:
      w[63] = hc_bytealign_S (w[ 6], w[ 7], offset);
      w[62] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[61] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[60] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[59] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[58] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[57] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[56] = hc_bytealign_S (    0, w[ 0], offset);
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 57:
      w[63] = hc_bytealign_S (w[ 5], w[ 6], offset);
      w[62] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[61] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[60] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[59] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[58] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[57] = hc_bytealign_S (    0, w[ 0], offset);
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 58:
      w[63] = hc_bytealign_S (w[ 4], w[ 5], offset);
      w[62] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[61] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[60] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[59] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[58] = hc_bytealign_S (    0, w[ 0], offset);
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 59:
      w[63] = hc_bytealign_S (w[ 3], w[ 4], offset);
      w[62] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[61] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[60] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[59] = hc_bytealign_S (    0, w[ 0], offset);
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 60:
      w[63] = hc_bytealign_S (w[ 2], w[ 3], offset);
      w[62] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[61] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[60] = hc_bytealign_S (    0, w[ 0], offset);
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 61:
      w[63] = hc_bytealign_S (w[ 1], w[ 2], offset);
      w[62] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[61] = hc_bytealign_S (    0, w[ 0], offset);
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 62:
      w[63] = hc_bytealign_S (w[ 0], w[ 1], offset);
      w[62] = hc_bytealign_S (    0, w[ 0], offset);
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 63:
      w[63] = hc_bytealign_S (    0, w[ 0], offset);
      w[62] = 0;
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;
  }
  #endif

  #if (defined IS_AMD && AMD_GCN >= 3) || defined IS_NV

  #if defined IS_NV
  const int selector = (0x76543210 >> ((offset & 3) * 4)) & 0xffff;
  #endif

  #if defined IS_AMD
  const int selector = 0x0706050403020100 >> ((offset & 3) * 8);
  #endif

  switch (offset_switch)
  {
    case  0:
      w[63] = hc_byte_perm_S (w[63], w[62], selector);
      w[62] = hc_byte_perm_S (w[62], w[61], selector);
      w[61] = hc_byte_perm_S (w[61], w[60], selector);
      w[60] = hc_byte_perm_S (w[60], w[59], selector);
      w[59] = hc_byte_perm_S (w[59], w[58], selector);
      w[58] = hc_byte_perm_S (w[58], w[57], selector);
      w[57] = hc_byte_perm_S (w[57], w[56], selector);
      w[56] = hc_byte_perm_S (w[56], w[55], selector);
      w[55] = hc_byte_perm_S (w[55], w[54], selector);
      w[54] = hc_byte_perm_S (w[54], w[53], selector);
      w[53] = hc_byte_perm_S (w[53], w[52], selector);
      w[52] = hc_byte_perm_S (w[52], w[51], selector);
      w[51] = hc_byte_perm_S (w[51], w[50], selector);
      w[50] = hc_byte_perm_S (w[50], w[49], selector);
      w[49] = hc_byte_perm_S (w[49], w[48], selector);
      w[48] = hc_byte_perm_S (w[48], w[47], selector);
      w[47] = hc_byte_perm_S (w[47], w[46], selector);
      w[46] = hc_byte_perm_S (w[46], w[45], selector);
      w[45] = hc_byte_perm_S (w[45], w[44], selector);
      w[44] = hc_byte_perm_S (w[44], w[43], selector);
      w[43] = hc_byte_perm_S (w[43], w[42], selector);
      w[42] = hc_byte_perm_S (w[42], w[41], selector);
      w[41] = hc_byte_perm_S (w[41], w[40], selector);
      w[40] = hc_byte_perm_S (w[40], w[39], selector);
      w[39] = hc_byte_perm_S (w[39], w[38], selector);
      w[38] = hc_byte_perm_S (w[38], w[37], selector);
      w[37] = hc_byte_perm_S (w[37], w[36], selector);
      w[36] = hc_byte_perm_S (w[36], w[35], selector);
      w[35] = hc_byte_perm_S (w[35], w[34], selector);
      w[34] = hc_byte_perm_S (w[34], w[33], selector);
      w[33] = hc_byte_perm_S (w[33], w[32], selector);
      w[32] = hc_byte_perm_S (w[32], w[31], selector);
      w[31] = hc_byte_perm_S (w[31], w[30], selector);
      w[30] = hc_byte_perm_S (w[30], w[29], selector);
      w[29] = hc_byte_perm_S (w[29], w[28], selector);
      w[28] = hc_byte_perm_S (w[28], w[27], selector);
      w[27] = hc_byte_perm_S (w[27], w[26], selector);
      w[26] = hc_byte_perm_S (w[26], w[25], selector);
      w[25] = hc_byte_perm_S (w[25], w[24], selector);
      w[24] = hc_byte_perm_S (w[24], w[23], selector);
      w[23] = hc_byte_perm_S (w[23], w[22], selector);
      w[22] = hc_byte_perm_S (w[22], w[21], selector);
      w[21] = hc_byte_perm_S (w[21], w[20], selector);
      w[20] = hc_byte_perm_S (w[20], w[19], selector);
      w[19] = hc_byte_perm_S (w[19], w[18], selector);
      w[18] = hc_byte_perm_S (w[18], w[17], selector);
      w[17] = hc_byte_perm_S (w[17], w[16], selector);
      w[16] = hc_byte_perm_S (w[16], w[15], selector);
      w[15] = hc_byte_perm_S (w[15], w[14], selector);
      w[14] = hc_byte_perm_S (w[14], w[13], selector);
      w[13] = hc_byte_perm_S (w[13], w[12], selector);
      w[12] = hc_byte_perm_S (w[12], w[11], selector);
      w[11] = hc_byte_perm_S (w[11], w[10], selector);
      w[10] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[ 9] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[ 8] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[ 7] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[ 6] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[ 5] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[ 4] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[ 3] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 2] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 1] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 0] = hc_byte_perm_S (w[ 0],     0, selector);

      break;

    case  1:
      w[63] = hc_byte_perm_S (w[62], w[61], selector);
      w[62] = hc_byte_perm_S (w[61], w[60], selector);
      w[61] = hc_byte_perm_S (w[60], w[59], selector);
      w[60] = hc_byte_perm_S (w[59], w[58], selector);
      w[59] = hc_byte_perm_S (w[58], w[57], selector);
      w[58] = hc_byte_perm_S (w[57], w[56], selector);
      w[57] = hc_byte_perm_S (w[56], w[55], selector);
      w[56] = hc_byte_perm_S (w[55], w[54], selector);
      w[55] = hc_byte_perm_S (w[54], w[53], selector);
      w[54] = hc_byte_perm_S (w[53], w[52], selector);
      w[53] = hc_byte_perm_S (w[52], w[51], selector);
      w[52] = hc_byte_perm_S (w[51], w[50], selector);
      w[51] = hc_byte_perm_S (w[50], w[49], selector);
      w[50] = hc_byte_perm_S (w[49], w[48], selector);
      w[49] = hc_byte_perm_S (w[48], w[47], selector);
      w[48] = hc_byte_perm_S (w[47], w[46], selector);
      w[47] = hc_byte_perm_S (w[46], w[45], selector);
      w[46] = hc_byte_perm_S (w[45], w[44], selector);
      w[45] = hc_byte_perm_S (w[44], w[43], selector);
      w[44] = hc_byte_perm_S (w[43], w[42], selector);
      w[43] = hc_byte_perm_S (w[42], w[41], selector);
      w[42] = hc_byte_perm_S (w[41], w[40], selector);
      w[41] = hc_byte_perm_S (w[40], w[39], selector);
      w[40] = hc_byte_perm_S (w[39], w[38], selector);
      w[39] = hc_byte_perm_S (w[38], w[37], selector);
      w[38] = hc_byte_perm_S (w[37], w[36], selector);
      w[37] = hc_byte_perm_S (w[36], w[35], selector);
      w[36] = hc_byte_perm_S (w[35], w[34], selector);
      w[35] = hc_byte_perm_S (w[34], w[33], selector);
      w[34] = hc_byte_perm_S (w[33], w[32], selector);
      w[33] = hc_byte_perm_S (w[32], w[31], selector);
      w[32] = hc_byte_perm_S (w[31], w[30], selector);
      w[31] = hc_byte_perm_S (w[30], w[29], selector);
      w[30] = hc_byte_perm_S (w[29], w[28], selector);
      w[29] = hc_byte_perm_S (w[28], w[27], selector);
      w[28] = hc_byte_perm_S (w[27], w[26], selector);
      w[27] = hc_byte_perm_S (w[26], w[25], selector);
      w[26] = hc_byte_perm_S (w[25], w[24], selector);
      w[25] = hc_byte_perm_S (w[24], w[23], selector);
      w[24] = hc_byte_perm_S (w[23], w[22], selector);
      w[23] = hc_byte_perm_S (w[22], w[21], selector);
      w[22] = hc_byte_perm_S (w[21], w[20], selector);
      w[21] = hc_byte_perm_S (w[20], w[19], selector);
      w[20] = hc_byte_perm_S (w[19], w[18], selector);
      w[19] = hc_byte_perm_S (w[18], w[17], selector);
      w[18] = hc_byte_perm_S (w[17], w[16], selector);
      w[17] = hc_byte_perm_S (w[16], w[15], selector);
      w[16] = hc_byte_perm_S (w[15], w[14], selector);
      w[15] = hc_byte_perm_S (w[14], w[13], selector);
      w[14] = hc_byte_perm_S (w[13], w[12], selector);
      w[13] = hc_byte_perm_S (w[12], w[11], selector);
      w[12] = hc_byte_perm_S (w[11], w[10], selector);
      w[11] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[10] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[ 9] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[ 8] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[ 7] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[ 6] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[ 5] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[ 4] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 3] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 2] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 1] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 0] = 0;

      break;

    case  2:
      w[63] = hc_byte_perm_S (w[61], w[60], selector);
      w[62] = hc_byte_perm_S (w[60], w[59], selector);
      w[61] = hc_byte_perm_S (w[59], w[58], selector);
      w[60] = hc_byte_perm_S (w[58], w[57], selector);
      w[59] = hc_byte_perm_S (w[57], w[56], selector);
      w[58] = hc_byte_perm_S (w[56], w[55], selector);
      w[57] = hc_byte_perm_S (w[55], w[54], selector);
      w[56] = hc_byte_perm_S (w[54], w[53], selector);
      w[55] = hc_byte_perm_S (w[53], w[52], selector);
      w[54] = hc_byte_perm_S (w[52], w[51], selector);
      w[53] = hc_byte_perm_S (w[51], w[50], selector);
      w[52] = hc_byte_perm_S (w[50], w[49], selector);
      w[51] = hc_byte_perm_S (w[49], w[48], selector);
      w[50] = hc_byte_perm_S (w[48], w[47], selector);
      w[49] = hc_byte_perm_S (w[47], w[46], selector);
      w[48] = hc_byte_perm_S (w[46], w[45], selector);
      w[47] = hc_byte_perm_S (w[45], w[44], selector);
      w[46] = hc_byte_perm_S (w[44], w[43], selector);
      w[45] = hc_byte_perm_S (w[43], w[42], selector);
      w[44] = hc_byte_perm_S (w[42], w[41], selector);
      w[43] = hc_byte_perm_S (w[41], w[40], selector);
      w[42] = hc_byte_perm_S (w[40], w[39], selector);
      w[41] = hc_byte_perm_S (w[39], w[38], selector);
      w[40] = hc_byte_perm_S (w[38], w[37], selector);
      w[39] = hc_byte_perm_S (w[37], w[36], selector);
      w[38] = hc_byte_perm_S (w[36], w[35], selector);
      w[37] = hc_byte_perm_S (w[35], w[34], selector);
      w[36] = hc_byte_perm_S (w[34], w[33], selector);
      w[35] = hc_byte_perm_S (w[33], w[32], selector);
      w[34] = hc_byte_perm_S (w[32], w[31], selector);
      w[33] = hc_byte_perm_S (w[31], w[30], selector);
      w[32] = hc_byte_perm_S (w[30], w[29], selector);
      w[31] = hc_byte_perm_S (w[29], w[28], selector);
      w[30] = hc_byte_perm_S (w[28], w[27], selector);
      w[29] = hc_byte_perm_S (w[27], w[26], selector);
      w[28] = hc_byte_perm_S (w[26], w[25], selector);
      w[27] = hc_byte_perm_S (w[25], w[24], selector);
      w[26] = hc_byte_perm_S (w[24], w[23], selector);
      w[25] = hc_byte_perm_S (w[23], w[22], selector);
      w[24] = hc_byte_perm_S (w[22], w[21], selector);
      w[23] = hc_byte_perm_S (w[21], w[20], selector);
      w[22] = hc_byte_perm_S (w[20], w[19], selector);
      w[21] = hc_byte_perm_S (w[19], w[18], selector);
      w[20] = hc_byte_perm_S (w[18], w[17], selector);
      w[19] = hc_byte_perm_S (w[17], w[16], selector);
      w[18] = hc_byte_perm_S (w[16], w[15], selector);
      w[17] = hc_byte_perm_S (w[15], w[14], selector);
      w[16] = hc_byte_perm_S (w[14], w[13], selector);
      w[15] = hc_byte_perm_S (w[13], w[12], selector);
      w[14] = hc_byte_perm_S (w[12], w[11], selector);
      w[13] = hc_byte_perm_S (w[11], w[10], selector);
      w[12] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[11] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[10] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[ 9] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[ 8] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[ 7] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[ 6] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[ 5] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 4] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 3] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 2] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  3:
      w[63] = hc_byte_perm_S (w[60], w[59], selector);
      w[62] = hc_byte_perm_S (w[59], w[58], selector);
      w[61] = hc_byte_perm_S (w[58], w[57], selector);
      w[60] = hc_byte_perm_S (w[57], w[56], selector);
      w[59] = hc_byte_perm_S (w[56], w[55], selector);
      w[58] = hc_byte_perm_S (w[55], w[54], selector);
      w[57] = hc_byte_perm_S (w[54], w[53], selector);
      w[56] = hc_byte_perm_S (w[53], w[52], selector);
      w[55] = hc_byte_perm_S (w[52], w[51], selector);
      w[54] = hc_byte_perm_S (w[51], w[50], selector);
      w[53] = hc_byte_perm_S (w[50], w[49], selector);
      w[52] = hc_byte_perm_S (w[49], w[48], selector);
      w[51] = hc_byte_perm_S (w[48], w[47], selector);
      w[50] = hc_byte_perm_S (w[47], w[46], selector);
      w[49] = hc_byte_perm_S (w[46], w[45], selector);
      w[48] = hc_byte_perm_S (w[45], w[44], selector);
      w[47] = hc_byte_perm_S (w[44], w[43], selector);
      w[46] = hc_byte_perm_S (w[43], w[42], selector);
      w[45] = hc_byte_perm_S (w[42], w[41], selector);
      w[44] = hc_byte_perm_S (w[41], w[40], selector);
      w[43] = hc_byte_perm_S (w[40], w[39], selector);
      w[42] = hc_byte_perm_S (w[39], w[38], selector);
      w[41] = hc_byte_perm_S (w[38], w[37], selector);
      w[40] = hc_byte_perm_S (w[37], w[36], selector);
      w[39] = hc_byte_perm_S (w[36], w[35], selector);
      w[38] = hc_byte_perm_S (w[35], w[34], selector);
      w[37] = hc_byte_perm_S (w[34], w[33], selector);
      w[36] = hc_byte_perm_S (w[33], w[32], selector);
      w[35] = hc_byte_perm_S (w[32], w[31], selector);
      w[34] = hc_byte_perm_S (w[31], w[30], selector);
      w[33] = hc_byte_perm_S (w[30], w[29], selector);
      w[32] = hc_byte_perm_S (w[29], w[28], selector);
      w[31] = hc_byte_perm_S (w[28], w[27], selector);
      w[30] = hc_byte_perm_S (w[27], w[26], selector);
      w[29] = hc_byte_perm_S (w[26], w[25], selector);
      w[28] = hc_byte_perm_S (w[25], w[24], selector);
      w[27] = hc_byte_perm_S (w[24], w[23], selector);
      w[26] = hc_byte_perm_S (w[23], w[22], selector);
      w[25] = hc_byte_perm_S (w[22], w[21], selector);
      w[24] = hc_byte_perm_S (w[21], w[20], selector);
      w[23] = hc_byte_perm_S (w[20], w[19], selector);
      w[22] = hc_byte_perm_S (w[19], w[18], selector);
      w[21] = hc_byte_perm_S (w[18], w[17], selector);
      w[20] = hc_byte_perm_S (w[17], w[16], selector);
      w[19] = hc_byte_perm_S (w[16], w[15], selector);
      w[18] = hc_byte_perm_S (w[15], w[14], selector);
      w[17] = hc_byte_perm_S (w[14], w[13], selector);
      w[16] = hc_byte_perm_S (w[13], w[12], selector);
      w[15] = hc_byte_perm_S (w[12], w[11], selector);
      w[14] = hc_byte_perm_S (w[11], w[10], selector);
      w[13] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[12] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[11] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[10] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[ 9] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[ 8] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[ 7] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[ 6] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 5] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 4] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 3] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  4:
      w[63] = hc_byte_perm_S (w[59], w[58], selector);
      w[62] = hc_byte_perm_S (w[58], w[57], selector);
      w[61] = hc_byte_perm_S (w[57], w[56], selector);
      w[60] = hc_byte_perm_S (w[56], w[55], selector);
      w[59] = hc_byte_perm_S (w[55], w[54], selector);
      w[58] = hc_byte_perm_S (w[54], w[53], selector);
      w[57] = hc_byte_perm_S (w[53], w[52], selector);
      w[56] = hc_byte_perm_S (w[52], w[51], selector);
      w[55] = hc_byte_perm_S (w[51], w[50], selector);
      w[54] = hc_byte_perm_S (w[50], w[49], selector);
      w[53] = hc_byte_perm_S (w[49], w[48], selector);
      w[52] = hc_byte_perm_S (w[48], w[47], selector);
      w[51] = hc_byte_perm_S (w[47], w[46], selector);
      w[50] = hc_byte_perm_S (w[46], w[45], selector);
      w[49] = hc_byte_perm_S (w[45], w[44], selector);
      w[48] = hc_byte_perm_S (w[44], w[43], selector);
      w[47] = hc_byte_perm_S (w[43], w[42], selector);
      w[46] = hc_byte_perm_S (w[42], w[41], selector);
      w[45] = hc_byte_perm_S (w[41], w[40], selector);
      w[44] = hc_byte_perm_S (w[40], w[39], selector);
      w[43] = hc_byte_perm_S (w[39], w[38], selector);
      w[42] = hc_byte_perm_S (w[38], w[37], selector);
      w[41] = hc_byte_perm_S (w[37], w[36], selector);
      w[40] = hc_byte_perm_S (w[36], w[35], selector);
      w[39] = hc_byte_perm_S (w[35], w[34], selector);
      w[38] = hc_byte_perm_S (w[34], w[33], selector);
      w[37] = hc_byte_perm_S (w[33], w[32], selector);
      w[36] = hc_byte_perm_S (w[32], w[31], selector);
      w[35] = hc_byte_perm_S (w[31], w[30], selector);
      w[34] = hc_byte_perm_S (w[30], w[29], selector);
      w[33] = hc_byte_perm_S (w[29], w[28], selector);
      w[32] = hc_byte_perm_S (w[28], w[27], selector);
      w[31] = hc_byte_perm_S (w[27], w[26], selector);
      w[30] = hc_byte_perm_S (w[26], w[25], selector);
      w[29] = hc_byte_perm_S (w[25], w[24], selector);
      w[28] = hc_byte_perm_S (w[24], w[23], selector);
      w[27] = hc_byte_perm_S (w[23], w[22], selector);
      w[26] = hc_byte_perm_S (w[22], w[21], selector);
      w[25] = hc_byte_perm_S (w[21], w[20], selector);
      w[24] = hc_byte_perm_S (w[20], w[19], selector);
      w[23] = hc_byte_perm_S (w[19], w[18], selector);
      w[22] = hc_byte_perm_S (w[18], w[17], selector);
      w[21] = hc_byte_perm_S (w[17], w[16], selector);
      w[20] = hc_byte_perm_S (w[16], w[15], selector);
      w[19] = hc_byte_perm_S (w[15], w[14], selector);
      w[18] = hc_byte_perm_S (w[14], w[13], selector);
      w[17] = hc_byte_perm_S (w[13], w[12], selector);
      w[16] = hc_byte_perm_S (w[12], w[11], selector);
      w[15] = hc_byte_perm_S (w[11], w[10], selector);
      w[14] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[13] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[12] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[11] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[10] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[ 9] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[ 8] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[ 7] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 6] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 5] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 4] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  5:
      w[63] = hc_byte_perm_S (w[58], w[57], selector);
      w[62] = hc_byte_perm_S (w[57], w[56], selector);
      w[61] = hc_byte_perm_S (w[56], w[55], selector);
      w[60] = hc_byte_perm_S (w[55], w[54], selector);
      w[59] = hc_byte_perm_S (w[54], w[53], selector);
      w[58] = hc_byte_perm_S (w[53], w[52], selector);
      w[57] = hc_byte_perm_S (w[52], w[51], selector);
      w[56] = hc_byte_perm_S (w[51], w[50], selector);
      w[55] = hc_byte_perm_S (w[50], w[49], selector);
      w[54] = hc_byte_perm_S (w[49], w[48], selector);
      w[53] = hc_byte_perm_S (w[48], w[47], selector);
      w[52] = hc_byte_perm_S (w[47], w[46], selector);
      w[51] = hc_byte_perm_S (w[46], w[45], selector);
      w[50] = hc_byte_perm_S (w[45], w[44], selector);
      w[49] = hc_byte_perm_S (w[44], w[43], selector);
      w[48] = hc_byte_perm_S (w[43], w[42], selector);
      w[47] = hc_byte_perm_S (w[42], w[41], selector);
      w[46] = hc_byte_perm_S (w[41], w[40], selector);
      w[45] = hc_byte_perm_S (w[40], w[39], selector);
      w[44] = hc_byte_perm_S (w[39], w[38], selector);
      w[43] = hc_byte_perm_S (w[38], w[37], selector);
      w[42] = hc_byte_perm_S (w[37], w[36], selector);
      w[41] = hc_byte_perm_S (w[36], w[35], selector);
      w[40] = hc_byte_perm_S (w[35], w[34], selector);
      w[39] = hc_byte_perm_S (w[34], w[33], selector);
      w[38] = hc_byte_perm_S (w[33], w[32], selector);
      w[37] = hc_byte_perm_S (w[32], w[31], selector);
      w[36] = hc_byte_perm_S (w[31], w[30], selector);
      w[35] = hc_byte_perm_S (w[30], w[29], selector);
      w[34] = hc_byte_perm_S (w[29], w[28], selector);
      w[33] = hc_byte_perm_S (w[28], w[27], selector);
      w[32] = hc_byte_perm_S (w[27], w[26], selector);
      w[31] = hc_byte_perm_S (w[26], w[25], selector);
      w[30] = hc_byte_perm_S (w[25], w[24], selector);
      w[29] = hc_byte_perm_S (w[24], w[23], selector);
      w[28] = hc_byte_perm_S (w[23], w[22], selector);
      w[27] = hc_byte_perm_S (w[22], w[21], selector);
      w[26] = hc_byte_perm_S (w[21], w[20], selector);
      w[25] = hc_byte_perm_S (w[20], w[19], selector);
      w[24] = hc_byte_perm_S (w[19], w[18], selector);
      w[23] = hc_byte_perm_S (w[18], w[17], selector);
      w[22] = hc_byte_perm_S (w[17], w[16], selector);
      w[21] = hc_byte_perm_S (w[16], w[15], selector);
      w[20] = hc_byte_perm_S (w[15], w[14], selector);
      w[19] = hc_byte_perm_S (w[14], w[13], selector);
      w[18] = hc_byte_perm_S (w[13], w[12], selector);
      w[17] = hc_byte_perm_S (w[12], w[11], selector);
      w[16] = hc_byte_perm_S (w[11], w[10], selector);
      w[15] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[14] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[13] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[12] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[11] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[10] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[ 9] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[ 8] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 7] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 6] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 5] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  6:
      w[63] = hc_byte_perm_S (w[57], w[56], selector);
      w[62] = hc_byte_perm_S (w[56], w[55], selector);
      w[61] = hc_byte_perm_S (w[55], w[54], selector);
      w[60] = hc_byte_perm_S (w[54], w[53], selector);
      w[59] = hc_byte_perm_S (w[53], w[52], selector);
      w[58] = hc_byte_perm_S (w[52], w[51], selector);
      w[57] = hc_byte_perm_S (w[51], w[50], selector);
      w[56] = hc_byte_perm_S (w[50], w[49], selector);
      w[55] = hc_byte_perm_S (w[49], w[48], selector);
      w[54] = hc_byte_perm_S (w[48], w[47], selector);
      w[53] = hc_byte_perm_S (w[47], w[46], selector);
      w[52] = hc_byte_perm_S (w[46], w[45], selector);
      w[51] = hc_byte_perm_S (w[45], w[44], selector);
      w[50] = hc_byte_perm_S (w[44], w[43], selector);
      w[49] = hc_byte_perm_S (w[43], w[42], selector);
      w[48] = hc_byte_perm_S (w[42], w[41], selector);
      w[47] = hc_byte_perm_S (w[41], w[40], selector);
      w[46] = hc_byte_perm_S (w[40], w[39], selector);
      w[45] = hc_byte_perm_S (w[39], w[38], selector);
      w[44] = hc_byte_perm_S (w[38], w[37], selector);
      w[43] = hc_byte_perm_S (w[37], w[36], selector);
      w[42] = hc_byte_perm_S (w[36], w[35], selector);
      w[41] = hc_byte_perm_S (w[35], w[34], selector);
      w[40] = hc_byte_perm_S (w[34], w[33], selector);
      w[39] = hc_byte_perm_S (w[33], w[32], selector);
      w[38] = hc_byte_perm_S (w[32], w[31], selector);
      w[37] = hc_byte_perm_S (w[31], w[30], selector);
      w[36] = hc_byte_perm_S (w[30], w[29], selector);
      w[35] = hc_byte_perm_S (w[29], w[28], selector);
      w[34] = hc_byte_perm_S (w[28], w[27], selector);
      w[33] = hc_byte_perm_S (w[27], w[26], selector);
      w[32] = hc_byte_perm_S (w[26], w[25], selector);
      w[31] = hc_byte_perm_S (w[25], w[24], selector);
      w[30] = hc_byte_perm_S (w[24], w[23], selector);
      w[29] = hc_byte_perm_S (w[23], w[22], selector);
      w[28] = hc_byte_perm_S (w[22], w[21], selector);
      w[27] = hc_byte_perm_S (w[21], w[20], selector);
      w[26] = hc_byte_perm_S (w[20], w[19], selector);
      w[25] = hc_byte_perm_S (w[19], w[18], selector);
      w[24] = hc_byte_perm_S (w[18], w[17], selector);
      w[23] = hc_byte_perm_S (w[17], w[16], selector);
      w[22] = hc_byte_perm_S (w[16], w[15], selector);
      w[21] = hc_byte_perm_S (w[15], w[14], selector);
      w[20] = hc_byte_perm_S (w[14], w[13], selector);
      w[19] = hc_byte_perm_S (w[13], w[12], selector);
      w[18] = hc_byte_perm_S (w[12], w[11], selector);
      w[17] = hc_byte_perm_S (w[11], w[10], selector);
      w[16] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[15] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[14] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[13] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[12] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[11] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[10] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[ 9] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 8] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 7] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 6] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  7:
      w[63] = hc_byte_perm_S (w[56], w[55], selector);
      w[62] = hc_byte_perm_S (w[55], w[54], selector);
      w[61] = hc_byte_perm_S (w[54], w[53], selector);
      w[60] = hc_byte_perm_S (w[53], w[52], selector);
      w[59] = hc_byte_perm_S (w[52], w[51], selector);
      w[58] = hc_byte_perm_S (w[51], w[50], selector);
      w[57] = hc_byte_perm_S (w[50], w[49], selector);
      w[56] = hc_byte_perm_S (w[49], w[48], selector);
      w[55] = hc_byte_perm_S (w[48], w[47], selector);
      w[54] = hc_byte_perm_S (w[47], w[46], selector);
      w[53] = hc_byte_perm_S (w[46], w[45], selector);
      w[52] = hc_byte_perm_S (w[45], w[44], selector);
      w[51] = hc_byte_perm_S (w[44], w[43], selector);
      w[50] = hc_byte_perm_S (w[43], w[42], selector);
      w[49] = hc_byte_perm_S (w[42], w[41], selector);
      w[48] = hc_byte_perm_S (w[41], w[40], selector);
      w[47] = hc_byte_perm_S (w[40], w[39], selector);
      w[46] = hc_byte_perm_S (w[39], w[38], selector);
      w[45] = hc_byte_perm_S (w[38], w[37], selector);
      w[44] = hc_byte_perm_S (w[37], w[36], selector);
      w[43] = hc_byte_perm_S (w[36], w[35], selector);
      w[42] = hc_byte_perm_S (w[35], w[34], selector);
      w[41] = hc_byte_perm_S (w[34], w[33], selector);
      w[40] = hc_byte_perm_S (w[33], w[32], selector);
      w[39] = hc_byte_perm_S (w[32], w[31], selector);
      w[38] = hc_byte_perm_S (w[31], w[30], selector);
      w[37] = hc_byte_perm_S (w[30], w[29], selector);
      w[36] = hc_byte_perm_S (w[29], w[28], selector);
      w[35] = hc_byte_perm_S (w[28], w[27], selector);
      w[34] = hc_byte_perm_S (w[27], w[26], selector);
      w[33] = hc_byte_perm_S (w[26], w[25], selector);
      w[32] = hc_byte_perm_S (w[25], w[24], selector);
      w[31] = hc_byte_perm_S (w[24], w[23], selector);
      w[30] = hc_byte_perm_S (w[23], w[22], selector);
      w[29] = hc_byte_perm_S (w[22], w[21], selector);
      w[28] = hc_byte_perm_S (w[21], w[20], selector);
      w[27] = hc_byte_perm_S (w[20], w[19], selector);
      w[26] = hc_byte_perm_S (w[19], w[18], selector);
      w[25] = hc_byte_perm_S (w[18], w[17], selector);
      w[24] = hc_byte_perm_S (w[17], w[16], selector);
      w[23] = hc_byte_perm_S (w[16], w[15], selector);
      w[22] = hc_byte_perm_S (w[15], w[14], selector);
      w[21] = hc_byte_perm_S (w[14], w[13], selector);
      w[20] = hc_byte_perm_S (w[13], w[12], selector);
      w[19] = hc_byte_perm_S (w[12], w[11], selector);
      w[18] = hc_byte_perm_S (w[11], w[10], selector);
      w[17] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[16] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[15] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[14] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[13] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[12] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[11] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[10] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[ 9] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 8] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 7] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  8:
      w[63] = hc_byte_perm_S (w[55], w[54], selector);
      w[62] = hc_byte_perm_S (w[54], w[53], selector);
      w[61] = hc_byte_perm_S (w[53], w[52], selector);
      w[60] = hc_byte_perm_S (w[52], w[51], selector);
      w[59] = hc_byte_perm_S (w[51], w[50], selector);
      w[58] = hc_byte_perm_S (w[50], w[49], selector);
      w[57] = hc_byte_perm_S (w[49], w[48], selector);
      w[56] = hc_byte_perm_S (w[48], w[47], selector);
      w[55] = hc_byte_perm_S (w[47], w[46], selector);
      w[54] = hc_byte_perm_S (w[46], w[45], selector);
      w[53] = hc_byte_perm_S (w[45], w[44], selector);
      w[52] = hc_byte_perm_S (w[44], w[43], selector);
      w[51] = hc_byte_perm_S (w[43], w[42], selector);
      w[50] = hc_byte_perm_S (w[42], w[41], selector);
      w[49] = hc_byte_perm_S (w[41], w[40], selector);
      w[48] = hc_byte_perm_S (w[40], w[39], selector);
      w[47] = hc_byte_perm_S (w[39], w[38], selector);
      w[46] = hc_byte_perm_S (w[38], w[37], selector);
      w[45] = hc_byte_perm_S (w[37], w[36], selector);
      w[44] = hc_byte_perm_S (w[36], w[35], selector);
      w[43] = hc_byte_perm_S (w[35], w[34], selector);
      w[42] = hc_byte_perm_S (w[34], w[33], selector);
      w[41] = hc_byte_perm_S (w[33], w[32], selector);
      w[40] = hc_byte_perm_S (w[32], w[31], selector);
      w[39] = hc_byte_perm_S (w[31], w[30], selector);
      w[38] = hc_byte_perm_S (w[30], w[29], selector);
      w[37] = hc_byte_perm_S (w[29], w[28], selector);
      w[36] = hc_byte_perm_S (w[28], w[27], selector);
      w[35] = hc_byte_perm_S (w[27], w[26], selector);
      w[34] = hc_byte_perm_S (w[26], w[25], selector);
      w[33] = hc_byte_perm_S (w[25], w[24], selector);
      w[32] = hc_byte_perm_S (w[24], w[23], selector);
      w[31] = hc_byte_perm_S (w[23], w[22], selector);
      w[30] = hc_byte_perm_S (w[22], w[21], selector);
      w[29] = hc_byte_perm_S (w[21], w[20], selector);
      w[28] = hc_byte_perm_S (w[20], w[19], selector);
      w[27] = hc_byte_perm_S (w[19], w[18], selector);
      w[26] = hc_byte_perm_S (w[18], w[17], selector);
      w[25] = hc_byte_perm_S (w[17], w[16], selector);
      w[24] = hc_byte_perm_S (w[16], w[15], selector);
      w[23] = hc_byte_perm_S (w[15], w[14], selector);
      w[22] = hc_byte_perm_S (w[14], w[13], selector);
      w[21] = hc_byte_perm_S (w[13], w[12], selector);
      w[20] = hc_byte_perm_S (w[12], w[11], selector);
      w[19] = hc_byte_perm_S (w[11], w[10], selector);
      w[18] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[17] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[16] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[15] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[14] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[13] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[12] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[11] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[10] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[ 9] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 8] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case  9:
      w[63] = hc_byte_perm_S (w[54], w[53], selector);
      w[62] = hc_byte_perm_S (w[53], w[52], selector);
      w[61] = hc_byte_perm_S (w[52], w[51], selector);
      w[60] = hc_byte_perm_S (w[51], w[50], selector);
      w[59] = hc_byte_perm_S (w[50], w[49], selector);
      w[58] = hc_byte_perm_S (w[49], w[48], selector);
      w[57] = hc_byte_perm_S (w[48], w[47], selector);
      w[56] = hc_byte_perm_S (w[47], w[46], selector);
      w[55] = hc_byte_perm_S (w[46], w[45], selector);
      w[54] = hc_byte_perm_S (w[45], w[44], selector);
      w[53] = hc_byte_perm_S (w[44], w[43], selector);
      w[52] = hc_byte_perm_S (w[43], w[42], selector);
      w[51] = hc_byte_perm_S (w[42], w[41], selector);
      w[50] = hc_byte_perm_S (w[41], w[40], selector);
      w[49] = hc_byte_perm_S (w[40], w[39], selector);
      w[48] = hc_byte_perm_S (w[39], w[38], selector);
      w[47] = hc_byte_perm_S (w[38], w[37], selector);
      w[46] = hc_byte_perm_S (w[37], w[36], selector);
      w[45] = hc_byte_perm_S (w[36], w[35], selector);
      w[44] = hc_byte_perm_S (w[35], w[34], selector);
      w[43] = hc_byte_perm_S (w[34], w[33], selector);
      w[42] = hc_byte_perm_S (w[33], w[32], selector);
      w[41] = hc_byte_perm_S (w[32], w[31], selector);
      w[40] = hc_byte_perm_S (w[31], w[30], selector);
      w[39] = hc_byte_perm_S (w[30], w[29], selector);
      w[38] = hc_byte_perm_S (w[29], w[28], selector);
      w[37] = hc_byte_perm_S (w[28], w[27], selector);
      w[36] = hc_byte_perm_S (w[27], w[26], selector);
      w[35] = hc_byte_perm_S (w[26], w[25], selector);
      w[34] = hc_byte_perm_S (w[25], w[24], selector);
      w[33] = hc_byte_perm_S (w[24], w[23], selector);
      w[32] = hc_byte_perm_S (w[23], w[22], selector);
      w[31] = hc_byte_perm_S (w[22], w[21], selector);
      w[30] = hc_byte_perm_S (w[21], w[20], selector);
      w[29] = hc_byte_perm_S (w[20], w[19], selector);
      w[28] = hc_byte_perm_S (w[19], w[18], selector);
      w[27] = hc_byte_perm_S (w[18], w[17], selector);
      w[26] = hc_byte_perm_S (w[17], w[16], selector);
      w[25] = hc_byte_perm_S (w[16], w[15], selector);
      w[24] = hc_byte_perm_S (w[15], w[14], selector);
      w[23] = hc_byte_perm_S (w[14], w[13], selector);
      w[22] = hc_byte_perm_S (w[13], w[12], selector);
      w[21] = hc_byte_perm_S (w[12], w[11], selector);
      w[20] = hc_byte_perm_S (w[11], w[10], selector);
      w[19] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[18] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[17] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[16] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[15] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[14] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[13] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[12] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[11] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[10] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[ 9] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 10:
      w[63] = hc_byte_perm_S (w[53], w[52], selector);
      w[62] = hc_byte_perm_S (w[52], w[51], selector);
      w[61] = hc_byte_perm_S (w[51], w[50], selector);
      w[60] = hc_byte_perm_S (w[50], w[49], selector);
      w[59] = hc_byte_perm_S (w[49], w[48], selector);
      w[58] = hc_byte_perm_S (w[48], w[47], selector);
      w[57] = hc_byte_perm_S (w[47], w[46], selector);
      w[56] = hc_byte_perm_S (w[46], w[45], selector);
      w[55] = hc_byte_perm_S (w[45], w[44], selector);
      w[54] = hc_byte_perm_S (w[44], w[43], selector);
      w[53] = hc_byte_perm_S (w[43], w[42], selector);
      w[52] = hc_byte_perm_S (w[42], w[41], selector);
      w[51] = hc_byte_perm_S (w[41], w[40], selector);
      w[50] = hc_byte_perm_S (w[40], w[39], selector);
      w[49] = hc_byte_perm_S (w[39], w[38], selector);
      w[48] = hc_byte_perm_S (w[38], w[37], selector);
      w[47] = hc_byte_perm_S (w[37], w[36], selector);
      w[46] = hc_byte_perm_S (w[36], w[35], selector);
      w[45] = hc_byte_perm_S (w[35], w[34], selector);
      w[44] = hc_byte_perm_S (w[34], w[33], selector);
      w[43] = hc_byte_perm_S (w[33], w[32], selector);
      w[42] = hc_byte_perm_S (w[32], w[31], selector);
      w[41] = hc_byte_perm_S (w[31], w[30], selector);
      w[40] = hc_byte_perm_S (w[30], w[29], selector);
      w[39] = hc_byte_perm_S (w[29], w[28], selector);
      w[38] = hc_byte_perm_S (w[28], w[27], selector);
      w[37] = hc_byte_perm_S (w[27], w[26], selector);
      w[36] = hc_byte_perm_S (w[26], w[25], selector);
      w[35] = hc_byte_perm_S (w[25], w[24], selector);
      w[34] = hc_byte_perm_S (w[24], w[23], selector);
      w[33] = hc_byte_perm_S (w[23], w[22], selector);
      w[32] = hc_byte_perm_S (w[22], w[21], selector);
      w[31] = hc_byte_perm_S (w[21], w[20], selector);
      w[30] = hc_byte_perm_S (w[20], w[19], selector);
      w[29] = hc_byte_perm_S (w[19], w[18], selector);
      w[28] = hc_byte_perm_S (w[18], w[17], selector);
      w[27] = hc_byte_perm_S (w[17], w[16], selector);
      w[26] = hc_byte_perm_S (w[16], w[15], selector);
      w[25] = hc_byte_perm_S (w[15], w[14], selector);
      w[24] = hc_byte_perm_S (w[14], w[13], selector);
      w[23] = hc_byte_perm_S (w[13], w[12], selector);
      w[22] = hc_byte_perm_S (w[12], w[11], selector);
      w[21] = hc_byte_perm_S (w[11], w[10], selector);
      w[20] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[19] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[18] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[17] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[16] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[15] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[14] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[13] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[12] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[11] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[10] = hc_byte_perm_S (w[ 0],     0, selector);
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 11:
      w[63] = hc_byte_perm_S (w[52], w[51], selector);
      w[62] = hc_byte_perm_S (w[51], w[50], selector);
      w[61] = hc_byte_perm_S (w[50], w[49], selector);
      w[60] = hc_byte_perm_S (w[49], w[48], selector);
      w[59] = hc_byte_perm_S (w[48], w[47], selector);
      w[58] = hc_byte_perm_S (w[47], w[46], selector);
      w[57] = hc_byte_perm_S (w[46], w[45], selector);
      w[56] = hc_byte_perm_S (w[45], w[44], selector);
      w[55] = hc_byte_perm_S (w[44], w[43], selector);
      w[54] = hc_byte_perm_S (w[43], w[42], selector);
      w[53] = hc_byte_perm_S (w[42], w[41], selector);
      w[52] = hc_byte_perm_S (w[41], w[40], selector);
      w[51] = hc_byte_perm_S (w[40], w[39], selector);
      w[50] = hc_byte_perm_S (w[39], w[38], selector);
      w[49] = hc_byte_perm_S (w[38], w[37], selector);
      w[48] = hc_byte_perm_S (w[37], w[36], selector);
      w[47] = hc_byte_perm_S (w[36], w[35], selector);
      w[46] = hc_byte_perm_S (w[35], w[34], selector);
      w[45] = hc_byte_perm_S (w[34], w[33], selector);
      w[44] = hc_byte_perm_S (w[33], w[32], selector);
      w[43] = hc_byte_perm_S (w[32], w[31], selector);
      w[42] = hc_byte_perm_S (w[31], w[30], selector);
      w[41] = hc_byte_perm_S (w[30], w[29], selector);
      w[40] = hc_byte_perm_S (w[29], w[28], selector);
      w[39] = hc_byte_perm_S (w[28], w[27], selector);
      w[38] = hc_byte_perm_S (w[27], w[26], selector);
      w[37] = hc_byte_perm_S (w[26], w[25], selector);
      w[36] = hc_byte_perm_S (w[25], w[24], selector);
      w[35] = hc_byte_perm_S (w[24], w[23], selector);
      w[34] = hc_byte_perm_S (w[23], w[22], selector);
      w[33] = hc_byte_perm_S (w[22], w[21], selector);
      w[32] = hc_byte_perm_S (w[21], w[20], selector);
      w[31] = hc_byte_perm_S (w[20], w[19], selector);
      w[30] = hc_byte_perm_S (w[19], w[18], selector);
      w[29] = hc_byte_perm_S (w[18], w[17], selector);
      w[28] = hc_byte_perm_S (w[17], w[16], selector);
      w[27] = hc_byte_perm_S (w[16], w[15], selector);
      w[26] = hc_byte_perm_S (w[15], w[14], selector);
      w[25] = hc_byte_perm_S (w[14], w[13], selector);
      w[24] = hc_byte_perm_S (w[13], w[12], selector);
      w[23] = hc_byte_perm_S (w[12], w[11], selector);
      w[22] = hc_byte_perm_S (w[11], w[10], selector);
      w[21] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[20] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[19] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[18] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[17] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[16] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[15] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[14] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[13] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[12] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[11] = hc_byte_perm_S (w[ 0],     0, selector);
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 12:
      w[63] = hc_byte_perm_S (w[51], w[50], selector);
      w[62] = hc_byte_perm_S (w[50], w[49], selector);
      w[61] = hc_byte_perm_S (w[49], w[48], selector);
      w[60] = hc_byte_perm_S (w[48], w[47], selector);
      w[59] = hc_byte_perm_S (w[47], w[46], selector);
      w[58] = hc_byte_perm_S (w[46], w[45], selector);
      w[57] = hc_byte_perm_S (w[45], w[44], selector);
      w[56] = hc_byte_perm_S (w[44], w[43], selector);
      w[55] = hc_byte_perm_S (w[43], w[42], selector);
      w[54] = hc_byte_perm_S (w[42], w[41], selector);
      w[53] = hc_byte_perm_S (w[41], w[40], selector);
      w[52] = hc_byte_perm_S (w[40], w[39], selector);
      w[51] = hc_byte_perm_S (w[39], w[38], selector);
      w[50] = hc_byte_perm_S (w[38], w[37], selector);
      w[49] = hc_byte_perm_S (w[37], w[36], selector);
      w[48] = hc_byte_perm_S (w[36], w[35], selector);
      w[47] = hc_byte_perm_S (w[35], w[34], selector);
      w[46] = hc_byte_perm_S (w[34], w[33], selector);
      w[45] = hc_byte_perm_S (w[33], w[32], selector);
      w[44] = hc_byte_perm_S (w[32], w[31], selector);
      w[43] = hc_byte_perm_S (w[31], w[30], selector);
      w[42] = hc_byte_perm_S (w[30], w[29], selector);
      w[41] = hc_byte_perm_S (w[29], w[28], selector);
      w[40] = hc_byte_perm_S (w[28], w[27], selector);
      w[39] = hc_byte_perm_S (w[27], w[26], selector);
      w[38] = hc_byte_perm_S (w[26], w[25], selector);
      w[37] = hc_byte_perm_S (w[25], w[24], selector);
      w[36] = hc_byte_perm_S (w[24], w[23], selector);
      w[35] = hc_byte_perm_S (w[23], w[22], selector);
      w[34] = hc_byte_perm_S (w[22], w[21], selector);
      w[33] = hc_byte_perm_S (w[21], w[20], selector);
      w[32] = hc_byte_perm_S (w[20], w[19], selector);
      w[31] = hc_byte_perm_S (w[19], w[18], selector);
      w[30] = hc_byte_perm_S (w[18], w[17], selector);
      w[29] = hc_byte_perm_S (w[17], w[16], selector);
      w[28] = hc_byte_perm_S (w[16], w[15], selector);
      w[27] = hc_byte_perm_S (w[15], w[14], selector);
      w[26] = hc_byte_perm_S (w[14], w[13], selector);
      w[25] = hc_byte_perm_S (w[13], w[12], selector);
      w[24] = hc_byte_perm_S (w[12], w[11], selector);
      w[23] = hc_byte_perm_S (w[11], w[10], selector);
      w[22] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[21] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[20] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[19] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[18] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[17] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[16] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[15] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[14] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[13] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[12] = hc_byte_perm_S (w[ 0],     0, selector);
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 13:
      w[63] = hc_byte_perm_S (w[50], w[49], selector);
      w[62] = hc_byte_perm_S (w[49], w[48], selector);
      w[61] = hc_byte_perm_S (w[48], w[47], selector);
      w[60] = hc_byte_perm_S (w[47], w[46], selector);
      w[59] = hc_byte_perm_S (w[46], w[45], selector);
      w[58] = hc_byte_perm_S (w[45], w[44], selector);
      w[57] = hc_byte_perm_S (w[44], w[43], selector);
      w[56] = hc_byte_perm_S (w[43], w[42], selector);
      w[55] = hc_byte_perm_S (w[42], w[41], selector);
      w[54] = hc_byte_perm_S (w[41], w[40], selector);
      w[53] = hc_byte_perm_S (w[40], w[39], selector);
      w[52] = hc_byte_perm_S (w[39], w[38], selector);
      w[51] = hc_byte_perm_S (w[38], w[37], selector);
      w[50] = hc_byte_perm_S (w[37], w[36], selector);
      w[49] = hc_byte_perm_S (w[36], w[35], selector);
      w[48] = hc_byte_perm_S (w[35], w[34], selector);
      w[47] = hc_byte_perm_S (w[34], w[33], selector);
      w[46] = hc_byte_perm_S (w[33], w[32], selector);
      w[45] = hc_byte_perm_S (w[32], w[31], selector);
      w[44] = hc_byte_perm_S (w[31], w[30], selector);
      w[43] = hc_byte_perm_S (w[30], w[29], selector);
      w[42] = hc_byte_perm_S (w[29], w[28], selector);
      w[41] = hc_byte_perm_S (w[28], w[27], selector);
      w[40] = hc_byte_perm_S (w[27], w[26], selector);
      w[39] = hc_byte_perm_S (w[26], w[25], selector);
      w[38] = hc_byte_perm_S (w[25], w[24], selector);
      w[37] = hc_byte_perm_S (w[24], w[23], selector);
      w[36] = hc_byte_perm_S (w[23], w[22], selector);
      w[35] = hc_byte_perm_S (w[22], w[21], selector);
      w[34] = hc_byte_perm_S (w[21], w[20], selector);
      w[33] = hc_byte_perm_S (w[20], w[19], selector);
      w[32] = hc_byte_perm_S (w[19], w[18], selector);
      w[31] = hc_byte_perm_S (w[18], w[17], selector);
      w[30] = hc_byte_perm_S (w[17], w[16], selector);
      w[29] = hc_byte_perm_S (w[16], w[15], selector);
      w[28] = hc_byte_perm_S (w[15], w[14], selector);
      w[27] = hc_byte_perm_S (w[14], w[13], selector);
      w[26] = hc_byte_perm_S (w[13], w[12], selector);
      w[25] = hc_byte_perm_S (w[12], w[11], selector);
      w[24] = hc_byte_perm_S (w[11], w[10], selector);
      w[23] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[22] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[21] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[20] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[19] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[18] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[17] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[16] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[15] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[14] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[13] = hc_byte_perm_S (w[ 0],     0, selector);
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 14:
      w[63] = hc_byte_perm_S (w[49], w[48], selector);
      w[62] = hc_byte_perm_S (w[48], w[47], selector);
      w[61] = hc_byte_perm_S (w[47], w[46], selector);
      w[60] = hc_byte_perm_S (w[46], w[45], selector);
      w[59] = hc_byte_perm_S (w[45], w[44], selector);
      w[58] = hc_byte_perm_S (w[44], w[43], selector);
      w[57] = hc_byte_perm_S (w[43], w[42], selector);
      w[56] = hc_byte_perm_S (w[42], w[41], selector);
      w[55] = hc_byte_perm_S (w[41], w[40], selector);
      w[54] = hc_byte_perm_S (w[40], w[39], selector);
      w[53] = hc_byte_perm_S (w[39], w[38], selector);
      w[52] = hc_byte_perm_S (w[38], w[37], selector);
      w[51] = hc_byte_perm_S (w[37], w[36], selector);
      w[50] = hc_byte_perm_S (w[36], w[35], selector);
      w[49] = hc_byte_perm_S (w[35], w[34], selector);
      w[48] = hc_byte_perm_S (w[34], w[33], selector);
      w[47] = hc_byte_perm_S (w[33], w[32], selector);
      w[46] = hc_byte_perm_S (w[32], w[31], selector);
      w[45] = hc_byte_perm_S (w[31], w[30], selector);
      w[44] = hc_byte_perm_S (w[30], w[29], selector);
      w[43] = hc_byte_perm_S (w[29], w[28], selector);
      w[42] = hc_byte_perm_S (w[28], w[27], selector);
      w[41] = hc_byte_perm_S (w[27], w[26], selector);
      w[40] = hc_byte_perm_S (w[26], w[25], selector);
      w[39] = hc_byte_perm_S (w[25], w[24], selector);
      w[38] = hc_byte_perm_S (w[24], w[23], selector);
      w[37] = hc_byte_perm_S (w[23], w[22], selector);
      w[36] = hc_byte_perm_S (w[22], w[21], selector);
      w[35] = hc_byte_perm_S (w[21], w[20], selector);
      w[34] = hc_byte_perm_S (w[20], w[19], selector);
      w[33] = hc_byte_perm_S (w[19], w[18], selector);
      w[32] = hc_byte_perm_S (w[18], w[17], selector);
      w[31] = hc_byte_perm_S (w[17], w[16], selector);
      w[30] = hc_byte_perm_S (w[16], w[15], selector);
      w[29] = hc_byte_perm_S (w[15], w[14], selector);
      w[28] = hc_byte_perm_S (w[14], w[13], selector);
      w[27] = hc_byte_perm_S (w[13], w[12], selector);
      w[26] = hc_byte_perm_S (w[12], w[11], selector);
      w[25] = hc_byte_perm_S (w[11], w[10], selector);
      w[24] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[23] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[22] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[21] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[20] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[19] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[18] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[17] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[16] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[15] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[14] = hc_byte_perm_S (w[ 0],     0, selector);
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 15:
      w[63] = hc_byte_perm_S (w[48], w[47], selector);
      w[62] = hc_byte_perm_S (w[47], w[46], selector);
      w[61] = hc_byte_perm_S (w[46], w[45], selector);
      w[60] = hc_byte_perm_S (w[45], w[44], selector);
      w[59] = hc_byte_perm_S (w[44], w[43], selector);
      w[58] = hc_byte_perm_S (w[43], w[42], selector);
      w[57] = hc_byte_perm_S (w[42], w[41], selector);
      w[56] = hc_byte_perm_S (w[41], w[40], selector);
      w[55] = hc_byte_perm_S (w[40], w[39], selector);
      w[54] = hc_byte_perm_S (w[39], w[38], selector);
      w[53] = hc_byte_perm_S (w[38], w[37], selector);
      w[52] = hc_byte_perm_S (w[37], w[36], selector);
      w[51] = hc_byte_perm_S (w[36], w[35], selector);
      w[50] = hc_byte_perm_S (w[35], w[34], selector);
      w[49] = hc_byte_perm_S (w[34], w[33], selector);
      w[48] = hc_byte_perm_S (w[33], w[32], selector);
      w[47] = hc_byte_perm_S (w[32], w[31], selector);
      w[46] = hc_byte_perm_S (w[31], w[30], selector);
      w[45] = hc_byte_perm_S (w[30], w[29], selector);
      w[44] = hc_byte_perm_S (w[29], w[28], selector);
      w[43] = hc_byte_perm_S (w[28], w[27], selector);
      w[42] = hc_byte_perm_S (w[27], w[26], selector);
      w[41] = hc_byte_perm_S (w[26], w[25], selector);
      w[40] = hc_byte_perm_S (w[25], w[24], selector);
      w[39] = hc_byte_perm_S (w[24], w[23], selector);
      w[38] = hc_byte_perm_S (w[23], w[22], selector);
      w[37] = hc_byte_perm_S (w[22], w[21], selector);
      w[36] = hc_byte_perm_S (w[21], w[20], selector);
      w[35] = hc_byte_perm_S (w[20], w[19], selector);
      w[34] = hc_byte_perm_S (w[19], w[18], selector);
      w[33] = hc_byte_perm_S (w[18], w[17], selector);
      w[32] = hc_byte_perm_S (w[17], w[16], selector);
      w[31] = hc_byte_perm_S (w[16], w[15], selector);
      w[30] = hc_byte_perm_S (w[15], w[14], selector);
      w[29] = hc_byte_perm_S (w[14], w[13], selector);
      w[28] = hc_byte_perm_S (w[13], w[12], selector);
      w[27] = hc_byte_perm_S (w[12], w[11], selector);
      w[26] = hc_byte_perm_S (w[11], w[10], selector);
      w[25] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[24] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[23] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[22] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[21] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[20] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[19] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[18] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[17] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[16] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[15] = hc_byte_perm_S (w[ 0],     0, selector);
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 16:
      w[63] = hc_byte_perm_S (w[47], w[46], selector);
      w[62] = hc_byte_perm_S (w[46], w[45], selector);
      w[61] = hc_byte_perm_S (w[45], w[44], selector);
      w[60] = hc_byte_perm_S (w[44], w[43], selector);
      w[59] = hc_byte_perm_S (w[43], w[42], selector);
      w[58] = hc_byte_perm_S (w[42], w[41], selector);
      w[57] = hc_byte_perm_S (w[41], w[40], selector);
      w[56] = hc_byte_perm_S (w[40], w[39], selector);
      w[55] = hc_byte_perm_S (w[39], w[38], selector);
      w[54] = hc_byte_perm_S (w[38], w[37], selector);
      w[53] = hc_byte_perm_S (w[37], w[36], selector);
      w[52] = hc_byte_perm_S (w[36], w[35], selector);
      w[51] = hc_byte_perm_S (w[35], w[34], selector);
      w[50] = hc_byte_perm_S (w[34], w[33], selector);
      w[49] = hc_byte_perm_S (w[33], w[32], selector);
      w[48] = hc_byte_perm_S (w[32], w[31], selector);
      w[47] = hc_byte_perm_S (w[31], w[30], selector);
      w[46] = hc_byte_perm_S (w[30], w[29], selector);
      w[45] = hc_byte_perm_S (w[29], w[28], selector);
      w[44] = hc_byte_perm_S (w[28], w[27], selector);
      w[43] = hc_byte_perm_S (w[27], w[26], selector);
      w[42] = hc_byte_perm_S (w[26], w[25], selector);
      w[41] = hc_byte_perm_S (w[25], w[24], selector);
      w[40] = hc_byte_perm_S (w[24], w[23], selector);
      w[39] = hc_byte_perm_S (w[23], w[22], selector);
      w[38] = hc_byte_perm_S (w[22], w[21], selector);
      w[37] = hc_byte_perm_S (w[21], w[20], selector);
      w[36] = hc_byte_perm_S (w[20], w[19], selector);
      w[35] = hc_byte_perm_S (w[19], w[18], selector);
      w[34] = hc_byte_perm_S (w[18], w[17], selector);
      w[33] = hc_byte_perm_S (w[17], w[16], selector);
      w[32] = hc_byte_perm_S (w[16], w[15], selector);
      w[31] = hc_byte_perm_S (w[15], w[14], selector);
      w[30] = hc_byte_perm_S (w[14], w[13], selector);
      w[29] = hc_byte_perm_S (w[13], w[12], selector);
      w[28] = hc_byte_perm_S (w[12], w[11], selector);
      w[27] = hc_byte_perm_S (w[11], w[10], selector);
      w[26] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[25] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[24] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[23] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[22] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[21] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[20] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[19] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[18] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[17] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[16] = hc_byte_perm_S (w[ 0],     0, selector);
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 17:
      w[63] = hc_byte_perm_S (w[46], w[45], selector);
      w[62] = hc_byte_perm_S (w[45], w[44], selector);
      w[61] = hc_byte_perm_S (w[44], w[43], selector);
      w[60] = hc_byte_perm_S (w[43], w[42], selector);
      w[59] = hc_byte_perm_S (w[42], w[41], selector);
      w[58] = hc_byte_perm_S (w[41], w[40], selector);
      w[57] = hc_byte_perm_S (w[40], w[39], selector);
      w[56] = hc_byte_perm_S (w[39], w[38], selector);
      w[55] = hc_byte_perm_S (w[38], w[37], selector);
      w[54] = hc_byte_perm_S (w[37], w[36], selector);
      w[53] = hc_byte_perm_S (w[36], w[35], selector);
      w[52] = hc_byte_perm_S (w[35], w[34], selector);
      w[51] = hc_byte_perm_S (w[34], w[33], selector);
      w[50] = hc_byte_perm_S (w[33], w[32], selector);
      w[49] = hc_byte_perm_S (w[32], w[31], selector);
      w[48] = hc_byte_perm_S (w[31], w[30], selector);
      w[47] = hc_byte_perm_S (w[30], w[29], selector);
      w[46] = hc_byte_perm_S (w[29], w[28], selector);
      w[45] = hc_byte_perm_S (w[28], w[27], selector);
      w[44] = hc_byte_perm_S (w[27], w[26], selector);
      w[43] = hc_byte_perm_S (w[26], w[25], selector);
      w[42] = hc_byte_perm_S (w[25], w[24], selector);
      w[41] = hc_byte_perm_S (w[24], w[23], selector);
      w[40] = hc_byte_perm_S (w[23], w[22], selector);
      w[39] = hc_byte_perm_S (w[22], w[21], selector);
      w[38] = hc_byte_perm_S (w[21], w[20], selector);
      w[37] = hc_byte_perm_S (w[20], w[19], selector);
      w[36] = hc_byte_perm_S (w[19], w[18], selector);
      w[35] = hc_byte_perm_S (w[18], w[17], selector);
      w[34] = hc_byte_perm_S (w[17], w[16], selector);
      w[33] = hc_byte_perm_S (w[16], w[15], selector);
      w[32] = hc_byte_perm_S (w[15], w[14], selector);
      w[31] = hc_byte_perm_S (w[14], w[13], selector);
      w[30] = hc_byte_perm_S (w[13], w[12], selector);
      w[29] = hc_byte_perm_S (w[12], w[11], selector);
      w[28] = hc_byte_perm_S (w[11], w[10], selector);
      w[27] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[26] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[25] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[24] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[23] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[22] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[21] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[20] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[19] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[18] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[17] = hc_byte_perm_S (w[ 0],     0, selector);
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 18:
      w[63] = hc_byte_perm_S (w[45], w[44], selector);
      w[62] = hc_byte_perm_S (w[44], w[43], selector);
      w[61] = hc_byte_perm_S (w[43], w[42], selector);
      w[60] = hc_byte_perm_S (w[42], w[41], selector);
      w[59] = hc_byte_perm_S (w[41], w[40], selector);
      w[58] = hc_byte_perm_S (w[40], w[39], selector);
      w[57] = hc_byte_perm_S (w[39], w[38], selector);
      w[56] = hc_byte_perm_S (w[38], w[37], selector);
      w[55] = hc_byte_perm_S (w[37], w[36], selector);
      w[54] = hc_byte_perm_S (w[36], w[35], selector);
      w[53] = hc_byte_perm_S (w[35], w[34], selector);
      w[52] = hc_byte_perm_S (w[34], w[33], selector);
      w[51] = hc_byte_perm_S (w[33], w[32], selector);
      w[50] = hc_byte_perm_S (w[32], w[31], selector);
      w[49] = hc_byte_perm_S (w[31], w[30], selector);
      w[48] = hc_byte_perm_S (w[30], w[29], selector);
      w[47] = hc_byte_perm_S (w[29], w[28], selector);
      w[46] = hc_byte_perm_S (w[28], w[27], selector);
      w[45] = hc_byte_perm_S (w[27], w[26], selector);
      w[44] = hc_byte_perm_S (w[26], w[25], selector);
      w[43] = hc_byte_perm_S (w[25], w[24], selector);
      w[42] = hc_byte_perm_S (w[24], w[23], selector);
      w[41] = hc_byte_perm_S (w[23], w[22], selector);
      w[40] = hc_byte_perm_S (w[22], w[21], selector);
      w[39] = hc_byte_perm_S (w[21], w[20], selector);
      w[38] = hc_byte_perm_S (w[20], w[19], selector);
      w[37] = hc_byte_perm_S (w[19], w[18], selector);
      w[36] = hc_byte_perm_S (w[18], w[17], selector);
      w[35] = hc_byte_perm_S (w[17], w[16], selector);
      w[34] = hc_byte_perm_S (w[16], w[15], selector);
      w[33] = hc_byte_perm_S (w[15], w[14], selector);
      w[32] = hc_byte_perm_S (w[14], w[13], selector);
      w[31] = hc_byte_perm_S (w[13], w[12], selector);
      w[30] = hc_byte_perm_S (w[12], w[11], selector);
      w[29] = hc_byte_perm_S (w[11], w[10], selector);
      w[28] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[27] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[26] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[25] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[24] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[23] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[22] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[21] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[20] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[19] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[18] = hc_byte_perm_S (w[ 0],     0, selector);
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 19:
      w[63] = hc_byte_perm_S (w[44], w[43], selector);
      w[62] = hc_byte_perm_S (w[43], w[42], selector);
      w[61] = hc_byte_perm_S (w[42], w[41], selector);
      w[60] = hc_byte_perm_S (w[41], w[40], selector);
      w[59] = hc_byte_perm_S (w[40], w[39], selector);
      w[58] = hc_byte_perm_S (w[39], w[38], selector);
      w[57] = hc_byte_perm_S (w[38], w[37], selector);
      w[56] = hc_byte_perm_S (w[37], w[36], selector);
      w[55] = hc_byte_perm_S (w[36], w[35], selector);
      w[54] = hc_byte_perm_S (w[35], w[34], selector);
      w[53] = hc_byte_perm_S (w[34], w[33], selector);
      w[52] = hc_byte_perm_S (w[33], w[32], selector);
      w[51] = hc_byte_perm_S (w[32], w[31], selector);
      w[50] = hc_byte_perm_S (w[31], w[30], selector);
      w[49] = hc_byte_perm_S (w[30], w[29], selector);
      w[48] = hc_byte_perm_S (w[29], w[28], selector);
      w[47] = hc_byte_perm_S (w[28], w[27], selector);
      w[46] = hc_byte_perm_S (w[27], w[26], selector);
      w[45] = hc_byte_perm_S (w[26], w[25], selector);
      w[44] = hc_byte_perm_S (w[25], w[24], selector);
      w[43] = hc_byte_perm_S (w[24], w[23], selector);
      w[42] = hc_byte_perm_S (w[23], w[22], selector);
      w[41] = hc_byte_perm_S (w[22], w[21], selector);
      w[40] = hc_byte_perm_S (w[21], w[20], selector);
      w[39] = hc_byte_perm_S (w[20], w[19], selector);
      w[38] = hc_byte_perm_S (w[19], w[18], selector);
      w[37] = hc_byte_perm_S (w[18], w[17], selector);
      w[36] = hc_byte_perm_S (w[17], w[16], selector);
      w[35] = hc_byte_perm_S (w[16], w[15], selector);
      w[34] = hc_byte_perm_S (w[15], w[14], selector);
      w[33] = hc_byte_perm_S (w[14], w[13], selector);
      w[32] = hc_byte_perm_S (w[13], w[12], selector);
      w[31] = hc_byte_perm_S (w[12], w[11], selector);
      w[30] = hc_byte_perm_S (w[11], w[10], selector);
      w[29] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[28] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[27] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[26] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[25] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[24] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[23] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[22] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[21] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[20] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[19] = hc_byte_perm_S (w[ 0],     0, selector);
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 20:
      w[63] = hc_byte_perm_S (w[43], w[42], selector);
      w[62] = hc_byte_perm_S (w[42], w[41], selector);
      w[61] = hc_byte_perm_S (w[41], w[40], selector);
      w[60] = hc_byte_perm_S (w[40], w[39], selector);
      w[59] = hc_byte_perm_S (w[39], w[38], selector);
      w[58] = hc_byte_perm_S (w[38], w[37], selector);
      w[57] = hc_byte_perm_S (w[37], w[36], selector);
      w[56] = hc_byte_perm_S (w[36], w[35], selector);
      w[55] = hc_byte_perm_S (w[35], w[34], selector);
      w[54] = hc_byte_perm_S (w[34], w[33], selector);
      w[53] = hc_byte_perm_S (w[33], w[32], selector);
      w[52] = hc_byte_perm_S (w[32], w[31], selector);
      w[51] = hc_byte_perm_S (w[31], w[30], selector);
      w[50] = hc_byte_perm_S (w[30], w[29], selector);
      w[49] = hc_byte_perm_S (w[29], w[28], selector);
      w[48] = hc_byte_perm_S (w[28], w[27], selector);
      w[47] = hc_byte_perm_S (w[27], w[26], selector);
      w[46] = hc_byte_perm_S (w[26], w[25], selector);
      w[45] = hc_byte_perm_S (w[25], w[24], selector);
      w[44] = hc_byte_perm_S (w[24], w[23], selector);
      w[43] = hc_byte_perm_S (w[23], w[22], selector);
      w[42] = hc_byte_perm_S (w[22], w[21], selector);
      w[41] = hc_byte_perm_S (w[21], w[20], selector);
      w[40] = hc_byte_perm_S (w[20], w[19], selector);
      w[39] = hc_byte_perm_S (w[19], w[18], selector);
      w[38] = hc_byte_perm_S (w[18], w[17], selector);
      w[37] = hc_byte_perm_S (w[17], w[16], selector);
      w[36] = hc_byte_perm_S (w[16], w[15], selector);
      w[35] = hc_byte_perm_S (w[15], w[14], selector);
      w[34] = hc_byte_perm_S (w[14], w[13], selector);
      w[33] = hc_byte_perm_S (w[13], w[12], selector);
      w[32] = hc_byte_perm_S (w[12], w[11], selector);
      w[31] = hc_byte_perm_S (w[11], w[10], selector);
      w[30] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[29] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[28] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[27] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[26] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[25] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[24] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[23] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[22] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[21] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[20] = hc_byte_perm_S (w[ 0],     0, selector);
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 21:
      w[63] = hc_byte_perm_S (w[42], w[41], selector);
      w[62] = hc_byte_perm_S (w[41], w[40], selector);
      w[61] = hc_byte_perm_S (w[40], w[39], selector);
      w[60] = hc_byte_perm_S (w[39], w[38], selector);
      w[59] = hc_byte_perm_S (w[38], w[37], selector);
      w[58] = hc_byte_perm_S (w[37], w[36], selector);
      w[57] = hc_byte_perm_S (w[36], w[35], selector);
      w[56] = hc_byte_perm_S (w[35], w[34], selector);
      w[55] = hc_byte_perm_S (w[34], w[33], selector);
      w[54] = hc_byte_perm_S (w[33], w[32], selector);
      w[53] = hc_byte_perm_S (w[32], w[31], selector);
      w[52] = hc_byte_perm_S (w[31], w[30], selector);
      w[51] = hc_byte_perm_S (w[30], w[29], selector);
      w[50] = hc_byte_perm_S (w[29], w[28], selector);
      w[49] = hc_byte_perm_S (w[28], w[27], selector);
      w[48] = hc_byte_perm_S (w[27], w[26], selector);
      w[47] = hc_byte_perm_S (w[26], w[25], selector);
      w[46] = hc_byte_perm_S (w[25], w[24], selector);
      w[45] = hc_byte_perm_S (w[24], w[23], selector);
      w[44] = hc_byte_perm_S (w[23], w[22], selector);
      w[43] = hc_byte_perm_S (w[22], w[21], selector);
      w[42] = hc_byte_perm_S (w[21], w[20], selector);
      w[41] = hc_byte_perm_S (w[20], w[19], selector);
      w[40] = hc_byte_perm_S (w[19], w[18], selector);
      w[39] = hc_byte_perm_S (w[18], w[17], selector);
      w[38] = hc_byte_perm_S (w[17], w[16], selector);
      w[37] = hc_byte_perm_S (w[16], w[15], selector);
      w[36] = hc_byte_perm_S (w[15], w[14], selector);
      w[35] = hc_byte_perm_S (w[14], w[13], selector);
      w[34] = hc_byte_perm_S (w[13], w[12], selector);
      w[33] = hc_byte_perm_S (w[12], w[11], selector);
      w[32] = hc_byte_perm_S (w[11], w[10], selector);
      w[31] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[30] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[29] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[28] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[27] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[26] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[25] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[24] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[23] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[22] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[21] = hc_byte_perm_S (w[ 0],     0, selector);
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 22:
      w[63] = hc_byte_perm_S (w[41], w[40], selector);
      w[62] = hc_byte_perm_S (w[40], w[39], selector);
      w[61] = hc_byte_perm_S (w[39], w[38], selector);
      w[60] = hc_byte_perm_S (w[38], w[37], selector);
      w[59] = hc_byte_perm_S (w[37], w[36], selector);
      w[58] = hc_byte_perm_S (w[36], w[35], selector);
      w[57] = hc_byte_perm_S (w[35], w[34], selector);
      w[56] = hc_byte_perm_S (w[34], w[33], selector);
      w[55] = hc_byte_perm_S (w[33], w[32], selector);
      w[54] = hc_byte_perm_S (w[32], w[31], selector);
      w[53] = hc_byte_perm_S (w[31], w[30], selector);
      w[52] = hc_byte_perm_S (w[30], w[29], selector);
      w[51] = hc_byte_perm_S (w[29], w[28], selector);
      w[50] = hc_byte_perm_S (w[28], w[27], selector);
      w[49] = hc_byte_perm_S (w[27], w[26], selector);
      w[48] = hc_byte_perm_S (w[26], w[25], selector);
      w[47] = hc_byte_perm_S (w[25], w[24], selector);
      w[46] = hc_byte_perm_S (w[24], w[23], selector);
      w[45] = hc_byte_perm_S (w[23], w[22], selector);
      w[44] = hc_byte_perm_S (w[22], w[21], selector);
      w[43] = hc_byte_perm_S (w[21], w[20], selector);
      w[42] = hc_byte_perm_S (w[20], w[19], selector);
      w[41] = hc_byte_perm_S (w[19], w[18], selector);
      w[40] = hc_byte_perm_S (w[18], w[17], selector);
      w[39] = hc_byte_perm_S (w[17], w[16], selector);
      w[38] = hc_byte_perm_S (w[16], w[15], selector);
      w[37] = hc_byte_perm_S (w[15], w[14], selector);
      w[36] = hc_byte_perm_S (w[14], w[13], selector);
      w[35] = hc_byte_perm_S (w[13], w[12], selector);
      w[34] = hc_byte_perm_S (w[12], w[11], selector);
      w[33] = hc_byte_perm_S (w[11], w[10], selector);
      w[32] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[31] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[30] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[29] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[28] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[27] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[26] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[25] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[24] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[23] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[22] = hc_byte_perm_S (w[ 0],     0, selector);
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 23:
      w[63] = hc_byte_perm_S (w[40], w[39], selector);
      w[62] = hc_byte_perm_S (w[39], w[38], selector);
      w[61] = hc_byte_perm_S (w[38], w[37], selector);
      w[60] = hc_byte_perm_S (w[37], w[36], selector);
      w[59] = hc_byte_perm_S (w[36], w[35], selector);
      w[58] = hc_byte_perm_S (w[35], w[34], selector);
      w[57] = hc_byte_perm_S (w[34], w[33], selector);
      w[56] = hc_byte_perm_S (w[33], w[32], selector);
      w[55] = hc_byte_perm_S (w[32], w[31], selector);
      w[54] = hc_byte_perm_S (w[31], w[30], selector);
      w[53] = hc_byte_perm_S (w[30], w[29], selector);
      w[52] = hc_byte_perm_S (w[29], w[28], selector);
      w[51] = hc_byte_perm_S (w[28], w[27], selector);
      w[50] = hc_byte_perm_S (w[27], w[26], selector);
      w[49] = hc_byte_perm_S (w[26], w[25], selector);
      w[48] = hc_byte_perm_S (w[25], w[24], selector);
      w[47] = hc_byte_perm_S (w[24], w[23], selector);
      w[46] = hc_byte_perm_S (w[23], w[22], selector);
      w[45] = hc_byte_perm_S (w[22], w[21], selector);
      w[44] = hc_byte_perm_S (w[21], w[20], selector);
      w[43] = hc_byte_perm_S (w[20], w[19], selector);
      w[42] = hc_byte_perm_S (w[19], w[18], selector);
      w[41] = hc_byte_perm_S (w[18], w[17], selector);
      w[40] = hc_byte_perm_S (w[17], w[16], selector);
      w[39] = hc_byte_perm_S (w[16], w[15], selector);
      w[38] = hc_byte_perm_S (w[15], w[14], selector);
      w[37] = hc_byte_perm_S (w[14], w[13], selector);
      w[36] = hc_byte_perm_S (w[13], w[12], selector);
      w[35] = hc_byte_perm_S (w[12], w[11], selector);
      w[34] = hc_byte_perm_S (w[11], w[10], selector);
      w[33] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[32] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[31] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[30] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[29] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[28] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[27] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[26] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[25] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[24] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[23] = hc_byte_perm_S (w[ 0],     0, selector);
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 24:
      w[63] = hc_byte_perm_S (w[39], w[38], selector);
      w[62] = hc_byte_perm_S (w[38], w[37], selector);
      w[61] = hc_byte_perm_S (w[37], w[36], selector);
      w[60] = hc_byte_perm_S (w[36], w[35], selector);
      w[59] = hc_byte_perm_S (w[35], w[34], selector);
      w[58] = hc_byte_perm_S (w[34], w[33], selector);
      w[57] = hc_byte_perm_S (w[33], w[32], selector);
      w[56] = hc_byte_perm_S (w[32], w[31], selector);
      w[55] = hc_byte_perm_S (w[31], w[30], selector);
      w[54] = hc_byte_perm_S (w[30], w[29], selector);
      w[53] = hc_byte_perm_S (w[29], w[28], selector);
      w[52] = hc_byte_perm_S (w[28], w[27], selector);
      w[51] = hc_byte_perm_S (w[27], w[26], selector);
      w[50] = hc_byte_perm_S (w[26], w[25], selector);
      w[49] = hc_byte_perm_S (w[25], w[24], selector);
      w[48] = hc_byte_perm_S (w[24], w[23], selector);
      w[47] = hc_byte_perm_S (w[23], w[22], selector);
      w[46] = hc_byte_perm_S (w[22], w[21], selector);
      w[45] = hc_byte_perm_S (w[21], w[20], selector);
      w[44] = hc_byte_perm_S (w[20], w[19], selector);
      w[43] = hc_byte_perm_S (w[19], w[18], selector);
      w[42] = hc_byte_perm_S (w[18], w[17], selector);
      w[41] = hc_byte_perm_S (w[17], w[16], selector);
      w[40] = hc_byte_perm_S (w[16], w[15], selector);
      w[39] = hc_byte_perm_S (w[15], w[14], selector);
      w[38] = hc_byte_perm_S (w[14], w[13], selector);
      w[37] = hc_byte_perm_S (w[13], w[12], selector);
      w[36] = hc_byte_perm_S (w[12], w[11], selector);
      w[35] = hc_byte_perm_S (w[11], w[10], selector);
      w[34] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[33] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[32] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[31] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[30] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[29] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[28] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[27] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[26] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[25] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[24] = hc_byte_perm_S (w[ 0],     0, selector);
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 25:
      w[63] = hc_byte_perm_S (w[38], w[37], selector);
      w[62] = hc_byte_perm_S (w[37], w[36], selector);
      w[61] = hc_byte_perm_S (w[36], w[35], selector);
      w[60] = hc_byte_perm_S (w[35], w[34], selector);
      w[59] = hc_byte_perm_S (w[34], w[33], selector);
      w[58] = hc_byte_perm_S (w[33], w[32], selector);
      w[57] = hc_byte_perm_S (w[32], w[31], selector);
      w[56] = hc_byte_perm_S (w[31], w[30], selector);
      w[55] = hc_byte_perm_S (w[30], w[29], selector);
      w[54] = hc_byte_perm_S (w[29], w[28], selector);
      w[53] = hc_byte_perm_S (w[28], w[27], selector);
      w[52] = hc_byte_perm_S (w[27], w[26], selector);
      w[51] = hc_byte_perm_S (w[26], w[25], selector);
      w[50] = hc_byte_perm_S (w[25], w[24], selector);
      w[49] = hc_byte_perm_S (w[24], w[23], selector);
      w[48] = hc_byte_perm_S (w[23], w[22], selector);
      w[47] = hc_byte_perm_S (w[22], w[21], selector);
      w[46] = hc_byte_perm_S (w[21], w[20], selector);
      w[45] = hc_byte_perm_S (w[20], w[19], selector);
      w[44] = hc_byte_perm_S (w[19], w[18], selector);
      w[43] = hc_byte_perm_S (w[18], w[17], selector);
      w[42] = hc_byte_perm_S (w[17], w[16], selector);
      w[41] = hc_byte_perm_S (w[16], w[15], selector);
      w[40] = hc_byte_perm_S (w[15], w[14], selector);
      w[39] = hc_byte_perm_S (w[14], w[13], selector);
      w[38] = hc_byte_perm_S (w[13], w[12], selector);
      w[37] = hc_byte_perm_S (w[12], w[11], selector);
      w[36] = hc_byte_perm_S (w[11], w[10], selector);
      w[35] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[34] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[33] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[32] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[31] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[30] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[29] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[28] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[27] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[26] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[25] = hc_byte_perm_S (w[ 0],     0, selector);
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 26:
      w[63] = hc_byte_perm_S (w[37], w[36], selector);
      w[62] = hc_byte_perm_S (w[36], w[35], selector);
      w[61] = hc_byte_perm_S (w[35], w[34], selector);
      w[60] = hc_byte_perm_S (w[34], w[33], selector);
      w[59] = hc_byte_perm_S (w[33], w[32], selector);
      w[58] = hc_byte_perm_S (w[32], w[31], selector);
      w[57] = hc_byte_perm_S (w[31], w[30], selector);
      w[56] = hc_byte_perm_S (w[30], w[29], selector);
      w[55] = hc_byte_perm_S (w[29], w[28], selector);
      w[54] = hc_byte_perm_S (w[28], w[27], selector);
      w[53] = hc_byte_perm_S (w[27], w[26], selector);
      w[52] = hc_byte_perm_S (w[26], w[25], selector);
      w[51] = hc_byte_perm_S (w[25], w[24], selector);
      w[50] = hc_byte_perm_S (w[24], w[23], selector);
      w[49] = hc_byte_perm_S (w[23], w[22], selector);
      w[48] = hc_byte_perm_S (w[22], w[21], selector);
      w[47] = hc_byte_perm_S (w[21], w[20], selector);
      w[46] = hc_byte_perm_S (w[20], w[19], selector);
      w[45] = hc_byte_perm_S (w[19], w[18], selector);
      w[44] = hc_byte_perm_S (w[18], w[17], selector);
      w[43] = hc_byte_perm_S (w[17], w[16], selector);
      w[42] = hc_byte_perm_S (w[16], w[15], selector);
      w[41] = hc_byte_perm_S (w[15], w[14], selector);
      w[40] = hc_byte_perm_S (w[14], w[13], selector);
      w[39] = hc_byte_perm_S (w[13], w[12], selector);
      w[38] = hc_byte_perm_S (w[12], w[11], selector);
      w[37] = hc_byte_perm_S (w[11], w[10], selector);
      w[36] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[35] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[34] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[33] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[32] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[31] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[30] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[29] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[28] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[27] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[26] = hc_byte_perm_S (w[ 0],     0, selector);
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 27:
      w[63] = hc_byte_perm_S (w[36], w[35], selector);
      w[62] = hc_byte_perm_S (w[35], w[34], selector);
      w[61] = hc_byte_perm_S (w[34], w[33], selector);
      w[60] = hc_byte_perm_S (w[33], w[32], selector);
      w[59] = hc_byte_perm_S (w[32], w[31], selector);
      w[58] = hc_byte_perm_S (w[31], w[30], selector);
      w[57] = hc_byte_perm_S (w[30], w[29], selector);
      w[56] = hc_byte_perm_S (w[29], w[28], selector);
      w[55] = hc_byte_perm_S (w[28], w[27], selector);
      w[54] = hc_byte_perm_S (w[27], w[26], selector);
      w[53] = hc_byte_perm_S (w[26], w[25], selector);
      w[52] = hc_byte_perm_S (w[25], w[24], selector);
      w[51] = hc_byte_perm_S (w[24], w[23], selector);
      w[50] = hc_byte_perm_S (w[23], w[22], selector);
      w[49] = hc_byte_perm_S (w[22], w[21], selector);
      w[48] = hc_byte_perm_S (w[21], w[20], selector);
      w[47] = hc_byte_perm_S (w[20], w[19], selector);
      w[46] = hc_byte_perm_S (w[19], w[18], selector);
      w[45] = hc_byte_perm_S (w[18], w[17], selector);
      w[44] = hc_byte_perm_S (w[17], w[16], selector);
      w[43] = hc_byte_perm_S (w[16], w[15], selector);
      w[42] = hc_byte_perm_S (w[15], w[14], selector);
      w[41] = hc_byte_perm_S (w[14], w[13], selector);
      w[40] = hc_byte_perm_S (w[13], w[12], selector);
      w[39] = hc_byte_perm_S (w[12], w[11], selector);
      w[38] = hc_byte_perm_S (w[11], w[10], selector);
      w[37] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[36] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[35] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[34] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[33] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[32] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[31] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[30] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[29] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[28] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[27] = hc_byte_perm_S (w[ 0],     0, selector);
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 28:
      w[63] = hc_byte_perm_S (w[35], w[34], selector);
      w[62] = hc_byte_perm_S (w[34], w[33], selector);
      w[61] = hc_byte_perm_S (w[33], w[32], selector);
      w[60] = hc_byte_perm_S (w[32], w[31], selector);
      w[59] = hc_byte_perm_S (w[31], w[30], selector);
      w[58] = hc_byte_perm_S (w[30], w[29], selector);
      w[57] = hc_byte_perm_S (w[29], w[28], selector);
      w[56] = hc_byte_perm_S (w[28], w[27], selector);
      w[55] = hc_byte_perm_S (w[27], w[26], selector);
      w[54] = hc_byte_perm_S (w[26], w[25], selector);
      w[53] = hc_byte_perm_S (w[25], w[24], selector);
      w[52] = hc_byte_perm_S (w[24], w[23], selector);
      w[51] = hc_byte_perm_S (w[23], w[22], selector);
      w[50] = hc_byte_perm_S (w[22], w[21], selector);
      w[49] = hc_byte_perm_S (w[21], w[20], selector);
      w[48] = hc_byte_perm_S (w[20], w[19], selector);
      w[47] = hc_byte_perm_S (w[19], w[18], selector);
      w[46] = hc_byte_perm_S (w[18], w[17], selector);
      w[45] = hc_byte_perm_S (w[17], w[16], selector);
      w[44] = hc_byte_perm_S (w[16], w[15], selector);
      w[43] = hc_byte_perm_S (w[15], w[14], selector);
      w[42] = hc_byte_perm_S (w[14], w[13], selector);
      w[41] = hc_byte_perm_S (w[13], w[12], selector);
      w[40] = hc_byte_perm_S (w[12], w[11], selector);
      w[39] = hc_byte_perm_S (w[11], w[10], selector);
      w[38] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[37] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[36] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[35] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[34] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[33] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[32] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[31] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[30] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[29] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[28] = hc_byte_perm_S (w[ 0],     0, selector);
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 29:
      w[63] = hc_byte_perm_S (w[34], w[33], selector);
      w[62] = hc_byte_perm_S (w[33], w[32], selector);
      w[61] = hc_byte_perm_S (w[32], w[31], selector);
      w[60] = hc_byte_perm_S (w[31], w[30], selector);
      w[59] = hc_byte_perm_S (w[30], w[29], selector);
      w[58] = hc_byte_perm_S (w[29], w[28], selector);
      w[57] = hc_byte_perm_S (w[28], w[27], selector);
      w[56] = hc_byte_perm_S (w[27], w[26], selector);
      w[55] = hc_byte_perm_S (w[26], w[25], selector);
      w[54] = hc_byte_perm_S (w[25], w[24], selector);
      w[53] = hc_byte_perm_S (w[24], w[23], selector);
      w[52] = hc_byte_perm_S (w[23], w[22], selector);
      w[51] = hc_byte_perm_S (w[22], w[21], selector);
      w[50] = hc_byte_perm_S (w[21], w[20], selector);
      w[49] = hc_byte_perm_S (w[20], w[19], selector);
      w[48] = hc_byte_perm_S (w[19], w[18], selector);
      w[47] = hc_byte_perm_S (w[18], w[17], selector);
      w[46] = hc_byte_perm_S (w[17], w[16], selector);
      w[45] = hc_byte_perm_S (w[16], w[15], selector);
      w[44] = hc_byte_perm_S (w[15], w[14], selector);
      w[43] = hc_byte_perm_S (w[14], w[13], selector);
      w[42] = hc_byte_perm_S (w[13], w[12], selector);
      w[41] = hc_byte_perm_S (w[12], w[11], selector);
      w[40] = hc_byte_perm_S (w[11], w[10], selector);
      w[39] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[38] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[37] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[36] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[35] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[34] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[33] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[32] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[31] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[30] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[29] = hc_byte_perm_S (w[ 0],     0, selector);
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 30:
      w[63] = hc_byte_perm_S (w[33], w[32], selector);
      w[62] = hc_byte_perm_S (w[32], w[31], selector);
      w[61] = hc_byte_perm_S (w[31], w[30], selector);
      w[60] = hc_byte_perm_S (w[30], w[29], selector);
      w[59] = hc_byte_perm_S (w[29], w[28], selector);
      w[58] = hc_byte_perm_S (w[28], w[27], selector);
      w[57] = hc_byte_perm_S (w[27], w[26], selector);
      w[56] = hc_byte_perm_S (w[26], w[25], selector);
      w[55] = hc_byte_perm_S (w[25], w[24], selector);
      w[54] = hc_byte_perm_S (w[24], w[23], selector);
      w[53] = hc_byte_perm_S (w[23], w[22], selector);
      w[52] = hc_byte_perm_S (w[22], w[21], selector);
      w[51] = hc_byte_perm_S (w[21], w[20], selector);
      w[50] = hc_byte_perm_S (w[20], w[19], selector);
      w[49] = hc_byte_perm_S (w[19], w[18], selector);
      w[48] = hc_byte_perm_S (w[18], w[17], selector);
      w[47] = hc_byte_perm_S (w[17], w[16], selector);
      w[46] = hc_byte_perm_S (w[16], w[15], selector);
      w[45] = hc_byte_perm_S (w[15], w[14], selector);
      w[44] = hc_byte_perm_S (w[14], w[13], selector);
      w[43] = hc_byte_perm_S (w[13], w[12], selector);
      w[42] = hc_byte_perm_S (w[12], w[11], selector);
      w[41] = hc_byte_perm_S (w[11], w[10], selector);
      w[40] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[39] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[38] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[37] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[36] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[35] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[34] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[33] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[32] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[31] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[30] = hc_byte_perm_S (w[ 0],     0, selector);
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 31:
      w[63] = hc_byte_perm_S (w[32], w[31], selector);
      w[62] = hc_byte_perm_S (w[31], w[30], selector);
      w[61] = hc_byte_perm_S (w[30], w[29], selector);
      w[60] = hc_byte_perm_S (w[29], w[28], selector);
      w[59] = hc_byte_perm_S (w[28], w[27], selector);
      w[58] = hc_byte_perm_S (w[27], w[26], selector);
      w[57] = hc_byte_perm_S (w[26], w[25], selector);
      w[56] = hc_byte_perm_S (w[25], w[24], selector);
      w[55] = hc_byte_perm_S (w[24], w[23], selector);
      w[54] = hc_byte_perm_S (w[23], w[22], selector);
      w[53] = hc_byte_perm_S (w[22], w[21], selector);
      w[52] = hc_byte_perm_S (w[21], w[20], selector);
      w[51] = hc_byte_perm_S (w[20], w[19], selector);
      w[50] = hc_byte_perm_S (w[19], w[18], selector);
      w[49] = hc_byte_perm_S (w[18], w[17], selector);
      w[48] = hc_byte_perm_S (w[17], w[16], selector);
      w[47] = hc_byte_perm_S (w[16], w[15], selector);
      w[46] = hc_byte_perm_S (w[15], w[14], selector);
      w[45] = hc_byte_perm_S (w[14], w[13], selector);
      w[44] = hc_byte_perm_S (w[13], w[12], selector);
      w[43] = hc_byte_perm_S (w[12], w[11], selector);
      w[42] = hc_byte_perm_S (w[11], w[10], selector);
      w[41] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[40] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[39] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[38] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[37] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[36] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[35] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[34] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[33] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[32] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[31] = hc_byte_perm_S (w[ 0],     0, selector);
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 32:
      w[63] = hc_byte_perm_S (w[31], w[30], selector);
      w[62] = hc_byte_perm_S (w[30], w[29], selector);
      w[61] = hc_byte_perm_S (w[29], w[28], selector);
      w[60] = hc_byte_perm_S (w[28], w[27], selector);
      w[59] = hc_byte_perm_S (w[27], w[26], selector);
      w[58] = hc_byte_perm_S (w[26], w[25], selector);
      w[57] = hc_byte_perm_S (w[25], w[24], selector);
      w[56] = hc_byte_perm_S (w[24], w[23], selector);
      w[55] = hc_byte_perm_S (w[23], w[22], selector);
      w[54] = hc_byte_perm_S (w[22], w[21], selector);
      w[53] = hc_byte_perm_S (w[21], w[20], selector);
      w[52] = hc_byte_perm_S (w[20], w[19], selector);
      w[51] = hc_byte_perm_S (w[19], w[18], selector);
      w[50] = hc_byte_perm_S (w[18], w[17], selector);
      w[49] = hc_byte_perm_S (w[17], w[16], selector);
      w[48] = hc_byte_perm_S (w[16], w[15], selector);
      w[47] = hc_byte_perm_S (w[15], w[14], selector);
      w[46] = hc_byte_perm_S (w[14], w[13], selector);
      w[45] = hc_byte_perm_S (w[13], w[12], selector);
      w[44] = hc_byte_perm_S (w[12], w[11], selector);
      w[43] = hc_byte_perm_S (w[11], w[10], selector);
      w[42] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[41] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[40] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[39] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[38] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[37] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[36] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[35] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[34] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[33] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[32] = hc_byte_perm_S (w[ 0],     0, selector);
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 33:
      w[63] = hc_byte_perm_S (w[30], w[29], selector);
      w[62] = hc_byte_perm_S (w[29], w[28], selector);
      w[61] = hc_byte_perm_S (w[28], w[27], selector);
      w[60] = hc_byte_perm_S (w[27], w[26], selector);
      w[59] = hc_byte_perm_S (w[26], w[25], selector);
      w[58] = hc_byte_perm_S (w[25], w[24], selector);
      w[57] = hc_byte_perm_S (w[24], w[23], selector);
      w[56] = hc_byte_perm_S (w[23], w[22], selector);
      w[55] = hc_byte_perm_S (w[22], w[21], selector);
      w[54] = hc_byte_perm_S (w[21], w[20], selector);
      w[53] = hc_byte_perm_S (w[20], w[19], selector);
      w[52] = hc_byte_perm_S (w[19], w[18], selector);
      w[51] = hc_byte_perm_S (w[18], w[17], selector);
      w[50] = hc_byte_perm_S (w[17], w[16], selector);
      w[49] = hc_byte_perm_S (w[16], w[15], selector);
      w[48] = hc_byte_perm_S (w[15], w[14], selector);
      w[47] = hc_byte_perm_S (w[14], w[13], selector);
      w[46] = hc_byte_perm_S (w[13], w[12], selector);
      w[45] = hc_byte_perm_S (w[12], w[11], selector);
      w[44] = hc_byte_perm_S (w[11], w[10], selector);
      w[43] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[42] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[41] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[40] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[39] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[38] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[37] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[36] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[35] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[34] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[33] = hc_byte_perm_S (w[ 0],     0, selector);
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 34:
      w[63] = hc_byte_perm_S (w[29], w[28], selector);
      w[62] = hc_byte_perm_S (w[28], w[27], selector);
      w[61] = hc_byte_perm_S (w[27], w[26], selector);
      w[60] = hc_byte_perm_S (w[26], w[25], selector);
      w[59] = hc_byte_perm_S (w[25], w[24], selector);
      w[58] = hc_byte_perm_S (w[24], w[23], selector);
      w[57] = hc_byte_perm_S (w[23], w[22], selector);
      w[56] = hc_byte_perm_S (w[22], w[21], selector);
      w[55] = hc_byte_perm_S (w[21], w[20], selector);
      w[54] = hc_byte_perm_S (w[20], w[19], selector);
      w[53] = hc_byte_perm_S (w[19], w[18], selector);
      w[52] = hc_byte_perm_S (w[18], w[17], selector);
      w[51] = hc_byte_perm_S (w[17], w[16], selector);
      w[50] = hc_byte_perm_S (w[16], w[15], selector);
      w[49] = hc_byte_perm_S (w[15], w[14], selector);
      w[48] = hc_byte_perm_S (w[14], w[13], selector);
      w[47] = hc_byte_perm_S (w[13], w[12], selector);
      w[46] = hc_byte_perm_S (w[12], w[11], selector);
      w[45] = hc_byte_perm_S (w[11], w[10], selector);
      w[44] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[43] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[42] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[41] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[40] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[39] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[38] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[37] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[36] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[35] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[34] = hc_byte_perm_S (w[ 0],     0, selector);
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 35:
      w[63] = hc_byte_perm_S (w[28], w[27], selector);
      w[62] = hc_byte_perm_S (w[27], w[26], selector);
      w[61] = hc_byte_perm_S (w[26], w[25], selector);
      w[60] = hc_byte_perm_S (w[25], w[24], selector);
      w[59] = hc_byte_perm_S (w[24], w[23], selector);
      w[58] = hc_byte_perm_S (w[23], w[22], selector);
      w[57] = hc_byte_perm_S (w[22], w[21], selector);
      w[56] = hc_byte_perm_S (w[21], w[20], selector);
      w[55] = hc_byte_perm_S (w[20], w[19], selector);
      w[54] = hc_byte_perm_S (w[19], w[18], selector);
      w[53] = hc_byte_perm_S (w[18], w[17], selector);
      w[52] = hc_byte_perm_S (w[17], w[16], selector);
      w[51] = hc_byte_perm_S (w[16], w[15], selector);
      w[50] = hc_byte_perm_S (w[15], w[14], selector);
      w[49] = hc_byte_perm_S (w[14], w[13], selector);
      w[48] = hc_byte_perm_S (w[13], w[12], selector);
      w[47] = hc_byte_perm_S (w[12], w[11], selector);
      w[46] = hc_byte_perm_S (w[11], w[10], selector);
      w[45] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[44] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[43] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[42] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[41] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[40] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[39] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[38] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[37] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[36] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[35] = hc_byte_perm_S (w[ 0],     0, selector);
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 36:
      w[63] = hc_byte_perm_S (w[27], w[26], selector);
      w[62] = hc_byte_perm_S (w[26], w[25], selector);
      w[61] = hc_byte_perm_S (w[25], w[24], selector);
      w[60] = hc_byte_perm_S (w[24], w[23], selector);
      w[59] = hc_byte_perm_S (w[23], w[22], selector);
      w[58] = hc_byte_perm_S (w[22], w[21], selector);
      w[57] = hc_byte_perm_S (w[21], w[20], selector);
      w[56] = hc_byte_perm_S (w[20], w[19], selector);
      w[55] = hc_byte_perm_S (w[19], w[18], selector);
      w[54] = hc_byte_perm_S (w[18], w[17], selector);
      w[53] = hc_byte_perm_S (w[17], w[16], selector);
      w[52] = hc_byte_perm_S (w[16], w[15], selector);
      w[51] = hc_byte_perm_S (w[15], w[14], selector);
      w[50] = hc_byte_perm_S (w[14], w[13], selector);
      w[49] = hc_byte_perm_S (w[13], w[12], selector);
      w[48] = hc_byte_perm_S (w[12], w[11], selector);
      w[47] = hc_byte_perm_S (w[11], w[10], selector);
      w[46] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[45] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[44] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[43] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[42] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[41] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[40] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[39] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[38] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[37] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[36] = hc_byte_perm_S (w[ 0],     0, selector);
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 37:
      w[63] = hc_byte_perm_S (w[26], w[25], selector);
      w[62] = hc_byte_perm_S (w[25], w[24], selector);
      w[61] = hc_byte_perm_S (w[24], w[23], selector);
      w[60] = hc_byte_perm_S (w[23], w[22], selector);
      w[59] = hc_byte_perm_S (w[22], w[21], selector);
      w[58] = hc_byte_perm_S (w[21], w[20], selector);
      w[57] = hc_byte_perm_S (w[20], w[19], selector);
      w[56] = hc_byte_perm_S (w[19], w[18], selector);
      w[55] = hc_byte_perm_S (w[18], w[17], selector);
      w[54] = hc_byte_perm_S (w[17], w[16], selector);
      w[53] = hc_byte_perm_S (w[16], w[15], selector);
      w[52] = hc_byte_perm_S (w[15], w[14], selector);
      w[51] = hc_byte_perm_S (w[14], w[13], selector);
      w[50] = hc_byte_perm_S (w[13], w[12], selector);
      w[49] = hc_byte_perm_S (w[12], w[11], selector);
      w[48] = hc_byte_perm_S (w[11], w[10], selector);
      w[47] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[46] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[45] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[44] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[43] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[42] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[41] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[40] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[39] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[38] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[37] = hc_byte_perm_S (w[ 0],     0, selector);
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 38:
      w[63] = hc_byte_perm_S (w[25], w[24], selector);
      w[62] = hc_byte_perm_S (w[24], w[23], selector);
      w[61] = hc_byte_perm_S (w[23], w[22], selector);
      w[60] = hc_byte_perm_S (w[22], w[21], selector);
      w[59] = hc_byte_perm_S (w[21], w[20], selector);
      w[58] = hc_byte_perm_S (w[20], w[19], selector);
      w[57] = hc_byte_perm_S (w[19], w[18], selector);
      w[56] = hc_byte_perm_S (w[18], w[17], selector);
      w[55] = hc_byte_perm_S (w[17], w[16], selector);
      w[54] = hc_byte_perm_S (w[16], w[15], selector);
      w[53] = hc_byte_perm_S (w[15], w[14], selector);
      w[52] = hc_byte_perm_S (w[14], w[13], selector);
      w[51] = hc_byte_perm_S (w[13], w[12], selector);
      w[50] = hc_byte_perm_S (w[12], w[11], selector);
      w[49] = hc_byte_perm_S (w[11], w[10], selector);
      w[48] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[47] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[46] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[45] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[44] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[43] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[42] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[41] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[40] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[39] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[38] = hc_byte_perm_S (w[ 0],     0, selector);
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 39:
      w[63] = hc_byte_perm_S (w[24], w[23], selector);
      w[62] = hc_byte_perm_S (w[23], w[22], selector);
      w[61] = hc_byte_perm_S (w[22], w[21], selector);
      w[60] = hc_byte_perm_S (w[21], w[20], selector);
      w[59] = hc_byte_perm_S (w[20], w[19], selector);
      w[58] = hc_byte_perm_S (w[19], w[18], selector);
      w[57] = hc_byte_perm_S (w[18], w[17], selector);
      w[56] = hc_byte_perm_S (w[17], w[16], selector);
      w[55] = hc_byte_perm_S (w[16], w[15], selector);
      w[54] = hc_byte_perm_S (w[15], w[14], selector);
      w[53] = hc_byte_perm_S (w[14], w[13], selector);
      w[52] = hc_byte_perm_S (w[13], w[12], selector);
      w[51] = hc_byte_perm_S (w[12], w[11], selector);
      w[50] = hc_byte_perm_S (w[11], w[10], selector);
      w[49] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[48] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[47] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[46] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[45] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[44] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[43] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[42] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[41] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[40] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[39] = hc_byte_perm_S (w[ 0],     0, selector);
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 40:
      w[63] = hc_byte_perm_S (w[23], w[22], selector);
      w[62] = hc_byte_perm_S (w[22], w[21], selector);
      w[61] = hc_byte_perm_S (w[21], w[20], selector);
      w[60] = hc_byte_perm_S (w[20], w[19], selector);
      w[59] = hc_byte_perm_S (w[19], w[18], selector);
      w[58] = hc_byte_perm_S (w[18], w[17], selector);
      w[57] = hc_byte_perm_S (w[17], w[16], selector);
      w[56] = hc_byte_perm_S (w[16], w[15], selector);
      w[55] = hc_byte_perm_S (w[15], w[14], selector);
      w[54] = hc_byte_perm_S (w[14], w[13], selector);
      w[53] = hc_byte_perm_S (w[13], w[12], selector);
      w[52] = hc_byte_perm_S (w[12], w[11], selector);
      w[51] = hc_byte_perm_S (w[11], w[10], selector);
      w[50] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[49] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[48] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[47] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[46] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[45] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[44] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[43] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[42] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[41] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[40] = hc_byte_perm_S (w[ 0],     0, selector);
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 41:
      w[63] = hc_byte_perm_S (w[22], w[21], selector);
      w[62] = hc_byte_perm_S (w[21], w[20], selector);
      w[61] = hc_byte_perm_S (w[20], w[19], selector);
      w[60] = hc_byte_perm_S (w[19], w[18], selector);
      w[59] = hc_byte_perm_S (w[18], w[17], selector);
      w[58] = hc_byte_perm_S (w[17], w[16], selector);
      w[57] = hc_byte_perm_S (w[16], w[15], selector);
      w[56] = hc_byte_perm_S (w[15], w[14], selector);
      w[55] = hc_byte_perm_S (w[14], w[13], selector);
      w[54] = hc_byte_perm_S (w[13], w[12], selector);
      w[53] = hc_byte_perm_S (w[12], w[11], selector);
      w[52] = hc_byte_perm_S (w[11], w[10], selector);
      w[51] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[50] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[49] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[48] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[47] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[46] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[45] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[44] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[43] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[42] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[41] = hc_byte_perm_S (w[ 0],     0, selector);
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 42:
      w[63] = hc_byte_perm_S (w[21], w[20], selector);
      w[62] = hc_byte_perm_S (w[20], w[19], selector);
      w[61] = hc_byte_perm_S (w[19], w[18], selector);
      w[60] = hc_byte_perm_S (w[18], w[17], selector);
      w[59] = hc_byte_perm_S (w[17], w[16], selector);
      w[58] = hc_byte_perm_S (w[16], w[15], selector);
      w[57] = hc_byte_perm_S (w[15], w[14], selector);
      w[56] = hc_byte_perm_S (w[14], w[13], selector);
      w[55] = hc_byte_perm_S (w[13], w[12], selector);
      w[54] = hc_byte_perm_S (w[12], w[11], selector);
      w[53] = hc_byte_perm_S (w[11], w[10], selector);
      w[52] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[51] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[50] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[49] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[48] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[47] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[46] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[45] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[44] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[43] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[42] = hc_byte_perm_S (w[ 0],     0, selector);
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 43:
      w[63] = hc_byte_perm_S (w[20], w[19], selector);
      w[62] = hc_byte_perm_S (w[19], w[18], selector);
      w[61] = hc_byte_perm_S (w[18], w[17], selector);
      w[60] = hc_byte_perm_S (w[17], w[16], selector);
      w[59] = hc_byte_perm_S (w[16], w[15], selector);
      w[58] = hc_byte_perm_S (w[15], w[14], selector);
      w[57] = hc_byte_perm_S (w[14], w[13], selector);
      w[56] = hc_byte_perm_S (w[13], w[12], selector);
      w[55] = hc_byte_perm_S (w[12], w[11], selector);
      w[54] = hc_byte_perm_S (w[11], w[10], selector);
      w[53] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[52] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[51] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[50] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[49] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[48] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[47] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[46] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[45] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[44] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[43] = hc_byte_perm_S (w[ 0],     0, selector);
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 44:
      w[63] = hc_byte_perm_S (w[19], w[18], selector);
      w[62] = hc_byte_perm_S (w[18], w[17], selector);
      w[61] = hc_byte_perm_S (w[17], w[16], selector);
      w[60] = hc_byte_perm_S (w[16], w[15], selector);
      w[59] = hc_byte_perm_S (w[15], w[14], selector);
      w[58] = hc_byte_perm_S (w[14], w[13], selector);
      w[57] = hc_byte_perm_S (w[13], w[12], selector);
      w[56] = hc_byte_perm_S (w[12], w[11], selector);
      w[55] = hc_byte_perm_S (w[11], w[10], selector);
      w[54] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[53] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[52] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[51] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[50] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[49] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[48] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[47] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[46] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[45] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[44] = hc_byte_perm_S (w[ 0],     0, selector);
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 45:
      w[63] = hc_byte_perm_S (w[18], w[17], selector);
      w[62] = hc_byte_perm_S (w[17], w[16], selector);
      w[61] = hc_byte_perm_S (w[16], w[15], selector);
      w[60] = hc_byte_perm_S (w[15], w[14], selector);
      w[59] = hc_byte_perm_S (w[14], w[13], selector);
      w[58] = hc_byte_perm_S (w[13], w[12], selector);
      w[57] = hc_byte_perm_S (w[12], w[11], selector);
      w[56] = hc_byte_perm_S (w[11], w[10], selector);
      w[55] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[54] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[53] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[52] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[51] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[50] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[49] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[48] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[47] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[46] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[45] = hc_byte_perm_S (w[ 0],     0, selector);
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 46:
      w[63] = hc_byte_perm_S (w[17], w[16], selector);
      w[62] = hc_byte_perm_S (w[16], w[15], selector);
      w[61] = hc_byte_perm_S (w[15], w[14], selector);
      w[60] = hc_byte_perm_S (w[14], w[13], selector);
      w[59] = hc_byte_perm_S (w[13], w[12], selector);
      w[58] = hc_byte_perm_S (w[12], w[11], selector);
      w[57] = hc_byte_perm_S (w[11], w[10], selector);
      w[56] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[55] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[54] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[53] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[52] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[51] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[50] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[49] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[48] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[47] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[46] = hc_byte_perm_S (w[ 0],     0, selector);
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 47:
      w[63] = hc_byte_perm_S (w[16], w[15], selector);
      w[62] = hc_byte_perm_S (w[15], w[14], selector);
      w[61] = hc_byte_perm_S (w[14], w[13], selector);
      w[60] = hc_byte_perm_S (w[13], w[12], selector);
      w[59] = hc_byte_perm_S (w[12], w[11], selector);
      w[58] = hc_byte_perm_S (w[11], w[10], selector);
      w[57] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[56] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[55] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[54] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[53] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[52] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[51] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[50] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[49] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[48] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[47] = hc_byte_perm_S (w[ 0],     0, selector);
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 48:
      w[63] = hc_byte_perm_S (w[15], w[14], selector);
      w[62] = hc_byte_perm_S (w[14], w[13], selector);
      w[61] = hc_byte_perm_S (w[13], w[12], selector);
      w[60] = hc_byte_perm_S (w[12], w[11], selector);
      w[59] = hc_byte_perm_S (w[11], w[10], selector);
      w[58] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[57] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[56] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[55] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[54] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[53] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[52] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[51] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[50] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[49] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[48] = hc_byte_perm_S (w[ 0],     0, selector);
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 49:
      w[63] = hc_byte_perm_S (w[14], w[13], selector);
      w[62] = hc_byte_perm_S (w[13], w[12], selector);
      w[61] = hc_byte_perm_S (w[12], w[11], selector);
      w[60] = hc_byte_perm_S (w[11], w[10], selector);
      w[59] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[58] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[57] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[56] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[55] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[54] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[53] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[52] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[51] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[50] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[49] = hc_byte_perm_S (w[ 0],     0, selector);
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 50:
      w[63] = hc_byte_perm_S (w[13], w[12], selector);
      w[62] = hc_byte_perm_S (w[12], w[11], selector);
      w[61] = hc_byte_perm_S (w[11], w[10], selector);
      w[60] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[59] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[58] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[57] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[56] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[55] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[54] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[53] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[52] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[51] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[50] = hc_byte_perm_S (w[ 0],     0, selector);
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 51:
      w[63] = hc_byte_perm_S (w[12], w[11], selector);
      w[62] = hc_byte_perm_S (w[11], w[10], selector);
      w[61] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[60] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[59] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[58] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[57] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[56] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[55] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[54] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[53] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[52] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[51] = hc_byte_perm_S (w[ 0],     0, selector);
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 52:
      w[63] = hc_byte_perm_S (w[11], w[10], selector);
      w[62] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[61] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[60] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[59] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[58] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[57] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[56] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[55] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[54] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[53] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[52] = hc_byte_perm_S (w[ 0],     0, selector);
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 53:
      w[63] = hc_byte_perm_S (w[10], w[ 9], selector);
      w[62] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[61] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[60] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[59] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[58] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[57] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[56] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[55] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[54] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[53] = hc_byte_perm_S (w[ 0],     0, selector);
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 54:
      w[63] = hc_byte_perm_S (w[ 9], w[ 8], selector);
      w[62] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[61] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[60] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[59] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[58] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[57] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[56] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[55] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[54] = hc_byte_perm_S (w[ 0],     0, selector);
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 55:
      w[63] = hc_byte_perm_S (w[ 8], w[ 7], selector);
      w[62] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[61] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[60] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[59] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[58] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[57] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[56] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[55] = hc_byte_perm_S (w[ 0],     0, selector);
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 56:
      w[63] = hc_byte_perm_S (w[ 7], w[ 6], selector);
      w[62] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[61] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[60] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[59] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[58] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[57] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[56] = hc_byte_perm_S (w[ 0],     0, selector);
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 57:
      w[63] = hc_byte_perm_S (w[ 6], w[ 5], selector);
      w[62] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[61] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[60] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[59] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[58] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[57] = hc_byte_perm_S (w[ 0],     0, selector);
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 58:
      w[63] = hc_byte_perm_S (w[ 5], w[ 4], selector);
      w[62] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[61] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[60] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[59] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[58] = hc_byte_perm_S (w[ 0],     0, selector);
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 59:
      w[63] = hc_byte_perm_S (w[ 4], w[ 3], selector);
      w[62] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[61] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[60] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[59] = hc_byte_perm_S (w[ 0],     0, selector);
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 60:
      w[63] = hc_byte_perm_S (w[ 3], w[ 2], selector);
      w[62] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[61] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[60] = hc_byte_perm_S (w[ 0],     0, selector);
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 61:
      w[63] = hc_byte_perm_S (w[ 2], w[ 1], selector);
      w[62] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[61] = hc_byte_perm_S (w[ 0],     0, selector);
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 62:
      w[63] = hc_byte_perm_S (w[ 1], w[ 0], selector);
      w[62] = hc_byte_perm_S (w[ 0],     0, selector);
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;

    case 63:
      w[63] = hc_byte_perm_S (w[ 0],     0, selector);
      w[62] = 0;
      w[61] = 0;
      w[60] = 0;
      w[59] = 0;
      w[58] = 0;
      w[57] = 0;
      w[56] = 0;
      w[55] = 0;
      w[54] = 0;
      w[53] = 0;
      w[52] = 0;
      w[51] = 0;
      w[50] = 0;
      w[49] = 0;
      w[48] = 0;
      w[47] = 0;
      w[46] = 0;
      w[45] = 0;
      w[44] = 0;
      w[43] = 0;
      w[42] = 0;
      w[41] = 0;
      w[40] = 0;
      w[39] = 0;
      w[38] = 0;
      w[37] = 0;
      w[36] = 0;
      w[35] = 0;
      w[34] = 0;
      w[33] = 0;
      w[32] = 0;
      w[31] = 0;
      w[30] = 0;
      w[29] = 0;
      w[28] = 0;
      w[27] = 0;
      w[26] = 0;
      w[25] = 0;
      w[24] = 0;
      w[23] = 0;
      w[22] = 0;
      w[21] = 0;
      w[20] = 0;
      w[19] = 0;
      w[18] = 0;
      w[17] = 0;
      w[16] = 0;
      w[15] = 0;
      w[14] = 0;
      w[13] = 0;
      w[12] = 0;
      w[11] = 0;
      w[10] = 0;
      w[ 9] = 0;
      w[ 8] = 0;
      w[ 7] = 0;
      w[ 6] = 0;
      w[ 5] = 0;
      w[ 4] = 0;
      w[ 3] = 0;
      w[ 2] = 0;
      w[ 1] = 0;
      w[ 0] = 0;

      break;
  }
  #endif
}
